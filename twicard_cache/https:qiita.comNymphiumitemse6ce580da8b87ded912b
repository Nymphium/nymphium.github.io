<!DOCTYPE html><html><head><meta charset="utf-8" /><title>Algebraic Effectsとは? 出身は? 使い方は? その特徴とは? 調べてみました! - Qiita</title><meta content="width=device-width,initial-scale=1,shrink-to-fit=no" name="viewport" /><meta content="#55c500" name="theme-color" /><meta content="XWpkTG32-_C4joZoJ_UsmDUi-zaH-hcrjF6ZC_FoFbk" name="google-site-verification" /><link href="/manifest.json" rel="manifest" /><link href="/opensearch.xml" rel="search" title="Qiita" type="application/opensearchdescription+xml" /><script async="" src="https://www.googletagmanager.com/gtag/js?id=AW-935296116"></script><script>window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'AW-935296116');

// Event snippet for qiita remarketing page
gtag('event', 'conversion', {
    'send_to': 'AW-935296116/jvRhCOaj5YYBEPT4_b0D',
    'value': 1.0,
    'currency': 'JPY',
    'aw_remarketing_only': true
});</script><script async="" src="https://www.googletagmanager.com/gtag/js?id=AW-878053044"></script><script>window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'AW-878053044');</script><meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="f3qAer+80MXyNLXQxghlEc8qkk1Ta9W8thCO3h4L8zfdko0YNJUXbnIQw0F7Ex3UQQkYUFy0dB1FeLuIu4lGEQ==" /><link rel="shortcut icon" type="image/x-icon" href="https://cdn.qiita.com/assets/favicons/public/production.ico" /><link rel="apple-touch-icon" type="image/png" href="https://cdn.qiita.com/assets/favicons/public/apple-touch-icon-f9a6afad761ec2306e10db2736187c8b.png" /><link rel="stylesheet" media="all" href="https://cdn.qiita.com/assets/public/style-5b772ff68dd9eb1fc1772b052240f812.min.css" /><script defer="" src="https://cdn.polyfill.io/v2/polyfill.min.js"></script><script src="https://cdn.qiita.com/assets/public/bundle-a0d720aaac6051b1387677300b27d583.min.js" defer="defer"></script><meta content="summary" name="twitter:card" /><meta content="@Qiita" name="twitter:site" /><meta content="@Nymphium" name="twitter:creator" /><meta property="og:type" content="article"><meta property="og:title" content="Algebraic Effectsとは? 出身は? 使い方は? その特徴とは? 調べてみました! - Qiita"><meta property="og:image" content="https://cdn.qiita.com/assets/qiita-fb-2887e7b4aad86fd8c25cea84846f2236.png"><meta property="og:description" content="ReactのHooksが実質algebraic effectsなんじゃないかということでalgebraic effectsに関する怪文書が流布して鼻白んでしまう､そんな未来を阻止するため､曲がりなりにもalgebraic effect..."><meta content="https://qiita.com/Nymphium/items/e6ce580da8b87ded912b" property="og:url" /><meta content="Qiita" property="og:site_name" /><meta content="564524038" property="fb:admins" /><meta content="JavaScript,algebra" name="keywords" /></head><body><div class="allWrapper"><div data-hyperapp-app="GlobalHeader" data-hyperapp-props="{&quot;unreadNotificationsCount&quot;:null,&quot;realms&quot;:[{&quot;humanName&quot;:&quot;Qiita&quot;,&quot;isCurrentRealm&quot;:true,&quot;isQiita&quot;:true,&quot;isQiitaTeam&quot;:false,&quot;loggedInUser&quot;:null,&quot;teamId&quot;:null,&quot;url&quot;:&quot;https://qiita.com/&quot;}],&quot;teamFindUrl&quot;:&quot;https://teams-center.qiita.com/find_team&quot;,&quot;isTeamOnlyUser&quot;:null,&quot;currentUser&quot;:null}"><div class="st-Header" id="globalHeader"><div class="st-Header_container"><div class="st-Header_start"><a class="st-Header_logo mr-1" href="/"><svg viewBox="0 0 75 25" xmlns="http://www.w3.org/2000/svg"><title>Qiita</title><path d="M24.6 12.2C24.6 6.2 20 0 12.2 0 6.2 0 0 4.6 0 12.4c0 6 4.6 12.2 12.4 12.2 2.5 0 5-.8 7.1-2.3l3.6 3.6 1.6-1.6-3.4-3.4c2.1-2.3 3.3-5.3 3.3-8.7zm-12.4-10c5.7 0 10.2 4.4 10.2 10.1 0 4.9-3.8 10.1-10.1 10.1s-10.1-5.1-10.1-10c0-6.4 5.1-10.2 10-10.2zM30.5 7.1h2.1v17h-2.1zM31.5 4.8c-1 0-1.8-.8-1.8-1.8s.8-1.8 1.8-1.8 1.8.8 1.8 1.8-.8 1.8-1.8 1.8zM40 4.8c-1 0-1.8-.8-1.8-1.8S39 1.2 40 1.2s1.8.8 1.8 1.8S41 4.8 40 4.8zM39 7.1h2.1v17H39zM53.7 24.4c-3.9 0-6.2-3-6.2-6v-16h2.1v4.7H57v2.1h-7.4v9.3c0 1.9 1.5 3.9 4.1 3.9.7 0 1.4-.2 2-.6l.2-.1 1 1.8-.2.1c-.9.5-2 .8-3 .8zM67.6 24.5c-5.7 0-9.1-4.5-9.1-8.9 0-5.7 4.5-9.1 8.9-9.1 2.3 0 4.1.8 5.4 2.3V7.1h2.1v17h-2.1v-1.9c-1.2 1.5-3 2.3-5.2 2.3zm-.2-15.9c-3.4 0-6.8 2.6-6.8 7 0 3.4 2.6 6.8 7 6.8 2 0 4-.9 5.3-2.5v-8.8c-1.4-1.6-3.3-2.5-5.5-2.5z"></path></svg></a><div><div class="st-Header_realmSelector"><span class="fa fa-fw fa-caret-down"></span></div></div><div><div class="st-Header_community">Community<span class="fa fa-fw fa-caret-down ml-1of2"></span></div></div><form class="st-Header_search"><span class="fa fa-search"></span><input class="st-Header_searchInput" placeholder="Search" type="search" /></form><div class="st-Header_searchButton"><span class="fa fa-serach"></span></div></div><div class="st-Header_end"><a class="st-Header_signupButton" href="/signup">Signup</a><a class="st-Header_loginLink" href="/login">Login</a></div></div></div></div><div class="st-HeaderAlert st-HeaderAlert-warning"><div class="st-HeaderAlert_body"></div></div><script type="application/ld+json">{"@context":"http://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","position":1,"item":{"@id":"/","name":"Qiita"}},{"@type":"ListItem","position":2,"item":{"@id":"/tags/%23%3CQiita::Graph::Result:0x00557c6321c2f0%3E","name":"JavaScript"}}]}</script><script async="" src="https://cdn.bigmining.com/private/js/qiita_bigmining.js"></script><div style="display:none"><div class="TagList__label"><span></span><span>JavaScript</span></div><div class="TagList__label"><span></span><span>algebra</span></div></div><img style="display:block;margin:0;padding:0;border:0;outline:0;width:0;height:0;line-height:0;" alt="" src="https://relay-dsp.ad-m.asia/dmp/sync/bizmatrix?pid=c3ed207b574cf11376&amp;d=x18o8hduaj&amp;uid=" /><div data-hyperapp-app="PersonalPublicArticle" data-hyperapp-props="{&quot;article&quot;:{&quot;body&quot;:&quot;\u003cp\u003eReactのHooksが実質algebraic effectsなんじゃないかということでalgebraic effectsに関する怪文書が流布して鼻白んでしまう､そんな未来を阻止するため､曲がりなりにもalgebraic effectsを研究している者としてalgebraic effectsについて書こうと思います｡\u003c/p\u003e\n\n\u003cp\u003e当方React全く知らないしJSにも明るくない侍ですが､プログラム片にはJSっぽいシンタックスを使っていこうと思います｡\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\&quot;イントロ\&quot; class=\&quot;fragment\&quot;\u003e\u003c/span\u003e\u003ca href=\&quot;#%E3%82%A4%E3%83%B3%E3%83%88%E3%83%AD\&quot;\u003e\u003ci class=\&quot;fa fa-link\&quot;\u003e\u003c/i\u003e\u003c/a\u003eイントロ\u003c/h1\u003e\n\n\u003cp\u003eAlgebraic Effectsとは､Plotkinらによって提唱された､computational effectsを代数的に扱おうという試みである｡それにeffect handlerが後付けされ､現在はalgebraic effects \u003cem\u003eand handlers\u003c/em\u003e を略してalgebraic effectsと呼んでいることが多い｡非常に直感的な説明としては､\u003cem\u003e継続を取ってこれる例外\u003c/em\u003eである｡\u003cbr\u003e\nチュートリアルとしては､こちらの論文\u003csup id=\&quot;fnref1\&quot;\u003e\u003ca href=\&quot;#fn1\&quot; rel=\&quot;footnote\&quot; title=&#39;Pretnar, Matija. \&quot;An introduction to algebraic effects and handlers. invited tutorial paper.\&quot; Electronic Notes in Theoretical Computer Science 319 (2015): 19-35.&#39;\u003e1\u003c/a\u003e\u003c/sup\u003eの内容に尽きるわけですが……｡\u003c/p\u003e\n\n\u003cp\u003ealgebraic effectsは､エフェクトの定義､発生､そしてハンドラに分かれる｡\u003c/p\u003e\n\n\u003cdiv class=\&quot;code-frame\&quot; data-lang=\&quot;js\&quot;\u003e\u003cdiv class=\&quot;highlight\&quot;\u003e\u003cpre\u003e\u003cspan class=\&quot;c1\&quot;\u003e// effect invocation\u003c/span\u003e\n\u003cspan class=\&quot;nx\&quot;\u003eeffect\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eFoo\u003c/span\u003e \u003cspan class=\&quot;cm\&quot;\u003e/* : int -\u0026gt; int */\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e;\u003c/span\u003e\n\n\u003cspan class=\&quot;c1\&quot;\u003e// handler\u003c/span\u003e\n\u003cspan class=\&quot;nx\&quot;\u003ehandle\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003econsole\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e.\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003elog\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003eperform\u003c/span\u003e\u003cspan class=\&quot;cm\&quot;\u003e/* invocation */\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eFoo\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;mi\&quot;\u003e3\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e)\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e+\u003c/span\u003e \u003cspan class=\&quot;mi\&quot;\u003e10\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e))\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n    \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n       \u003cspan class=\&quot;nx\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e;\u003c/span\u003e\n    \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\n    \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eFoo\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e),\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n        \u003cspan class=\&quot;nx\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003ex\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e*\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e);\u003c/span\u003e\n    \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\n\u003cspan class=\&quot;c1\&quot;\u003e//==\u0026gt; prints `19`\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eうそうそシンタックスですが大丈夫ですか?\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eFoo\u003c/code\u003eという名前の\u003ccode\u003eint -\u0026gt; int\u003c/code\u003eというシグネチャを持つエフェクトを定義します｡JSは型がないので雰囲気出ないですが､一般にエフェクトは名前とシグネチャ(型)を持ちます｡\u003c/p\u003e\n\n\u003cp\u003eエフェクトの発生は\u003ccode\u003eperform エフェクト(引数...)\u003c/code\u003eというシンタックスです｡エフェクトの引数の型は､シグネチャの矢印\u003ccode\u003e-\u0026gt;\u003c/code\u003eの左辺に対応します｡ここでは\u003ccode\u003eint\u003c/code\u003eの引数に\u003ccode\u003e3\u003c/code\u003eを渡してるので､確かに型は一致します｡\u003c/p\u003e\n\n\u003cp\u003eハンドラは\u003ccode\u003ehandle(exp){ case エフェクト(仮引数), 継続: {...}... }\u003c/code\u003eという感じ｡\u003ccode\u003eexp\u003c/code\u003e内で発生したエフェクトをハンドルします｡\u003cbr\u003e\n例では\u003ccode\u003eFoo\u003c/code\u003eエフェクトが発生したので､\u003ccode\u003ecase Foo(x), k: ...\u003c/code\u003eという部分でキャッチされます｡\u003ccode\u003ex\u003c/code\u003eに\u003ccode\u003e3\u003c/code\u003eが渡されそうですが､\u003ccode\u003ek\u003c/code\u003eとは一体…?\u003cbr\u003e\nここがalgebraic effectsのミソで､\u003ccode\u003ek\u003c/code\u003eには\u003cstrong\u003e\u003cem\u003e継続\u003c/em\u003e\u003c/strong\u003eが渡されます｡出､出〜www継続奴という感じですがJSerの皆さんにはおなじみのはずです｡継続とは\&quot;\u003cem\u003e残りの計算\u003c/em\u003e \&quot;であり､Promiseで\u003ccode\u003ethen\u003c/code\u003eに渡してる関数はまさに継続といって差し支えありません｡具体的に\u003ccode\u003ek\u003c/code\u003eに入るものは､この場合\u003ccode\u003e(h) =\u0026gt; console.log(h + 10)\u003c/code\u003eとなります｡なるほど確かに残りの計算だ｡\u003cbr\u003e\nしたがって､このハンドラによって\u003ccode\u003econsole.log(perform Foo(3) + 10)\u003c/code\u003eは\u003ccode\u003econsole.log(3 * 3 + 10)\u003c/code\u003eとなります｡\u003cbr\u003e\n限定継続が分かる方は､この\u003ccode\u003ehandle(exp){...}\u003c/code\u003eが継続のdelimiterといえばイメージが湧くかと思います｡限定継続に関して一筆したためているので､詳細は\u003ca href=\&quot;https://nymphium.github.io/2018/07/19/delimited-continuation%E3%81%AE%E5%A4%8F.html\&quot; rel=\&quot;nofollow noopener\&quot; target=\&quot;_blank\&quot;\u003eこちら\u003c/a\u003eをご覧ください｡\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ecase x: x;\u003c/code\u003eは何やねんということですが､これはvalue handlerと呼ばれる部分です｡今回は\u003ccode\u003econsole.log\u003c/code\u003eの戻り値が\u003ccode\u003evoid\u003c/code\u003eなので雰囲気出ませんが､\u003ccode\u003eexp\u003c/code\u003e部分が値になるまで評価されきったあとに､その値をハンドルする部分です｡value handlerはエフェクトのハンドル部分と異なり継続を取りません｡\u003c/p\u003e\n\n\u003cp\u003eかなり雰囲気はつかめたんじゃないでしょうか｡\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\&quot;特徴\&quot; class=\&quot;fragment\&quot;\u003e\u003c/span\u003e\u003ca href=\&quot;#%E7%89%B9%E5%BE%B4\&quot;\u003e\u003ci class=\&quot;fa fa-link\&quot;\u003e\u003c/i\u003e\u003c/a\u003e特徴\u003c/h1\u003e\n\n\u003cp\u003ealgebraic effectsの特徴としては､\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eエフェクトの抽象化, 実装の分離\u003c/li\u003e\n\u003cli\u003eコントロール操作\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eが挙げられる｡\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\&quot;エフェクトの抽象化実装の分離\&quot; class=\&quot;fragment\&quot;\u003e\u003c/span\u003e\u003ca href=\&quot;#%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E6%8A%BD%E8%B1%A1%E5%8C%96%E5%AE%9F%E8%A3%85%E3%81%AE%E5%88%86%E9%9B%A2\&quot;\u003e\u003ci class=\&quot;fa fa-link\&quot;\u003e\u003c/i\u003e\u003c/a\u003eエフェクトの抽象化､実装の分離\u003c/h2\u003e\n\n\u003cp\u003eエフェクトの抽象化はまさにalgebraic effectsのやりたいことである｡エフェクトの抽象化は即ちインタフェースと実装を分離することになる｡\u003c/p\u003e\n\n\u003cdiv class=\&quot;code-frame\&quot; data-lang=\&quot;js\&quot;\u003e\u003cdiv class=\&quot;highlight\&quot;\u003e\u003cpre\u003e\u003cspan class=\&quot;nx\&quot;\u003eeffect\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eWrite\u003c/span\u003e \u003cspan class=\&quot;cm\&quot;\u003e/* : string -\u0026gt; void */\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e;\u003c/span\u003e\n\n\u003cspan class=\&quot;c1\&quot;\u003e// 標準出力に書き込む\u003c/span\u003e\n\u003cspan class=\&quot;kd\&quot;\u003econst\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eprint_handler\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e)\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003ehandle\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e()){\u003c/span\u003e\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e;\u003c/span\u003e\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eWrite\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003estr\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e),\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n            \u003cspan class=\&quot;nx\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003econsole\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e.\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003elog\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003estr\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e));\u003c/span\u003e\n        \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n    \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\n\u003cspan class=\&quot;c1\&quot;\u003e// ファイルに書き込む\u003c/span\u003e\n\u003cspan class=\&quot;kd\&quot;\u003econst\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ewrite_file_handler\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003efile\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e,\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e)\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003ehandle\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e()){\u003c/span\u003e\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e;\u003c/span\u003e\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eWrite\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003estr\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e),\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n            \u003cspan class=\&quot;nx\&quot;\u003efs\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e.\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003ewriteFile\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003efile\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e,\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003estr\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e,\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e);\u003c/span\u003e\n        \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n    \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\n\n\u003cspan class=\&quot;nx\&quot;\u003eprint_handler\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(()\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003eperform\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eWrite\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;s2\&quot;\u003e\&quot;Hello\&quot;\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e);\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003eperform\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eWrite\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;s2\&quot;\u003e\&quot;World\&quot;\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e);\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e});\u003c/span\u003e\n\u003cspan class=\&quot;c1\&quot;\u003e// ==\u0026gt; prints `Hello\\nWorld`\u003c/span\u003e\n\n\u003cspan class=\&quot;nx\&quot;\u003ewrite_file_handler\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;s2\&quot;\u003e\&quot;hoge.txt\&quot;\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e,\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e()\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003eperform\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eWrite\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;s2\&quot;\u003e\&quot;Hello\&quot;\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e);\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003eperform\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eWrite\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;s2\&quot;\u003e\&quot;World\&quot;\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e);\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e});\u003c/span\u003e\n\u003cspan class=\&quot;c1\&quot;\u003e// ==\u0026gt; write \&quot;Hello\&quot; and \&quot;World\&quot; to hoge.txt\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eなるほどね｡\u003c/p\u003e\n\n\u003cp\u003eハンドラの変更がそのまま実装の差し替えになる｡例えばDI注入にも使えるのではないだろうか｡\u003cbr\u003e\n例えばなにかの顧客DBを取ってくるエフェクト\u003ccode\u003eGetAccountList\u003c/code\u003eを考えてみる｡\u003ccode\u003efilter\u003c/code\u003eは述語\u003ccode\u003ep\u003c/code\u003eを取ってDBをフィルタする関数であり､内部で\u003ccode\u003eGetAccountList\u003c/code\u003eエフェクトを発生している｡\u003c/p\u003e\n\n\u003cdiv class=\&quot;code-frame\&quot; data-lang=\&quot;js\&quot;\u003e\u003cdiv class=\&quot;highlight\&quot;\u003e\u003cpre\u003e\u003cspan class=\&quot;nx\&quot;\u003eeffect\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eGetAccountList\u003c/span\u003e \u003cspan class=\&quot;cm\&quot;\u003e/* : void -\u0026gt; DB */\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e;\u003c/span\u003e\n\n\u003cspan class=\&quot;kd\&quot;\u003econst\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003efilter\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003ep\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e)\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n    \u003cspan class=\&quot;kd\&quot;\u003econst\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003elist\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eperform\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eGetAccountList\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e();\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003elist\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e.\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003efilter\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003ep\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e);\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e例えばテスト用DBのためのハンドラは\u003c/p\u003e\n\n\u003cdiv class=\&quot;code-frame\&quot; data-lang=\&quot;js\&quot;\u003e\u003cdiv class=\&quot;highlight\&quot;\u003e\u003cpre\u003e\u003cspan class=\&quot;kd\&quot;\u003econst\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003etest_handler\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e)\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003ehandle\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e()){\u003c/span\u003e\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e;\u003c/span\u003e\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eGetAccountList\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(),\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n            \u003cspan class=\&quot;nx\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003edb_for_test\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e());\u003c/span\u003e\n        \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n    \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eまた本番のDBを返すハンドラは\u003c/p\u003e\n\n\u003cdiv class=\&quot;code-frame\&quot; data-lang=\&quot;js\&quot;\u003e\u003cdiv class=\&quot;highlight\&quot;\u003e\u003cpre\u003e\u003cspan class=\&quot;kd\&quot;\u003econst\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eproduction_handler\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e)\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003ehandle\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e()){\u003c/span\u003e\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e;\u003c/span\u003e\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eGetAccountList\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(),\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n            \u003cspan class=\&quot;nx\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003edb_for_production\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e());\u003c/span\u003e\n        \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n    \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eあとは実際に\u003ccode\u003efilter\u003c/code\u003e関数を使うシチュエーションごとにハンドラを変えればいい｡\u003c/p\u003e\n\n\u003cdiv class=\&quot;code-frame\&quot; data-lang=\&quot;js\&quot;\u003e\u003cdiv class=\&quot;highlight\&quot;\u003e\u003cpre\u003e\u003cspan class=\&quot;kd\&quot;\u003econst\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003etest_main\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e()\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n    \u003cspan class=\&quot;p\&quot;\u003e......\u003c/span\u003e\n    \u003cspan class=\&quot;kd\&quot;\u003econst\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003efiltered_accounts\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003efilter\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003ep\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e);\u003c/span\u003e\n    \u003cspan class=\&quot;p\&quot;\u003e......\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\n\u003cspan class=\&quot;nx\&quot;\u003eassert\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003etest_handler\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003etest_main\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\&quot;ハンドラの合成\&quot; class=\&quot;fragment\&quot;\u003e\u003c/span\u003e\u003ca href=\&quot;#%E3%83%8F%E3%83%B3%E3%83%89%E3%83%A9%E3%81%AE%E5%90%88%E6%88%90\&quot;\u003e\u003ci class=\&quot;fa fa-link\&quot;\u003e\u003c/i\u003e\u003c/a\u003eハンドラの合成\u003c/h2\u003e\n\n\u003cp\u003eエフェクトハンドラは例外ハンドラと同様に､unhandledなエフェクトはより上位のハンドラに捕捉されます(あるいはされずにランタイムエラー)｡この性質を利用することでハンドラを合成することができます｡\u003cbr\u003e\n先程の\u003ccode\u003eWrite\u003c/code\u003eを引っ張ってみます｡\u003c/p\u003e\n\n\u003cdiv class=\&quot;code-frame\&quot; data-lang=\&quot;js\&quot;\u003e\u003cdiv class=\&quot;highlight\&quot;\u003e\u003cpre\u003e\u003cspan class=\&quot;nx\&quot;\u003eeffect\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eWrite\u003c/span\u003e \u003cspan class=\&quot;cm\&quot;\u003e/* : string -\u0026gt; void */\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e;\u003c/span\u003e\n\n\u003cspan class=\&quot;c1\&quot;\u003e// 標準出力に書き込む\u003c/span\u003e\n\u003cspan class=\&quot;kd\&quot;\u003econst\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eprint_handler\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e)\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003ehandle\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e()){\u003c/span\u003e\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e;\u003c/span\u003e\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eWrite\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003estr\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e),\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n            \u003cspan class=\&quot;nx\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003econsole\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e.\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003elog\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003estr\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e));\u003c/span\u003e\n        \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n    \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\n\u003cspan class=\&quot;c1\&quot;\u003e// ファイルに書き込む\u003c/span\u003e\n\u003cspan class=\&quot;kd\&quot;\u003econst\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ewrite_file_handler\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003efile\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e,\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e)\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003ehandle\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e()){\u003c/span\u003e\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e;\u003c/span\u003e\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eWrite\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003estr\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e),\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n            \u003cspan class=\&quot;nx\&quot;\u003efs\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e.\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003ewriteFile\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003efile\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e,\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003estr\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e,\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e);\u003c/span\u003e\n        \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n    \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003eWrite\u003c/code\u003eがあるなら\u003ccode\u003eRead\u003c/code\u003eもしたいのが人間の性です｡\u003c/p\u003e\n\n\u003cdiv class=\&quot;code-frame\&quot; data-lang=\&quot;js\&quot;\u003e\u003cdiv class=\&quot;highlight\&quot;\u003e\u003cpre\u003e\u003cspan class=\&quot;nx\&quot;\u003eeffect\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eRead\u003c/span\u003e \u003cspan class=\&quot;cm\&quot;\u003e/* : void -\u0026gt; string */\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eそしてやるだけ｡\u003c/p\u003e\n\n\u003cdiv class=\&quot;code-frame\&quot; data-lang=\&quot;js\&quot;\u003e\u003cdiv class=\&quot;highlight\&quot;\u003e\u003cpre\u003e\u003cspan class=\&quot;kd\&quot;\u003econst\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003escan_handler\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e)\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003ehandle\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e()){\u003c/span\u003e\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e;\u003c/span\u003e\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eRead\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(),\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n            \u003cspan class=\&quot;nx\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003ereadline\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e())\u003c/span\u003e\n        \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n    \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\n\u003cspan class=\&quot;kd\&quot;\u003econst\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003escan_file_handler\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003efile\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e,\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e)\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003ehandle\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e()){\u003c/span\u003e\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e;\u003c/span\u003e\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eRead\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(),\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n            \u003cspan class=\&quot;nx\&quot;\u003ereadFileAsync\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003efile\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e,\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e);\u003c/span\u003e\n        \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n    \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e標準入出力とファイルの入出力をごっちゃにするシーンはあまり多くないので1つのハンドラにしたいと思います｡せっかくハンドラをそれぞれ書いたのでこれを使ってみます｡\u003c/p\u003e\n\n\u003cdiv class=\&quot;code-frame\&quot; data-lang=\&quot;js\&quot;\u003e\u003cdiv class=\&quot;highlight\&quot;\u003e\u003cpre\u003e\u003cspan class=\&quot;kd\&quot;\u003econst\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003estdio_handler\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e)\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003eprint_handler\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(()\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003escan_handler\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e));\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\n\u003cspan class=\&quot;kd\&quot;\u003econst\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003efileio_handler\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003efile\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e,\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e)\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003ewrite_file_handler\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003efile\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e,\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e()\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003escan_file_handler\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003efile\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e,\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e));\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eオッええやん｡\u003ccode\u003estdio_handler\u003c/code\u003eの受け取るサンクの中で\u003ccode\u003eWrite\u003c/code\u003eが発生した場合､\u003ccode\u003escan_handler\u003c/code\u003eを突き抜けて\u003ccode\u003eprint_handler\u003c/code\u003eによりハンドルされます｡これが合成だ､花京院｡\u003cbr\u003e\nもちろんいちどきに一つのハンドラも実装できます｡\u003c/p\u003e\n\n\u003cdiv class=\&quot;code-frame\&quot; data-lang=\&quot;js\&quot;\u003e\u003cdiv class=\&quot;highlight\&quot;\u003e\u003cpre\u003e\u003cspan class=\&quot;kd\&quot;\u003econst\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003estdio\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e)\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003ehandle\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003eth\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e()){\u003c/span\u003e\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e;\u003c/span\u003e\n\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eWrite\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003estr\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e),\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n            \u003cspan class=\&quot;nx\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003econsole\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e.\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003elog\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003estr\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e));\u003c/span\u003e\n        \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\n        \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eRead\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(),\u003c/span\u003e \u003cspan class=\&quot;na\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n            \u003cspan class=\&quot;nx\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003ereadline\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e())\u003c/span\u003e\n        \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n    \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\n\u003cspan class=\&quot;c1\&quot;\u003e// fileも同様に(略)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eまた､同じエフェクトのハンドラをネストすることで､\u003cem\u003e部分的に実装を変える\u003c/em\u003eことができる｡\u003c/p\u003e\n\n\u003cdiv class=\&quot;code-frame\&quot; data-lang=\&quot;js\&quot;\u003e\u003cdiv class=\&quot;highlight\&quot;\u003e\u003cpre\u003e\u003cspan class=\&quot;nx\&quot;\u003efileio_handler\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003efile\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e,\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e()\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003eperform\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eWrite\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;s2\&quot;\u003e\&quot;hoge\&quot;\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e);\u003c/span\u003e  \u003cspan class=\&quot;c1\&quot;\u003e// fileに\&quot;hoge\&quot;を書き込む\u003c/span\u003e\n    \u003cspan class=\&quot;kd\&quot;\u003elet\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003estr\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eperform\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eRead\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e();\u003c/span\u003e  \u003cspan class=\&quot;c1\&quot;\u003e// fileから読む\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003eprint_handler\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(()\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eperform\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eWrite\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003estr\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e));\u003c/span\u003e  \u003cspan class=\&quot;c1\&quot;\u003e// *標準出力に*書き込む\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e})\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e同じ\u003ccode\u003eWrite\u003c/code\u003eを\u003ccode\u003efileio_handler\u003c/code\u003e内で発生させているが､2つ目の\u003ccode\u003eWrite\u003c/code\u003eはさらに\u003ccode\u003eprint_handler\u003c/code\u003eに包んで発生させている｡このエフェクトの発生を最初に捕捉するハンドラは\u003ccode\u003eprint_handler\u003c/code\u003eになるため､\u003ccode\u003estr\u003c/code\u003eはファイルではなく標準出力に書き込まれる｡\u003c/p\u003e\n\n\u003cp\u003eちなみに､サンク1行目の\u003ccode\u003eWrite\u003c/code\u003eがハンドラによって捕捉されるので､2行目以降はハンドラ内の継続として実行されます｡2行目の\u003ccode\u003eRead\u003c/code\u003eもしっかり\u003ccode\u003efileio_handler\u003c/code\u003eにより捕捉されるが､これはつまり継続も\u003ccode\u003efileio_handler\u003c/code\u003eによりハンドルされていることになる｡このように継続も追随してハンドルしてくれるハンドラをdeep handler､明示的に継続をハンドルしないといけないハンドラはshallow handlerと呼ばれる｡deep handlerのほうが一般的だが､shallow handlerのほうが動作が軽量(のはず)である｡\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\&quot;コントロール操作\&quot; class=\&quot;fragment\&quot;\u003e\u003c/span\u003e\u003ca href=\&quot;#%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%AB%E6%93%8D%E4%BD%9C\&quot;\u003e\u003ci class=\&quot;fa fa-link\&quot;\u003e\u003c/i\u003e\u003c/a\u003eコントロール操作\u003c/h2\u003e\n\n\u003cp\u003e継続を取ってこれるのが例外処理と決定的に異なる｡このおかげで例外の発生から復帰することができる\u003csup id=\&quot;fnref2\&quot;\u003e\u003ca href=\&quot;#fn2\&quot; rel=\&quot;footnote\&quot; title=&#39;Dolan, Stephen, et al. \&quot;Concurrent system programming with effect handlers.\&quot; International Symposium on Trends in Functional Programming. Springer, Cham, 2017.&#39;\u003e2\u003c/a\u003e\u003c/sup\u003e｡\u003cbr\u003e\nまた継続はハンドラ側でよしなにしてくれるので､記述自体は直接形式で記述できる｡このためcallback hellが解消される｡例えば\u003ccode\u003escan_file_handler\u003c/code\u003e関数はまさにコールバックを取る関数をラップすることで直接形式にしている｡\u003c/p\u003e\n\n\u003cp\u003e簡単のため､ファイル名と文字列を受け取るエフェクト\u003ccode\u003eWriteToFile\u003c/code\u003eを定義して様子を見る｡\u003c/p\u003e\n\n\u003cdiv class=\&quot;code-frame\&quot; data-lang=\&quot;js\&quot;\u003e\u003cdiv class=\&quot;highlight\&quot;\u003e\u003cpre\u003e\u003cspan class=\&quot;nx\&quot;\u003eeffect\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eWriteToFile\u003c/span\u003e \u003cspan class=\&quot;cm\&quot;\u003e/* : (string, string) -\u0026gt; void */\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e;\u003c/span\u003e\n\n\u003cspan class=\&quot;nx\&quot;\u003ehandle\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e((()\u003c/span\u003e \u003cspan class=\&quot;o\&quot;\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n    \u003cspan class=\&quot;p\&quot;\u003e......\u003c/span\u003e\n    \u003cspan class=\&quot;nx\&quot;\u003eperform\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eWriteToFile\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003efile\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e,\u003c/span\u003e \u003cspan class=\&quot;s2\&quot;\u003e\&quot;hogehoge\&quot;\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e);\u003c/span\u003e\n    \u003cspan class=\&quot;p\&quot;\u003e......\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e})()){\u003c/span\u003e\n    \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ex\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e;\u003c/span\u003e\n    \u003cspan class=\&quot;k\&quot;\u003ecase\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003eWriteToFile\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003efile\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e,\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003estr\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e),\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e:\u003c/span\u003e \u003cspan class=\&quot;p\&quot;\u003e{\u003c/span\u003e\n        \u003cspan class=\&quot;nx\&quot;\u003ewriteFile\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e(\u003c/span\u003e\u003cspan class=\&quot;nx\&quot;\u003efile\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e,\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003estr\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e,\u003c/span\u003e \u003cspan class=\&quot;nx\&quot;\u003ek\u003c/span\u003e\u003cspan class=\&quot;p\&quot;\u003e);\u003c/span\u003e\n    \u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\u003cspan class=\&quot;p\&quot;\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eなるほど確かに､ファイルに書き込んで残りの処理はコールバックにやらせる\u003ccode\u003ewriteFile\u003c/code\u003eをラップして､見かけ上は直接形式で記述することに成功している｡\u003c/p\u003e\n\n\u003cp\u003e継続が取ってこれるので､\u003csup id=\&quot;fnref2\&quot;\u003e\u003ca href=\&quot;#fn2\&quot; rel=\&quot;footnote\&quot; title=&#39;Dolan, Stephen, et al. \&quot;Concurrent system programming with effect handlers.\&quot; International Symposium on Trends in Functional Programming. Springer, Cham, 2017.&#39;\u003e2\u003c/a\u003e\u003c/sup\u003eにあるように､\u003cstrong\u003e\u003cem\u003easync/awaitをalgebraic effectsで実装することができる\u003c/em\u003e\u003c/strong\u003e!!\u003cbr\u003e\nこれはコントロールオペレータのヒエラルキーとしてalgebraic effectsがasync/awaitと等価､またはそれ以上の表現力であることを示唆しています｡\u003cbr\u003e\n実際algebraic effectsはあるがasync/awaitのない言語ではうれしい…のかもしれません｡\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\&quot;algebraic-effectsのある言語や実装\&quot; class=\&quot;fragment\&quot;\u003e\u003c/span\u003e\u003ca href=\&quot;#algebraic-effects%E3%81%AE%E3%81%82%E3%82%8B%E8%A8%80%E8%AA%9E%E3%82%84%E5%AE%9F%E8%A3%85\&quot;\u003e\u003ci class=\&quot;fa fa-link\&quot;\u003e\u003c/i\u003e\u003c/a\u003eAlgebraic Effectsのある言語や実装\u003c/h1\u003e\n\n\u003cp\u003ealgebraic effectsにはいくつか実装が存在する｡たとえば言語機能にalgebraic effectsを組み込んだ言語､あるいはライブラリ｡フレームワークを自称しつつ実際は言語を拡張しているReactなど｡\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eEff\u003c/p\u003e\n\n\u003cp\u003ealgebraic effectsの計算モデルとしてよく使われる言語｡MLスタイルのシンタックスでHindley-Milner型推論がある｡\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\&quot;https://github.com/matijapretnar/eff\&quot; rel=\&quot;nofollow noopener\&quot; target=\&quot;_blank\&quot;\u003ematijapretnar/eff\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eOCaml製Effインタプリタ｡エフェクトが単相なのが惜しい以外はopamで簡単に導入できてシンタックスもOCamlに毛が生えた感じで様々な面でコストが低い｡\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\&quot;https://github.com/atnos-org/eff\&quot; rel=\&quot;nofollow noopener\&quot; target=\&quot;_blank\&quot;\u003eatnos-org/eff\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eScalaのDSL実装\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e『Eff Directly in OCaml』\u003csup id=\&quot;fnref3\&quot;\u003e\u003ca href=\&quot;#fn3\&quot; rel=\&quot;footnote\&quot; title=&#39;Oleg Kiselyov, K. C. Sivaramakrishnan. \&quot;Eff directly in OCaml.\&quot; ML Workshop. 2016.&#39;\u003e3\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\n\u003cp\u003eOCaml+delimccライブラリによるEffの実装｡shift/resetとalgebraic effectsの関係が分かる｡\u003cbr\u003e\nこの論文を元に､\u003ca href=\&quot;https://gist.github.com/Nymphium/60d4e2b5888f3e04b9b98c562854f143\&quot; rel=\&quot;nofollow noopener\&quot; target=\&quot;_blank\&quot;\u003eRacketによる実装\u003c/a\u003eをおこなってみた｡\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eKoka\u003csup id=\&quot;fnref4\&quot;\u003e\u003ca href=\&quot;#fn4\&quot; rel=\&quot;footnote\&quot; title=&#39;Leijen, Daan. \&quot;Algebraic Effects for Functional Programming. Technical Report.\&quot; 15 pages. https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming, 2016.&#39;\u003e4\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\n\u003cp\u003eMicrosoft Researchが作っている言語｡エフェクトの型が明示されておりモナドみがある｡\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\&quot;https://github.com/koka-lang/koka\&quot; rel=\&quot;nofollow noopener\&quot; target=\&quot;_blank\&quot;\u003ekoka-lang/koka\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eHaskell製｡ランタイムにJSまたはC#にコンパイルされて実行される｡\u003cbr\u003e\nstackによるビルドをできるようにしたのでぜひ使ってください｡\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMulticore OCaml\u003c/p\u003e\n\n\u003cp\u003eOCamlにalgebraic effectsをぶっこんだOCaml方言｡継続がワンショットなことが特徴となっている｡\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\&quot;https://github.com/ocamllabs/ocaml-multicore\&quot; rel=\&quot;nofollow noopener\&quot; target=\&quot;_blank\&quot;\u003eocamllabs/ocaml-multicore\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eOCaml labsが\u003ca href=\&quot;https://github.com/ocaml/ocaml\&quot; rel=\&quot;nofollow noopener\&quot; target=\&quot;_blank\&quot;\u003eocaml/ocaml\u003c/a\u003eからフォークしているOCaml方言｡\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e他にもC言語による実装\u003csup id=\&quot;fnref5\&quot;\u003e\u003ca href=\&quot;#fn5\&quot; rel=\&quot;footnote\&quot; title=&#39;Leijen, Daan. \&quot;Implementing Algebraic Effects in C.\&quot; Asian Symposium on Programming Languages and Systems. Springer, Cham, 2017.&#39;\u003e5\u003c/a\u003e\u003c/sup\u003eなどがあり､確かにコールスタックなどをバコッといければなんとかなりそう｡\u003c/p\u003e\n\n\n\n\u003cdiv class=\&quot;footnotes\&quot;\u003e\n\u003chr\u003e\n\u003col\u003e\n\n\u003cli id=\&quot;fn1\&quot;\u003e\n\u003cp\u003ePretnar, Matija. \&quot;An introduction to algebraic effects and handlers. invited tutorial paper.\&quot; Electronic Notes in Theoretical Computer Science 319 (2015): 19-35. \u003ca href=\&quot;#fnref1\&quot;\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003cli id=\&quot;fn2\&quot;\u003e\n\u003cp\u003eDolan, Stephen, et al. \&quot;Concurrent system programming with effect handlers.\&quot; International Symposium on Trends in Functional Programming. Springer, Cham, 2017. \u003ca href=\&quot;#fnref2\&quot;\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003cli id=\&quot;fn3\&quot;\u003e\n\u003cp\u003eOleg Kiselyov, K. C. Sivaramakrishnan. \&quot;Eff directly in OCaml.\&quot; ML Workshop. 2016. \u003ca href=\&quot;#fnref3\&quot;\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003cli id=\&quot;fn4\&quot;\u003e\n\u003cp\u003eLeijen, Daan. \&quot;Algebraic Effects for Functional Programming. Technical Report.\&quot; 15 pages. \u003ca href=\&quot;https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming\&quot; class=\&quot;autolink\&quot; rel=\&quot;nofollow noopener\&quot; target=\&quot;_blank\&quot;\u003ehttps://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming\u003c/a\u003e, 2016. \u003ca href=\&quot;#fnref4\&quot;\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003cli id=\&quot;fn5\&quot;\u003e\n\u003cp\u003eLeijen, Daan. \&quot;Implementing Algebraic Effects in C.\&quot; Asian Symposium on Programming Languages and Systems. Springer, Cham, 2017. \u003ca href=\&quot;#fnref5\&quot;\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003c/ol\u003e\n\u003c/div\u003e\n&quot;,&quot;createdAt&quot;:&quot;2018-10-30T13:48:01Z&quot;,&quot;elapsedYearsFromUpdatedAt&quot;:0,&quot;isDeprecated&quot;:false,&quot;isDestroyableByViewer&quot;:false,&quot;isEditRequestSendableByViewer&quot;:true,&quot;isLikableByViewer&quot;:true,&quot;isLikedByViewer&quot;:false,&quot;isPublic&quot;:true,&quot;isSlide&quot;:false,&quot;isStockableByViewer&quot;:true,&quot;isStockedByViewer&quot;:false,&quot;isUpdatableByViewer&quot;:false,&quot;isUpdated&quot;:true,&quot;likesCount&quot;:133,&quot;originalId&quot;:715525,&quot;title&quot;:&quot;Algebraic Effectsとは? 出身は? 使い方は? その特徴とは? 調べてみました!&quot;,&quot;toc&quot;:&quot;\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\&quot;#%E3%82%A4%E3%83%B3%E3%83%88%E3%83%AD\&quot;\u003eイントロ\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\&quot;#%E7%89%B9%E5%BE%B4\&quot;\u003e特徴\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\&quot;#%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E6%8A%BD%E8%B1%A1%E5%8C%96%E5%AE%9F%E8%A3%85%E3%81%AE%E5%88%86%E9%9B%A2\&quot;\u003eエフェクトの抽象化､実装の分離\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\&quot;#%E3%83%8F%E3%83%B3%E3%83%89%E3%83%A9%E3%81%AE%E5%90%88%E6%88%90\&quot;\u003eハンドラの合成\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\&quot;#%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%AB%E6%93%8D%E4%BD%9C\&quot;\u003eコントロール操作\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\&quot;#algebraic-effects%E3%81%AE%E3%81%82%E3%82%8B%E8%A8%80%E8%AA%9E%E3%82%84%E5%AE%9F%E8%A3%85\&quot;\u003eAlgebraic Effectsのある言語や実装\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n&quot;,&quot;totalPv&quot;:8595,&quot;updatedAt&quot;:&quot;2018-10-30T17:07:47Z&quot;,&quot;uuid&quot;:&quot;e6ce580da8b87ded912b&quot;,&quot;adventCalendarItem&quot;:null,&quot;author&quot;:{&quot;description&quot;:&quot;Lagnuage implementation, OCaml, Lua, LaTeX, Neovim, Zsh, Linux, etc...&quot;,&quot;name&quot;:&quot;Satoru Kawahara&quot;,&quot;profileImageUrl&quot;:&quot;https://qiita-image-store.s3.amazonaws.com/0/57887/profile-images/1473694470&quot;,&quot;urlName&quot;:&quot;Nymphium&quot;,&quot;isFollowedByViewer&quot;:false,&quot;isFollowableByViewer&quot;:true,&quot;websiteUrl&quot;:&quot;https://nymphium.github.io&quot;,&quot;organizations&quot;:{&quot;edges&quot;:[]}},&quot;tags&quot;:[{&quot;name&quot;:&quot;JavaScript&quot;,&quot;urlName&quot;:&quot;javascript&quot;},{&quot;name&quot;:&quot;algebra&quot;,&quot;urlName&quot;:&quot;algebra&quot;}],&quot;followingLikers&quot;:{&quot;edges&quot;:[]},&quot;comments&quot;:{&quot;totalCount&quot;:3}},&quot;viewer&quot;:null,&quot;analyticsTrackingId&quot;:null,&quot;y1test&quot;:false}"><article itemscope="itemscope" itemtype="http://schema.org/Article" class="p-items"><div class="p-items_wrapper"><div class="p-items_container"><div class="p-items_stickyMenu it-Actions"><div class="it-Actions_item it-Actions_item-like likable"><a class="it-Actions_likeCount" href="/Nymphium/items/e6ce580da8b87ded912b/likers">133</a><button><i class="fa fa-fw fa-thumbs-up"></i></button></div><div class="it-Actions_item it-Actions_item-stock"><button><i class="fa fa-folder-open"></i></button></div><div class="it-Actions_jumpToCommentButton"><div class="it-Actions_commentCount"></div><div class="fa fa-fw fa-comment"></div></div><div class="it-Actions_shareButton it-Actions_shareButton-twitter"><span class="fa fa-twitter"></span></div><div class="it-Actions_shareButton it-Actions_shareButton-facebook"><span class="fa fa-facebook"></span></div></div><div class="p-items_main"><div class="p-items_article"><div class="it-Header"><div class="u-flex-center-between mb-3"><div class="it-Header_info"><div class="it-Header_author"><a href="/Nymphium"><img class="it-Header_authorImage" src="https://qiita-image-store.s3.amazonaws.com/0/57887/profile-images/1473694470" /></a><a class="it-Header_authorName" href="/Nymphium">@Nymphium</a> </div><div class="it-Header_time"></div><div class="it-Header_meta"><div class="it-Header_manipulate"><div class="dropdown"><span class="dropdown-toggle" tabindex="0"><span class="fa fa-ellipsis-h fa-lg"></span></span></div></div></div></div></div><h1 class="it-Header_title" itemprop="headline">Algebraic Effectsとは? 出身は? 使い方は? その特徴とは? 調べてみました!</h1><div class="it-Tags"><a class="it-Tags_item" href="/tags/%23%3CQiita::Graph::Result:0x00557c6321c2f0%3E"><span>JavaScript</span></a><a class="it-Tags_item" href="/tags/%23%3CQiita::Graph::Result:0x00557c6321c2a0%3E"><span>algebra</span></a></div></div><div class="it-ActionsMobile"><div class="it-ActionsMobile_like likable"><button><span class="fa fa-fw fa-thumbs-up" /><span>133</span></button></div><div class="it-ActionsMobile_stock"><button><div class="fa fa-folder-open"></div></button></div></div><section class="it-MdContent" itemprop="articleBody"><div id="item-e6ce580da8b87ded912b"><p>ReactのHooksが実質algebraic effectsなんじゃないかということでalgebraic effectsに関する怪文書が流布して鼻白んでしまう､そんな未来を阻止するため､曲がりなりにもalgebraic effectsを研究している者としてalgebraic effectsについて書こうと思います｡</p>

<p>当方React全く知らないしJSにも明るくない侍ですが､プログラム片にはJSっぽいシンタックスを使っていこうと思います｡</p>

<h1>
<span id="イントロ" class="fragment"></span><a href="#%E3%82%A4%E3%83%B3%E3%83%88%E3%83%AD"><i class="fa fa-link"></i></a>イントロ</h1>

<p>Algebraic Effectsとは､Plotkinらによって提唱された､computational effectsを代数的に扱おうという試みである｡それにeffect handlerが後付けされ､現在はalgebraic effects <em>and handlers</em> を略してalgebraic effectsと呼んでいることが多い｡非常に直感的な説明としては､<em>継続を取ってこれる例外</em>である｡<br>
チュートリアルとしては､こちらの論文<sup id="fnref1"><a href="#fn1" rel="footnote" title='Pretnar, Matija. "An introduction to algebraic effects and handlers. invited tutorial paper." Electronic Notes in Theoretical Computer Science 319 (2015): 19-35.'>1</a></sup>の内容に尽きるわけですが……｡</p>

<p>algebraic effectsは､エフェクトの定義､発生､そしてハンドラに分かれる｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="c1">// effect invocation</span>
<span class="nx">effect</span> <span class="nx">Foo</span> <span class="cm">/* : int -&gt; int */</span><span class="p">;</span>

<span class="c1">// handler</span>
<span class="nx">handle</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">perform</span><span class="cm">/* invocation */</span> <span class="nx">Foo</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="mi">10</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nx">x</span><span class="p">:</span> <span class="p">{</span>
       <span class="nx">x</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">case</span> <span class="nx">Foo</span><span class="p">(</span><span class="nx">x</span><span class="p">),</span> <span class="nx">k</span><span class="p">:</span> <span class="p">{</span>
        <span class="nx">k</span><span class="p">(</span><span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//==&gt; prints `19`</span>
</pre></div></div>

<p>うそうそシンタックスですが大丈夫ですか?</p>

<p><code>Foo</code>という名前の<code>int -&gt; int</code>というシグネチャを持つエフェクトを定義します｡JSは型がないので雰囲気出ないですが､一般にエフェクトは名前とシグネチャ(型)を持ちます｡</p>

<p>エフェクトの発生は<code>perform エフェクト(引数...)</code>というシンタックスです｡エフェクトの引数の型は､シグネチャの矢印<code>-&gt;</code>の左辺に対応します｡ここでは<code>int</code>の引数に<code>3</code>を渡してるので､確かに型は一致します｡</p>

<p>ハンドラは<code>handle(exp){ case エフェクト(仮引数), 継続: {...}... }</code>という感じ｡<code>exp</code>内で発生したエフェクトをハンドルします｡<br>
例では<code>Foo</code>エフェクトが発生したので､<code>case Foo(x), k: ...</code>という部分でキャッチされます｡<code>x</code>に<code>3</code>が渡されそうですが､<code>k</code>とは一体…?<br>
ここがalgebraic effectsのミソで､<code>k</code>には<strong><em>継続</em></strong>が渡されます｡出､出〜www継続奴という感じですがJSerの皆さんにはおなじみのはずです｡継続とは"<em>残りの計算</em> "であり､Promiseで<code>then</code>に渡してる関数はまさに継続といって差し支えありません｡具体的に<code>k</code>に入るものは､この場合<code>(h) =&gt; console.log(h + 10)</code>となります｡なるほど確かに残りの計算だ｡<br>
したがって､このハンドラによって<code>console.log(perform Foo(3) + 10)</code>は<code>console.log(3 * 3 + 10)</code>となります｡<br>
限定継続が分かる方は､この<code>handle(exp){...}</code>が継続のdelimiterといえばイメージが湧くかと思います｡限定継続に関して一筆したためているので､詳細は<a href="https://nymphium.github.io/2018/07/19/delimited-continuation%E3%81%AE%E5%A4%8F.html" rel="nofollow noopener" target="_blank">こちら</a>をご覧ください｡</p>

<p><code>case x: x;</code>は何やねんということですが､これはvalue handlerと呼ばれる部分です｡今回は<code>console.log</code>の戻り値が<code>void</code>なので雰囲気出ませんが､<code>exp</code>部分が値になるまで評価されきったあとに､その値をハンドルする部分です｡value handlerはエフェクトのハンドル部分と異なり継続を取りません｡</p>

<p>かなり雰囲気はつかめたんじゃないでしょうか｡</p>

<h1>
<span id="特徴" class="fragment"></span><a href="#%E7%89%B9%E5%BE%B4"><i class="fa fa-link"></i></a>特徴</h1>

<p>algebraic effectsの特徴としては､</p>

<ul>
<li>エフェクトの抽象化, 実装の分離</li>
<li>コントロール操作</li>
</ul>

<p>が挙げられる｡</p>

<h2>
<span id="エフェクトの抽象化実装の分離" class="fragment"></span><a href="#%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E6%8A%BD%E8%B1%A1%E5%8C%96%E5%AE%9F%E8%A3%85%E3%81%AE%E5%88%86%E9%9B%A2"><i class="fa fa-link"></i></a>エフェクトの抽象化､実装の分離</h2>

<p>エフェクトの抽象化はまさにalgebraic effectsのやりたいことである｡エフェクトの抽象化は即ちインタフェースと実装を分離することになる｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="nx">effect</span> <span class="nx">Write</span> <span class="cm">/* : string -&gt; void */</span><span class="p">;</span>

<span class="c1">// 標準出力に書き込む</span>
<span class="kd">const</span> <span class="nx">print_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">th</span><span class="p">()){</span>
        <span class="k">case</span> <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">Write</span><span class="p">(</span><span class="nx">str</span><span class="p">),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">k</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ファイルに書き込む</span>
<span class="kd">const</span> <span class="nx">write_file_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">th</span><span class="p">()){</span>
        <span class="k">case</span> <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">Write</span><span class="p">(</span><span class="nx">str</span><span class="p">),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">k</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="nx">print_handler</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">perform</span> <span class="nx">Write</span><span class="p">(</span><span class="s2">"Hello"</span><span class="p">);</span>
    <span class="nx">perform</span> <span class="nx">Write</span><span class="p">(</span><span class="s2">"World"</span><span class="p">);</span>
<span class="p">});</span>
<span class="c1">// ==&gt; prints `Hello\nWorld`</span>

<span class="nx">write_file_handler</span><span class="p">(</span><span class="s2">"hoge.txt"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">perform</span> <span class="nx">Write</span><span class="p">(</span><span class="s2">"Hello"</span><span class="p">);</span>
    <span class="nx">perform</span> <span class="nx">Write</span><span class="p">(</span><span class="s2">"World"</span><span class="p">);</span>
<span class="p">});</span>
<span class="c1">// ==&gt; write "Hello" and "World" to hoge.txt</span>
</pre></div></div>

<p>なるほどね｡</p>

<p>ハンドラの変更がそのまま実装の差し替えになる｡例えばDI注入にも使えるのではないだろうか｡<br>
例えばなにかの顧客DBを取ってくるエフェクト<code>GetAccountList</code>を考えてみる｡<code>filter</code>は述語<code>p</code>を取ってDBをフィルタする関数であり､内部で<code>GetAccountList</code>エフェクトを発生している｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="nx">effect</span> <span class="nx">GetAccountList</span> <span class="cm">/* : void -&gt; DB */</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">filter</span> <span class="o">=</span> <span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">perform</span> <span class="nx">GetAccountList</span><span class="p">();</span>
    <span class="nx">list</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span>
<span class="p">}</span>
</pre></div></div>

<p>例えばテスト用DBのためのハンドラは</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="kd">const</span> <span class="nx">test_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">th</span><span class="p">()){</span>
        <span class="k">case</span> <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">GetAccountList</span><span class="p">(),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">k</span><span class="p">(</span><span class="nx">db_for_test</span><span class="p">());</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div></div>

<p>また本番のDBを返すハンドラは</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="kd">const</span> <span class="nx">production_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">th</span><span class="p">()){</span>
        <span class="k">case</span> <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">GetAccountList</span><span class="p">(),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">k</span><span class="p">(</span><span class="nx">db_for_production</span><span class="p">());</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div></div>

<p>あとは実際に<code>filter</code>関数を使うシチュエーションごとにハンドラを変えればいい｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="kd">const</span> <span class="nx">test_main</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="p">......</span>
    <span class="kd">const</span> <span class="nx">filtered_accounts</span> <span class="o">=</span> <span class="nx">filter</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span>
    <span class="p">......</span>
<span class="p">}</span>

<span class="nx">assert</span><span class="p">(</span><span class="nx">test_handler</span><span class="p">(</span><span class="nx">test_main</span><span class="p">))</span>
</pre></div></div>

<h2>
<span id="ハンドラの合成" class="fragment"></span><a href="#%E3%83%8F%E3%83%B3%E3%83%89%E3%83%A9%E3%81%AE%E5%90%88%E6%88%90"><i class="fa fa-link"></i></a>ハンドラの合成</h2>

<p>エフェクトハンドラは例外ハンドラと同様に､unhandledなエフェクトはより上位のハンドラに捕捉されます(あるいはされずにランタイムエラー)｡この性質を利用することでハンドラを合成することができます｡<br>
先程の<code>Write</code>を引っ張ってみます｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="nx">effect</span> <span class="nx">Write</span> <span class="cm">/* : string -&gt; void */</span><span class="p">;</span>

<span class="c1">// 標準出力に書き込む</span>
<span class="kd">const</span> <span class="nx">print_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">th</span><span class="p">()){</span>
        <span class="k">case</span> <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">Write</span><span class="p">(</span><span class="nx">str</span><span class="p">),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">k</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ファイルに書き込む</span>
<span class="kd">const</span> <span class="nx">write_file_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">th</span><span class="p">()){</span>
        <span class="k">case</span> <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">Write</span><span class="p">(</span><span class="nx">str</span><span class="p">),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">k</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div></div>

<p><code>Write</code>があるなら<code>Read</code>もしたいのが人間の性です｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="nx">effect</span> <span class="nx">Read</span> <span class="cm">/* : void -&gt; string */</span><span class="p">;</span>
</pre></div></div>

<p>そしてやるだけ｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="kd">const</span> <span class="nx">scan_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">th</span><span class="p">()){</span>
        <span class="k">case</span> <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">Read</span><span class="p">(),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">k</span><span class="p">(</span><span class="nx">readline</span><span class="p">())</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">scan_file_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">th</span><span class="p">()){</span>
        <span class="k">case</span> <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">Read</span><span class="p">(),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">readFileAsync</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">k</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div></div>

<p>標準入出力とファイルの入出力をごっちゃにするシーンはあまり多くないので1つのハンドラにしたいと思います｡せっかくハンドラをそれぞれ書いたのでこれを使ってみます｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="kd">const</span> <span class="nx">stdio_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">print_handler</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">scan_handler</span><span class="p">(</span><span class="nx">th</span><span class="p">));</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">fileio_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">write_file_handler</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">scan_file_handler</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">th</span><span class="p">));</span>
<span class="p">}</span>
</pre></div></div>

<p>オッええやん｡<code>stdio_handler</code>の受け取るサンクの中で<code>Write</code>が発生した場合､<code>scan_handler</code>を突き抜けて<code>print_handler</code>によりハンドルされます｡これが合成だ､花京院｡<br>
もちろんいちどきに一つのハンドラも実装できます｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="kd">const</span> <span class="nx">stdio</span> <span class="o">=</span> <span class="p">(</span><span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">th</span><span class="p">()){</span>
        <span class="k">case</span> <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>

        <span class="k">case</span> <span class="nx">Write</span><span class="p">(</span><span class="nx">str</span><span class="p">),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">k</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="k">case</span> <span class="nx">Read</span><span class="p">(),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">k</span><span class="p">(</span><span class="nx">readline</span><span class="p">())</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// fileも同様に(略)</span>
</pre></div></div>

<p>また､同じエフェクトのハンドラをネストすることで､<em>部分的に実装を変える</em>ことができる｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="nx">fileio_handler</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">perform</span> <span class="nx">Write</span><span class="p">(</span><span class="s2">"hoge"</span><span class="p">);</span>  <span class="c1">// fileに"hoge"を書き込む</span>
    <span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">perform</span> <span class="nx">Read</span><span class="p">();</span>  <span class="c1">// fileから読む</span>
    <span class="nx">print_handler</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">perform</span> <span class="nx">Write</span><span class="p">(</span><span class="nx">str</span><span class="p">));</span>  <span class="c1">// *標準出力に*書き込む</span>
<span class="p">})</span>
</pre></div></div>

<p>同じ<code>Write</code>を<code>fileio_handler</code>内で発生させているが､2つ目の<code>Write</code>はさらに<code>print_handler</code>に包んで発生させている｡このエフェクトの発生を最初に捕捉するハンドラは<code>print_handler</code>になるため､<code>str</code>はファイルではなく標準出力に書き込まれる｡</p>

<p>ちなみに､サンク1行目の<code>Write</code>がハンドラによって捕捉されるので､2行目以降はハンドラ内の継続として実行されます｡2行目の<code>Read</code>もしっかり<code>fileio_handler</code>により捕捉されるが､これはつまり継続も<code>fileio_handler</code>によりハンドルされていることになる｡このように継続も追随してハンドルしてくれるハンドラをdeep handler､明示的に継続をハンドルしないといけないハンドラはshallow handlerと呼ばれる｡deep handlerのほうが一般的だが､shallow handlerのほうが動作が軽量(のはず)である｡</p>

<h2>
<span id="コントロール操作" class="fragment"></span><a href="#%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%AB%E6%93%8D%E4%BD%9C"><i class="fa fa-link"></i></a>コントロール操作</h2>

<p>継続を取ってこれるのが例外処理と決定的に異なる｡このおかげで例外の発生から復帰することができる<sup id="fnref2"><a href="#fn2" rel="footnote" title='Dolan, Stephen, et al. "Concurrent system programming with effect handlers." International Symposium on Trends in Functional Programming. Springer, Cham, 2017.'>2</a></sup>｡<br>
また継続はハンドラ側でよしなにしてくれるので､記述自体は直接形式で記述できる｡このためcallback hellが解消される｡例えば<code>scan_file_handler</code>関数はまさにコールバックを取る関数をラップすることで直接形式にしている｡</p>

<p>簡単のため､ファイル名と文字列を受け取るエフェクト<code>WriteToFile</code>を定義して様子を見る｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="nx">effect</span> <span class="nx">WriteToFile</span> <span class="cm">/* : (string, string) -&gt; void */</span><span class="p">;</span>

<span class="nx">handle</span><span class="p">((()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="p">......</span>
    <span class="nx">perform</span> <span class="nx">WriteToFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="s2">"hogehoge"</span><span class="p">);</span>
    <span class="p">......</span>
<span class="p">})()){</span>
    <span class="k">case</span> <span class="nx">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>
    <span class="k">case</span> <span class="nx">WriteToFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">str</span><span class="p">),</span> <span class="nx">k</span><span class="p">:</span> <span class="p">{</span>
        <span class="nx">writeFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">k</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div></div>

<p>なるほど確かに､ファイルに書き込んで残りの処理はコールバックにやらせる<code>writeFile</code>をラップして､見かけ上は直接形式で記述することに成功している｡</p>

<p>継続が取ってこれるので､<sup id="fnref2"><a href="#fn2" rel="footnote" title='Dolan, Stephen, et al. "Concurrent system programming with effect handlers." International Symposium on Trends in Functional Programming. Springer, Cham, 2017.'>2</a></sup>にあるように､<strong><em>async/awaitをalgebraic effectsで実装することができる</em></strong>!!<br>
これはコントロールオペレータのヒエラルキーとしてalgebraic effectsがasync/awaitと等価､またはそれ以上の表現力であることを示唆しています｡<br>
実際algebraic effectsはあるがasync/awaitのない言語ではうれしい…のかもしれません｡</p>

<h1>
<span id="algebraic-effectsのある言語や実装" class="fragment"></span><a href="#algebraic-effects%E3%81%AE%E3%81%82%E3%82%8B%E8%A8%80%E8%AA%9E%E3%82%84%E5%AE%9F%E8%A3%85"><i class="fa fa-link"></i></a>Algebraic Effectsのある言語や実装</h1>

<p>algebraic effectsにはいくつか実装が存在する｡たとえば言語機能にalgebraic effectsを組み込んだ言語､あるいはライブラリ｡フレームワークを自称しつつ実際は言語を拡張しているReactなど｡</p>

<ul>
<li>
<p>Eff</p>

<p>algebraic effectsの計算モデルとしてよく使われる言語｡MLスタイルのシンタックスでHindley-Milner型推論がある｡</p>

<ul>
<li>
<p><a href="https://github.com/matijapretnar/eff" rel="nofollow noopener" target="_blank">matijapretnar/eff</a></p>

<p>OCaml製Effインタプリタ｡エフェクトが単相なのが惜しい以外はopamで簡単に導入できてシンタックスもOCamlに毛が生えた感じで様々な面でコストが低い｡</p>
</li>
<li>
<p><a href="https://github.com/atnos-org/eff" rel="nofollow noopener" target="_blank">atnos-org/eff</a></p>

<p>ScalaのDSL実装</p>
</li>
<li>
<p>『Eff Directly in OCaml』<sup id="fnref3"><a href="#fn3" rel="footnote" title='Oleg Kiselyov, K. C. Sivaramakrishnan. "Eff directly in OCaml." ML Workshop. 2016.'>3</a></sup></p>

<p>OCaml+delimccライブラリによるEffの実装｡shift/resetとalgebraic effectsの関係が分かる｡<br>
この論文を元に､<a href="https://gist.github.com/Nymphium/60d4e2b5888f3e04b9b98c562854f143" rel="nofollow noopener" target="_blank">Racketによる実装</a>をおこなってみた｡</p>
</li>
</ul>
</li>
<li>
<p>Koka<sup id="fnref4"><a href="#fn4" rel="footnote" title='Leijen, Daan. "Algebraic Effects for Functional Programming. Technical Report." 15 pages. https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming, 2016.'>4</a></sup></p>

<p>Microsoft Researchが作っている言語｡エフェクトの型が明示されておりモナドみがある｡</p>

<ul>
<li>
<p><a href="https://github.com/koka-lang/koka" rel="nofollow noopener" target="_blank">koka-lang/koka</a></p>

<p>Haskell製｡ランタイムにJSまたはC#にコンパイルされて実行される｡<br>
stackによるビルドをできるようにしたのでぜひ使ってください｡</p>
</li>
</ul>
</li>
<li>
<p>Multicore OCaml</p>

<p>OCamlにalgebraic effectsをぶっこんだOCaml方言｡継続がワンショットなことが特徴となっている｡</p>

<ul>
<li>
<p><a href="https://github.com/ocamllabs/ocaml-multicore" rel="nofollow noopener" target="_blank">ocamllabs/ocaml-multicore</a></p>

<p>OCaml labsが<a href="https://github.com/ocaml/ocaml" rel="nofollow noopener" target="_blank">ocaml/ocaml</a>からフォークしているOCaml方言｡</p>
</li>
</ul>
</li>
</ul>

<p>他にもC言語による実装<sup id="fnref5"><a href="#fn5" rel="footnote" title='Leijen, Daan. "Implementing Algebraic Effects in C." Asian Symposium on Programming Languages and Systems. Springer, Cham, 2017.'>5</a></sup>などがあり､確かにコールスタックなどをバコッといければなんとかなりそう｡</p>



<div class="footnotes">
<hr>
<ol>

<li id="fn1">
<p>Pretnar, Matija. "An introduction to algebraic effects and handlers. invited tutorial paper." Electronic Notes in Theoretical Computer Science 319 (2015): 19-35. <a href="#fnref1">↩</a></p>
</li>

<li id="fn2">
<p>Dolan, Stephen, et al. "Concurrent system programming with effect handlers." International Symposium on Trends in Functional Programming. Springer, Cham, 2017. <a href="#fnref2">↩</a></p>
</li>

<li id="fn3">
<p>Oleg Kiselyov, K. C. Sivaramakrishnan. "Eff directly in OCaml." ML Workshop. 2016. <a href="#fnref3">↩</a></p>
</li>

<li id="fn4">
<p>Leijen, Daan. "Algebraic Effects for Functional Programming. Technical Report." 15 pages. <a href="https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming" class="autolink" rel="nofollow noopener" target="_blank">https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming</a>, 2016. <a href="#fnref4">↩</a></p>
</li>

<li id="fn5">
<p>Leijen, Daan. "Implementing Algebraic Effects in C." Asian Symposium on Programming Languages and Systems. Springer, Cham, 2017. <a href="#fnref5">↩</a></p>
</li>

</ol>
</div>
</div></section><div class="it-Footer"><div class="it-Footer_actions"><div class="it-Footer_editRequest"><a class="u-link-no-underline" href="/Nymphium/items/e6ce580da8b87ded912b/edit"><span class="fa fa-fw fa-send"></span><span>Edit request</span></a></div><div class="it-Footer_stock"><button><span class="fa fa-folder-open"></span><span class="it-Footer_stockLabel">Stock</span></button></div><div class="it-Footer_like"><button><span class="fa fa-fw fa-thumbs-up"></span><span>Like</span></button><a class="it-Footer_likeCount" href="/Nymphium/items/e6ce580da8b87ded912b/likers">133</a></div></div><div class="it-Footer_social"><div class="it-Footer_shareButton it-Footer_shareButton-webshare"><span class="fa fa-share-alt"></span></div><div class="it-Footer_shareButton it-Footer_shareButton-twitter"><span class="fa fa-twitter"></span></div><div class="it-Footer_shareButton it-Footer_shareButton-facebook"><span class="fa fa-facebook"></span></div></div></div><div class="ai-Container" itemprop="author" itemscope="" itemtype="http://schema.org/Person"><div class="it-User"><a href="/Nymphium"><img class="ai-User_image" itemprop="image" alt="Nymphium" src="https://qiita-image-store.s3.amazonaws.com/0/57887/profile-images/1473694470" /></a><div class="ai-User_body"><div class="ai-User_header"><a class="ai-User_name" href="/Nymphium">@Satoru Kawahara</a><a class="ai-User_urlname" itemprop="name" href="/Nymphium">Nymphium</a></div><div class="ai-User_description">Lagnuage implementation, OCaml, Lua, LaTeX, Neovim, Zsh, Linux, etc...</div><a class="ai-User_website" href="https://nymphium.github.io">https://nymphium.github.io</a></div></div></div></div></div><div class="p-items_options"></div><div class="p-items_toc"><div class="it-Toc"><div class="it-Toc_nav"><ul>
<li>
<a href="#%E3%82%A4%E3%83%B3%E3%83%88%E3%83%AD">イントロ</a>
</li>
<li>
<a href="#%E7%89%B9%E5%BE%B4">特徴</a>
<ul>
<li>
<a href="#%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E6%8A%BD%E8%B1%A1%E5%8C%96%E5%AE%9F%E8%A3%85%E3%81%AE%E5%88%86%E9%9B%A2">エフェクトの抽象化､実装の分離</a>
</li>
<li>
<a href="#%E3%83%8F%E3%83%B3%E3%83%89%E3%83%A9%E3%81%AE%E5%90%88%E6%88%90">ハンドラの合成</a>
</li>
<li>
<a href="#%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%AB%E6%93%8D%E4%BD%9C">コントロール操作</a>
</li>
</ul>
</li>
<li>
<a href="#algebraic-effects%E3%81%AE%E3%81%82%E3%82%8B%E8%A8%80%E8%AA%9E%E3%82%84%E5%AE%9F%E8%A3%85">Algebraic Effectsのある言語や実装</a>
</li>
</ul>
</div></div></div></div></div><div class="p-items_wrapper p-items_wrapper-white"><div class="p-items_container"><div class="p-items_leftDummy"></div><div class="p-items_main"></div><div class="p-items_rightDummy"></div></div></div></article></div><script src="//d-cache.microad.jp/js/td_qt_access.js" type="text/javascript"></script><script>microadTd.QT.start({"article_category": "JavaScript,algebra"})</script><footer id="globalFooter" class="st-Footer px-2 px-1@s pt-1 pt-3@s pb-2"><div class="st-Footer_container"><ul class="st-Footer_start"><li class="st-Footer_link"><a class="st-Footer_copyright" href="https://increments.co.jp">© 2011-2019 Increments Inc.</a></li><li class="st-Footer_link"><a href="/terms">Terms</a></li><li class="st-Footer_link"><a target="_blank" href="http://help.qiita.com/ja/articles/qiita-community-guideline">Guideline</a></li><li class="st-Footer_link"><a href="/privacy">Privacy</a></li><li class="st-Footer_link"><a href="https://help.qiita.com">Help</a></li></ul><ul class="st-Footer_end"><li class="st-Footer_link"><a href="/about">About</a></li><li class="st-Footer_link"><a href="/users">Users</a></li><li class="st-Footer_link"><a href="/tags">Tags</a></li><li class="st-Footer_link"><a href="/items">Items</a></li><li class="st-Footer_link"><a href="https://blog.qiita.com">Blog</a></li><li class="st-Footer_link"><a href="/api/v2/docs">API</a></li><li class="st-Footer_link"><a href="https://teams.qiita.com">Qiita:Team</a></li><li class="st-Footer_link"><a target="_blank" href="https://zine.qiita.com?utm_source=qiita&amp;utm_medium=referral&amp;utm_content=footer">Qiita:Zine</a></li><li class="st-Footer_link"><a target="_blank" href="https://zine.qiita.com/products/about-qiita-ad-2/?utm_source=qiita&amp;utm_medium=referral&amp;utm_content=footer">Advertisement</a></li><li class="st-Footer_link"><a href="/feedback/new">ご意見</a></li></ul></div></footer></div><div class="p-messages"><div data-hyperapp-app="Message" data-hyperapp-props="{&quot;messages&quot;:[]}"></div></div><div id="dataContainer" style="display: none;" data-config="{&quot;actionPath&quot;:&quot;public/items#show&quot;,&quot;settings&quot;:{&quot;analyticsTrackingId&quot;:&quot;UA-24675221-12&quot;,&quot;mixpanelToken&quot;:&quot;17d24b448ca579c365d2d1057f3a1791&quot;,&quot;assetsMap&quot;:{},&quot;csrfToken&quot;:&quot;pAS476YVZQlvuaUrhkmE+m3iekcOypX3eeob7S7YQzYG7LWNLTyiou+d07o7Uvw/48HwWgEVNFaKgi67i1r2EA==&quot;,&quot;locale&quot;:&quot;en&quot;},&quot;currentUser&quot;:null}" /><script>/* <![CDATA[ */
var yahoo_retargeting_id = '6B63B2EQA6';
var yahoo_retargeting_label = 'qiita';
var yahoo_retargeting_page_type = '';
var yahoo_retargeting_items = [{item_id: '', category_id: '', price: '', quantity: ''}];
/* ]]> */</script><script language="javascript" src="https://b92.yahoo.co.jp/js/s_retargeting.js" type="text/javascript"></script><script src="//platform.twitter.com/oct.js" type="text/javascript"></script><script>twttr.conversion.trackPid('nzz0o', { tw_sale_amount: 0, tw_order_quantity: 0 });</script><noscript><img alt="" height="1" src="https://analytics.twitter.com/i/adsct?txn_id=nzz0o&amp;p_id=Twitter&amp;tw_sale_amount=0&amp;tw_order_quantity=0" style="display:none;" width="1" /><img alt="" height="1" src="//t.co/i/adsct?txn_id=nzz0o&amp;p_id=Twitter&amp;tw_sale_amount=0&amp;tw_order_quantity=0" style="display:none;" width="1" /></noscript></body></html>