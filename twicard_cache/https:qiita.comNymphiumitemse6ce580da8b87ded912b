<!DOCTYPE html><html><head><meta charset="utf-8" /><title>Algebraic Effectsとは? 出身は? 使い方は? その特徴とは? 調べてみました! - Qiita</title><meta content="width=device-width,initial-scale=1,shrink-to-fit=no" name="viewport" /><meta content="#55c500" name="theme-color" /><meta content="XWpkTG32-_C4joZoJ_UsmDUi-zaH-hcrjF6ZC_FoFbk" name="google-site-verification" /><link href="/manifest.json" rel="manifest" /><link href="/opensearch.xml" rel="search" title="Qiita" type="application/opensearchdescription+xml" /><meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="74bdGrQpUgZxaaRIVCpTnMVnPmy0RBhAHxdwC1UZ25CDXUy3bBzZ2/xfGTLGCvbgL4Mb7iZfSz4CViUrQJLKmQ==" /><link rel="shortcut icon" type="image/x-icon" href="https://cdn.qiita.com/assets/favicons/public/production-c620d3e403342b1022967ba5e3db1aaa.ico" /><link rel="apple-touch-icon" type="image/png" href="https://cdn.qiita.com/assets/favicons/public/apple-touch-icon-ec5ba42a24ae923f16825592efdc356f.png" /><link rel="stylesheet" media="all" href="https://cdn.qiita.com/assets/public/style-d00234d87ec97ff859b203f71e91fde5.min.css" /><script src="https://cdn.qiita.com/assets/public/v3-bundle-a9bf65833824027db0783dae06a03b99.min.js" defer="defer"></script><meta name="twitter:card" content="summary_large_image"><meta content="@Qiita" name="twitter:site" /><meta content="@Nymphium" name="twitter:creator" /><meta property="og:type" content="article"><meta property="og:title" content="Algebraic Effectsとは? 出身は? 使い方は? その特徴とは? 調べてみました! - Qiita"><meta property="og:image" content="https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Fogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2&amp;w=1200&amp;mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3DAlgebraic%2520Effects%25E3%2581%25A8%25E3%2581%25AF%253F%2520%25E5%2587%25BA%25E8%25BA%25AB%25E3%2581%25AF%253F%2520%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%25E3%2581%25AF%253F%2520%25E3%2581%259D%25E3%2581%25AE%25E7%2589%25B9%25E5%25BE%25B4%25E3%2581%25A8%25E3%2581%25AF%253F%2520%25E8%25AA%25BF%25E3%2581%25B9%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2521%26txt-color%3D%2523333%26txt-font%3DAvenir-Black%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3D1caabdbc9f6c0e53b796c74eee4ee35b&amp;mark-align=center%2Cmiddle&amp;blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540Nymphium%26txt-color%3D%2523333%26txt-font%3DAvenir-Black%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3Dfd6494ecf386fd4832ae2af2ec363e6c&amp;blend-align=center%2Cmiddle&amp;blend-mode=normal&amp;s=d981ca15ae673b02388b321b0c2231ea"><meta property="og:description" content="ReactのHooksが実質algebraic effectsなんじゃないかということでalgebraic effectsに関する怪文書が流布して鼻白んでしまう､そんな未来を阻止するため､曲がりなりにもalgebraic effect..."><meta content="https://qiita.com/Nymphium/items/e6ce580da8b87ded912b" property="og:url" /><meta content="Qiita" property="og:site_name" /><meta content="564524038" property="fb:admins" /><meta content="JavaScript,algebra,algebraic-effects" name="keywords" /><style data-styled="true" data-styled-version="5.0.1">.bJCmFu > .banReason{list-style:disc;list-style-position:inside;margin:10px 0 10px;}
.bJCmFu > .banReason > li{padding-left:12px;font-weight:bold;}
.bJCmFu > .banReasonBody{font-size:15px;margin-bottom:10px;}
data-styled.g2[id="sc-AxirZ"]{content:"bJCmFu,"}
</style></head><body><div class="allWrapper"><div class="st-HeaderContainer"><div id="GlobalHeader-react-component-a8cd8229-4a93-4116-972a-06bea1779040"><div class="st-Header"><div class="st-Header_container"><div class="st-Header_start"><a href="/" class="st-Header_logo mr-1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 426.57 130"><circle cx="167.08" cy="21.4" r="12.28"></circle><path d="M250.81 29.66h23.48v18.9h-23.48z"></path><path d="M300.76 105.26a22.23 22.23 0 01-6.26-.86 12.68 12.68 0 01-5.17-3 14.41 14.41 0 01-3.56-5.76 28 28 0 01-1.3-9.22V48.56h29.61v-18.9h-29.52V3.29h-20.17v83.34q0 11.16 2.83 18.27a27.71 27.71 0 007.7 11.2 26.86 26.86 0 0011.43 5.62 47.56 47.56 0 0012.34 1.53h15.16v-18zM0 61.7a58.6 58.6 0 015-24.21A62.26 62.26 0 0118.73 17.9 63.72 63.72 0 0139 4.78 64.93 64.93 0 0164 0a65 65 0 0124.85 4.78 64.24 64.24 0 0120.38 13.12A62 62 0 01123 37.49a58.6 58.6 0 015 24.21 58.34 58.34 0 01-4 21.46 62.8 62.8 0 01-10.91 18.16l11.1 11.1a10.3 10.3 0 010 14.52 10.29 10.29 0 01-14.64 0l-12.22-12.41a65 65 0 01-15.78 6.65 66.32 66.32 0 01-17.55 2.3 64.63 64.63 0 01-45.23-18A62.82 62.82 0 015 85.81 58.3 58.3 0 010 61.7zm21.64.08a43.13 43.13 0 0012.42 30.63 42.23 42.23 0 0013.43 9.09A41.31 41.31 0 0064 104.8a42 42 0 0030-12.39 42.37 42.37 0 009-13.64 43.43 43.43 0 003.3-17 43.77 43.77 0 00-3.3-17A41.7 41.7 0 0080.55 22 41.78 41.78 0 0064 18.68 41.31 41.31 0 0047.49 22a42.37 42.37 0 00-13.43 9.08 43.37 43.37 0 00-12.42 30.7zM331.89 78a47.59 47.59 0 013.3-17.73 43.22 43.22 0 019.34-14.47A44.25 44.25 0 01359 36a47.82 47.82 0 0118.81-3.58 42.72 42.72 0 019.26 1 46.5 46.5 0 018.22 2.58 40 40 0 017 3.84 44.39 44.39 0 015.71 4.63l1.22-9.47h17.35v85.83h-17.35l-1.17-9.42a42.54 42.54 0 01-5.84 4.67 43.11 43.11 0 01-7 3.79 44.86 44.86 0 01-8.17 2.59 43 43 0 01-9.22 1A47.94 47.94 0 01359 119.9a43.3 43.3 0 01-14.47-9.71 44.17 44.17 0 01-9.34-14.47 47 47 0 01-3.3-17.72zm20.27-.08a29.16 29.16 0 002.17 11.34 27 27 0 005.92 8.88 26.69 26.69 0 008.76 5.76 29.19 29.19 0 0021.44 0 26.11 26.11 0 008.72-5.76 27.57 27.57 0 005.88-8.84 29 29 0 002.16-11.38 28.62 28.62 0 00-2.16-11.22 26.57 26.57 0 00-5.93-8.8 27.68 27.68 0 00-19.51-7.9 28.29 28.29 0 00-10.77 2.05 26.19 26.19 0 00-8.71 5.75 27.08 27.08 0 00-5.84 8.8 28.94 28.94 0 00-2.13 11.31zm-194.97-30.5h19.78v73.54h-19.78zm49.25 0h19.78v73.54h-19.78z"></path><circle cx="216.33" cy="21.4" r="12.28"></circle></svg></a><div><div class="st-Header_realmSelector" tabindex="0"><span class="fa fa-fw fa-caret-down"></span></div><div class="st-Header_dropdown st-RealmSelector"><div class="st-RealmSelector_realms"><a class="st-Header_dropdownItem st-RealmItem" href="https://qiita.com/"><div class="st-RealmItem_statusIcon"><span class="fa fa-fw fa-check"></span></div><div class="st-RealmItem_humanName">Qiita</div></a></div><hr/><div class="st-RealmSelector_supplements"><div class="st-RealmSelector_label">You are not logged in to any team</div><a href="https://teams-center.qiita.com/find_team" class="st-Header_dropdownItem st-RealmSelectorSupplement"><div class="st-RealmSelectorSupplement_icon"><span class="fa fa-fw fa-sign-in"></span></div><div>Log in to Qiita Team...</div></a></div></div></div><div><div class="st-Header_community" tabindex="0">Community<span class="fa fa-fw fa-caret-down ml-1of2"></span></div><div class="st-Header_dropdown"><a href="/users" class="st-Header_dropdownItem"><span class="fa fa-fw fa-users mr-1of2"></span>List of all users</a><a href="/organizations" class="st-Header_dropdownItem"><span class="fa fa-fw fa-building-o mr-1of2"></span>List of all organizatioins</a><a href="/advent-calendar" class="st-Header_dropdownItem"><span class="fa fa-fw fa-calendar mr-1of2"></span>Advent Calendar</a><div class="st-Header_dropdownSeparator"></div><a href="https://jobs.qiita.com/?utm_source=qiita&amp;utm_medium=referral&amp;utm_content=header" class="st-Header_dropdownItem" target="_blank"><span class="fa fa-fw fa-search mr-1of2"></span>Qiita Jobs</a><a href="https://qiitadon.com/" class="st-Header_dropdownItem" target="_blank"><span class="fa fa-fw fa-comments-o mr-1of2"></span>Qiitadon (β)</a><a href="https://zine.qiita.com/?utm_source=qiita&amp;utm_medium=referral&amp;utm_content=header" class="st-Header_dropdownItem" target="_blank"><span class="fa fa-fw fa-newspaper-o mr-1of2"></span>Qiita Zine</a><div class="st-Header_dropdownSeparator"></div><a href="https://help.qiita.com/ja/articles/qiita-community-guideline" class="st-Header_dropdownItem" target="_blank"><span class="fa fa-fw fa-book mr-1of2"></span>Community Guideline</a><a href="https://help.qiita.com/ja/articles/qiita-article-guideline" class="st-Header_dropdownItem" target="_blank"><span class="fa fa-fw fa-book mr-1of2"></span>How to write good articles</a></div></div><form class="st-Header_search" action="/search" method="get"><span class="fa fa-search"></span><input type="search" class="st-Header_searchInput" autoComplete="off" placeholder="Search" value="" name="q" required=""/></form><div class="st-Header_searchButton"><span class="fa fa-search"></span></div></div><div class="st-Header_end"><a class="st-Header_signupButton" href="/signup?redirect_to=%2FNymphium%2Fitems%2Fe6ce580da8b87ded912b">Signup</a><a class="st-Header_loginLink" href="/login?redirect_to=%2FNymphium%2Fitems%2Fe6ce580da8b87ded912b">Login</a></div><div class="st-Header_overlay"></div><form class="st-Header_searchModal" action="/search" method="get"><input type="text" class="st-Header_searchModalInput" autoComplete="off" placeholder="Search" value="" name="q" required=""/></form></div></div></div>
      <script type="application/json" class="js-react-on-rails-component" data-component-name="GlobalHeader" data-dom-id="GlobalHeader-react-component-a8cd8229-4a93-4116-972a-06bea1779040">{"unreadNotificationsCount":null,"realms":[{"humanName":"Qiita","isCurrentRealm":true,"isQiita":true,"isQiitaTeam":false,"loggedInUser":null,"teamId":null,"url":"https://qiita.com/"}],"teamFindUrl":"https://teams-center.qiita.com/find_team","isTeamOnlyUser":null,"currentUser":null}</script>
      
</div><div class="st-HeaderAlert st-HeaderAlert-warning"><div class="st-HeaderAlert_body"></div></div><script type="application/ld+json">{"@context":"http://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","position":1,"item":{"@id":"/","name":"Qiita"}},{"@type":"ListItem","position":2,"item":{"@id":"/tags/%23%3CQiita::Graph::Result:0x000055f0f323ea58%3E","name":"JavaScript"}}]}</script><style type="text/css">.cb-CampaignLink {
  background-color: #333333;
  width: 100%;
}

.cb-CampaignLink_container {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  max-width: 1100px;
  margin: 0 auto;
  font-size: 13px;
  padding: 0.8em;

}
.cb-CampaignLink_container > a {
  color: #fff;
}

.cb-CampaignLink_container > a:hover {
  text-decoration: underline;
}</style><script type="application/json" id="js-react-on-rails-context">{"railsEnv":"production","inMailer":false,"i18nLocale":"en","i18nDefaultLocale":"en","href":"https://qiita.com/Nymphium/items/e6ce580da8b87ded912b","location":"/Nymphium/items/e6ce580da8b87ded912b","scheme":"https","host":"qiita.com","port":null,"pathname":"/Nymphium/items/e6ce580da8b87ded912b","search":null,"httpAcceptLanguage":null,"actionPath":"public/items#show","settings":{"analyticsTrackingId":"UA-24675221-12","mixpanelToken":"17d24b448ca579c365d2d1057f3a1791","assetsMap":{},"csrfToken":"Vn0MdwuAtcJmKNpPJtLXzEyv0esi2z+ODPo3JpD5wnQ6pp3a07U+H+seZzW08nKwpkv0abDAbPARu2IGhXLTfQ==","locale":"en"},"currentUser":null,"isLoggedIn":false,"recaptchaSiteKey":"6LfNkiQTAAAAAM3UGnSquBy2akTITGNMO_QDxMw6","serverSide":false}</script>
<div id="PersonalArticle-react-component-985871b0-1215-463c-a57e-357ba695a3c3"><div class="p-items" itemscope="" itemType="http://schema.org/Article"><div class="p-items_wrapper"><div class="p-items_container"><div class="p-items_main"><div class="p-items_article"><div class="it-Header"><div class="u-flex-center-between mb-3"><div class="it-Header_info"><div class="it-Header_author"><a href="/Nymphium"><img src="https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F57887%2Fprofile-images%2F1577735211?ixlib=rb-1.2.2&amp;auto=compress%2Cformat&amp;lossless=0&amp;w=48&amp;s=184806368efe8489758b9f56435409b1" alt="Nymphium" class="it-Header_authorImage"/></a><a href="/Nymphium" class="it-Header_authorName">@<!-- -->Nymphium</a></div><div class="it-Header_time"><span title="posted at 2018-10-30" class=""><meta content="2018-10-30T13:48:01Z" itemProp="datePublished"/><time dateTime="2019-02-12T13:39:11Z" itemProp="dateModified">updated at 2019-02-12</time></span></div><div class="it-Header_meta"><div class="it-Header_manipulate"><div class="it-Header_dropdown"><span class="it-Header_dropdownToggle" tabindex="0"><span class="fa fa-ellipsis-h fa-lg"></span></span><div class="st-Dropdown right"><div><div class="it-Header_dropdown-title">Improve article</div><a class="st-Dropdown_item" href="/drafts/e6ce580da8b87ded912b/edit"><span class="fa fa-fw fa-code-fork pr-1"></span>Send edit request</a><div class="st-Dropdown_separator"></div></div><div class="it-Header_dropdown-title">Article information</div><a class="st-Dropdown_item" href="/Nymphium/items/e6ce580da8b87ded912b/revisions"><span class="fa fa-fw fa-history pr-1"></span>Revisions</a><a class="st-Dropdown_item" href="/Nymphium/items/e6ce580da8b87ded912b/patches"><span class="fa fa-fw fa-inbox pr-1"></span>Edit Requests</a><a class="st-Dropdown_item" href="/Nymphium/items/e6ce580da8b87ded912b/likers"><span class="fa fa-fw fa-thumbs-up pr-1"></span>Show all likers</a><a class="st-Dropdown_item" href="/Nymphium/items/e6ce580da8b87ded912b.md"><span class="fa fa-fw fa-file-text-o pr-1"></span>Show article in Markdown</a><div class="st-Dropdown_separator"></div><div class="st-Dropdown_item"><span class="fa fa-fw fa-flag pr-1"></span>Report article</div></div></div></div><div class="st-Modal"><div class="st-Modal_backdrop"></div><div class="st-Modal_body"><form><div class="st-Form"><span class="st-Form_label">Help us understand the problem. What is going on with this article?</span></div><div class="st-Form"><label><input type="radio" name="reason" value="spam" required=""/>It&#x27;s spam</label></div><div class="st-Form"><label><input type="radio" name="reason" value="harassment" required=""/>It&#x27;s abusive or harmful</label></div><div class="st-Form"><label><input type="radio" name="reason" value="inappropriate_content" required=""/>It contains inappropriate content</label></div><div class="st-Form st-Form-right"><input type="submit" class="st-Form_submit" value="Submit"/></div></form></div></div></div></div></div><h1 class="it-Header_title" itemProp="headline">Algebraic Effectsとは? 出身は? 使い方は? その特徴とは? 調べてみました!</h1><div class="it-Tags"><a href="/tags/javascript" class="it-Tags_item"><span>JavaScript</span></a><a href="/tags/algebra" class="it-Tags_item"><span>algebra</span></a><a href="/tags/algebraic-effects" class="it-Tags_item"><span>algebraic-effects</span></a></div></div><div class="it-DeprecationAlert_one mb-5 p-2"><span class="fa fa-warning mr-1"></span>More than 1 year has passed since last update.</div><section class="it-MdContent" itemProp="articleBody"><div id="personal-public-article-body"><div><p>ReactのHooksが実質algebraic effectsなんじゃないかということでalgebraic effectsに関する怪文書が流布して鼻白んでしまう､そんな未来を阻止するため､曲がりなりにもalgebraic effectsを研究している者としてalgebraic effectsについて書こうと思います｡</p>

<p>当方React全く知らないしJSにも明るくない侍ですが､プログラム片にはJSっぽいシンタックスを使っていこうと思います｡</p>

<h1>
<span id="イントロ" class="fragment"></span><a href="#%E3%82%A4%E3%83%B3%E3%83%88%E3%83%AD"><i class="fa fa-link"></i></a>イントロ</h1>

<p>Algebraic Effectsとは､Plotkinらによって提唱された､computational effectsを代数的に扱おうという試みである｡それにeffect handlerが後付けされ､現在はalgebraic effects <em>and handlers</em> を略してalgebraic effectsと呼んでいることが多い｡非常に直感的な説明としては､<em>継続を取ってこれる例外</em>である｡<br>
チュートリアルとしては､こちらの論文<sup id="fnref1"><a href="#fn1" rel="footnote" title='Pretnar, Matija. "An introduction to algebraic effects and handlers. invited tutorial paper." Electronic Notes in Theoretical Computer Science 319 (2015): 19-35.'>1</a></sup>の内容に尽きるわけですが……｡</p>

<p>algebraic effectsは､エフェクトの定義､発生､そしてハンドラに分かれる｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="c1">// effect definition</span>
<span class="nx">effect</span> <span class="nx">Foo</span> <span class="cm">/* : int -&gt; int */</span><span class="p">;</span>

<span class="c1">// handler</span>
<span class="nx">handle</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">perform</span><span class="cm">/* invocation */</span> <span class="nx">Foo</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="mi">10</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nx">x</span><span class="p">:</span> <span class="p">{</span>
       <span class="nx">x</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">case</span> <span class="nx">Foo</span><span class="p">(</span><span class="nx">x</span><span class="p">),</span> <span class="nx">k</span><span class="p">:</span> <span class="p">{</span>
        <span class="nx">k</span><span class="p">(</span><span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//==&gt; prints `19`</span>
</pre></div></div>

<p>うそうそシンタックスですが大丈夫ですか?</p>

<p><code>Foo</code>という名前の<code>int -&gt; int</code>というシグネチャを持つエフェクトを定義します｡JSは型がないので雰囲気出ないですが､一般にエフェクトは名前とシグネチャ(型)を持ちます｡</p>

<p>エフェクトの発生は<code>perform エフェクト(引数...)</code>というシンタックスです｡エフェクトの引数の型は､シグネチャの矢印<code>-&gt;</code>の左辺に対応します｡ここでは<code>int</code>の引数に<code>3</code>を渡してるので､確かに型は一致します｡</p>

<p>ハンドラは<code>handle(exp){ case エフェクト(仮引数), 継続: {...}... }</code>という感じ｡<code>exp</code>内で発生したエフェクトをハンドルします｡<br>
例では<code>Foo</code>エフェクトが発生したので､<code>case Foo(x), k: ...</code>という部分でキャッチされます｡<code>x</code>に<code>3</code>が渡されそうですが､<code>k</code>とは一体…?<br>
ここがalgebraic effectsのミソで､<code>k</code>には<strong><em>継続</em></strong>が渡されます｡出､出〜www継続奴という感じですがJSerの皆さんにはおなじみのはずです｡継続とは"<em>残りの計算</em> "であり､Promiseで<code>then</code>に渡してる関数はまさに継続といって差し支えありません｡具体的に<code>k</code>に入るものは､この場合<code>(h) =&gt; console.log(h + 10)</code>となります｡なるほど確かに残りの計算だ｡<br>
したがって､このハンドラによって<code>console.log(perform Foo(3) + 10)</code>は<code>console.log(3 * 3 + 10)</code>となります｡<br>
限定継続が分かる方は､この<code>handle(exp){...}</code>が継続のdelimiterといえばイメージが湧くかと思います｡限定継続に関して一筆したためているので､詳細は<a href="https://nymphium.github.io/2018/07/19/delimited-continuation%E3%81%AE%E5%A4%8F.html" rel="nofollow noopener" target="_blank">こちら</a>をご覧ください｡</p>

<p><code>case x: x;</code>は何やねんということですが､これはvalue handlerと呼ばれる部分です｡今回は<code>console.log</code>の戻り値が<code>void</code>なので雰囲気出ませんが､<code>exp</code>部分が値になるまで評価されきったあとに､その値をハンドルする部分です｡value handlerはエフェクトのハンドル部分と異なり継続を取りません｡</p>

<p>かなり雰囲気はつかめたんじゃないでしょうか｡</p>

<h1>
<span id="特徴" class="fragment"></span><a href="#%E7%89%B9%E5%BE%B4"><i class="fa fa-link"></i></a>特徴</h1>

<p>algebraic effectsの特徴としては､</p>

<ul>
<li>エフェクトの抽象化, 実装の分離</li>
<li>コントロール操作</li>
</ul>

<p>が挙げられる｡</p>

<h2>
<span id="エフェクトの抽象化実装の分離" class="fragment"></span><a href="#%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E6%8A%BD%E8%B1%A1%E5%8C%96%E5%AE%9F%E8%A3%85%E3%81%AE%E5%88%86%E9%9B%A2"><i class="fa fa-link"></i></a>エフェクトの抽象化､実装の分離</h2>

<p>エフェクトの抽象化はまさにalgebraic effectsのやりたいことである｡エフェクトの抽象化は即ちインタフェースと実装を分離することになる｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="nx">effect</span> <span class="nx">Write</span> <span class="cm">/* : string -&gt; void */</span><span class="p">;</span>

<span class="c1">// 標準出力に書き込む</span>
<span class="kd">const</span> <span class="nx">print_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">th</span><span class="p">()){</span>
        <span class="k">case</span> <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">Write</span><span class="p">(</span><span class="nx">str</span><span class="p">),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">k</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ファイルに書き込む</span>
<span class="kd">const</span> <span class="nx">write_file_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">th</span><span class="p">()){</span>
        <span class="k">case</span> <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">Write</span><span class="p">(</span><span class="nx">str</span><span class="p">),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">k</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="nx">print_handler</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">perform</span> <span class="nx">Write</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">perform</span> <span class="nx">Write</span><span class="p">(</span><span class="dl">"</span><span class="s2">World</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>
<span class="c1">// ==&gt; prints `Hello\nWorld`</span>

<span class="nx">write_file_handler</span><span class="p">(</span><span class="dl">"</span><span class="s2">hoge.txt</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">perform</span> <span class="nx">Write</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">perform</span> <span class="nx">Write</span><span class="p">(</span><span class="dl">"</span><span class="s2">World</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>
<span class="c1">// ==&gt; write "Hello" and "World" to hoge.txt</span>
</pre></div></div>

<p>なるほどね｡</p>

<p>ハンドラの変更がそのまま実装の差し替えになる｡例えばDI注入にも使えるのではないだろうか｡<br>
例えばなにかの顧客DBを取ってくるエフェクト<code>GetAccountList</code>を考えてみる｡<code>filter</code>は述語<code>p</code>を取ってDBをフィルタする関数であり､内部で<code>GetAccountList</code>エフェクトを発生している｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="nx">effect</span> <span class="nx">GetAccountList</span> <span class="cm">/* : void -&gt; DB */</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">filter</span> <span class="o">=</span> <span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">perform</span> <span class="nx">GetAccountList</span><span class="p">();</span>
    <span class="nx">list</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span>
<span class="p">}</span>
</pre></div></div>

<p>例えばテスト用DBのためのハンドラは</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="kd">const</span> <span class="nx">test_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">th</span><span class="p">()){</span>
        <span class="k">case</span> <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">GetAccountList</span><span class="p">(),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">k</span><span class="p">(</span><span class="nx">db_for_test</span><span class="p">());</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div></div>

<p>また本番のDBを返すハンドラは</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="kd">const</span> <span class="nx">production_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">th</span><span class="p">()){</span>
        <span class="k">case</span> <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">GetAccountList</span><span class="p">(),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">k</span><span class="p">(</span><span class="nx">db_for_production</span><span class="p">());</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div></div>

<p>あとは実際に<code>filter</code>関数を使うシチュエーションごとにハンドラを変えればいい｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="kd">const</span> <span class="nx">test_main</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="p">......</span>
    <span class="kd">const</span> <span class="nx">filtered_accounts</span> <span class="o">=</span> <span class="nx">filter</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span>
    <span class="p">......</span>
<span class="p">}</span>

<span class="nx">assert</span><span class="p">(</span><span class="nx">test_handler</span><span class="p">(</span><span class="nx">test_main</span><span class="p">))</span>
</pre></div></div>

<h2>
<span id="ハンドラの合成" class="fragment"></span><a href="#%E3%83%8F%E3%83%B3%E3%83%89%E3%83%A9%E3%81%AE%E5%90%88%E6%88%90"><i class="fa fa-link"></i></a>ハンドラの合成</h2>

<p>エフェクトハンドラは例外ハンドラと同様に､unhandledなエフェクトはより上位のハンドラに捕捉されます(あるいはされずにランタイムエラー)｡この性質を利用することでハンドラを合成することができます｡<br>
先程の<code>Write</code>を引っ張ってみます｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="nx">effect</span> <span class="nx">Write</span> <span class="cm">/* : string -&gt; void */</span><span class="p">;</span>

<span class="c1">// 標準出力に書き込む</span>
<span class="kd">const</span> <span class="nx">print_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">th</span><span class="p">()){</span>
        <span class="k">case</span> <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">Write</span><span class="p">(</span><span class="nx">str</span><span class="p">),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">k</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ファイルに書き込む</span>
<span class="kd">const</span> <span class="nx">write_file_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">th</span><span class="p">()){</span>
        <span class="k">case</span> <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">Write</span><span class="p">(</span><span class="nx">str</span><span class="p">),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">k</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div></div>

<p><code>Write</code>があるなら<code>Read</code>もしたいのが人間の性です｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="nx">effect</span> <span class="nx">Read</span> <span class="cm">/* : void -&gt; string */</span><span class="p">;</span>
</pre></div></div>

<p>そしてやるだけ｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="kd">const</span> <span class="nx">scan_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">th</span><span class="p">()){</span>
        <span class="k">case</span> <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">Read</span><span class="p">(),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">k</span><span class="p">(</span><span class="nx">readline</span><span class="p">())</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">scan_file_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">th</span><span class="p">()){</span>
        <span class="k">case</span> <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">Read</span><span class="p">(),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">readFileAsync</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">k</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div></div>

<p>標準入出力とファイルの入出力をごっちゃにするシーンはあまり多くないので1つのハンドラにしたいと思います｡せっかくハンドラをそれぞれ書いたのでこれを使ってみます｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="kd">const</span> <span class="nx">stdio_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">print_handler</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">scan_handler</span><span class="p">(</span><span class="nx">th</span><span class="p">));</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">fileio_handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">write_file_handler</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">scan_file_handler</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">th</span><span class="p">));</span>
<span class="p">}</span>
</pre></div></div>

<p>オッええやん｡<code>stdio_handler</code>の受け取るサンクの中で<code>Write</code>が発生した場合､<code>scan_handler</code>を突き抜けて<code>print_handler</code>によりハンドルされます｡これが合成だ､花京院｡<br>
もちろんいちどきに一つのハンドラも実装できます｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="kd">const</span> <span class="nx">stdio</span> <span class="o">=</span> <span class="p">(</span><span class="nx">th</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">th</span><span class="p">()){</span>
        <span class="k">case</span> <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>

        <span class="k">case</span> <span class="nx">Write</span><span class="p">(</span><span class="nx">str</span><span class="p">),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">k</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="k">case</span> <span class="nx">Read</span><span class="p">(),</span> <span class="na">k</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">k</span><span class="p">(</span><span class="nx">readline</span><span class="p">())</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// fileも同様に(略)</span>
</pre></div></div>

<p>また､同じエフェクトのハンドラをネストすることで､<em>部分的に実装を変える</em>ことができる｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="nx">fileio_handler</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">perform</span> <span class="nx">Write</span><span class="p">(</span><span class="dl">"</span><span class="s2">hoge</span><span class="dl">"</span><span class="p">);</span>  <span class="c1">// fileに"hoge"を書き込む</span>
    <span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">perform</span> <span class="nx">Read</span><span class="p">();</span>  <span class="c1">// fileから読む</span>
    <span class="nx">print_handler</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">perform</span> <span class="nx">Write</span><span class="p">(</span><span class="nx">str</span><span class="p">));</span>  <span class="c1">// *標準出力に*書き込む</span>
<span class="p">})</span>
</pre></div></div>

<p>同じ<code>Write</code>を<code>fileio_handler</code>内で発生させているが､2つ目の<code>Write</code>はさらに<code>print_handler</code>に包んで発生させている｡このエフェクトの発生を最初に捕捉するハンドラは<code>print_handler</code>になるため､<code>str</code>はファイルではなく標準出力に書き込まれる｡</p>

<p>ちなみに､サンク1行目の<code>Write</code>がハンドラによって捕捉されるので､2行目以降はハンドラ内の継続として実行されます｡2行目の<code>Read</code>もしっかり<code>fileio_handler</code>により捕捉されるが､これはつまり継続も<code>fileio_handler</code>によりハンドルされていることになる｡このように継続も追随してハンドルしてくれるハンドラをdeep handler､明示的に継続をハンドルしないといけないハンドラはshallow handlerと呼ばれる｡deep handlerのほうが一般的だが､shallow handlerのほうが動作が軽量(のはず)である｡</p>

<h2>
<span id="コントロール操作" class="fragment"></span><a href="#%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%AB%E6%93%8D%E4%BD%9C"><i class="fa fa-link"></i></a>コントロール操作</h2>

<p>継続を取ってこれるのが例外処理と決定的に異なる｡このおかげで例外の発生から復帰することができる<sup id="fnref2"><a href="#fn2" rel="footnote" title='Dolan, Stephen, et al. "Concurrent system programming with effect handlers." International Symposium on Trends in Functional Programming. Springer, Cham, 2017.'>2</a></sup>｡<br>
また継続はハンドラ側でよしなにしてくれるので､記述自体は直接形式で記述できる｡このためcallback hellが解消される｡例えば<code>scan_file_handler</code>関数はまさにコールバックを取る関数をラップすることで直接形式にしている｡</p>

<p>簡単のため､ファイル名と文字列を受け取るエフェクト<code>WriteToFile</code>を定義して様子を見る｡</p>

<div class="code-frame" data-lang="js"><div class="highlight"><pre><span class="nx">effect</span> <span class="nx">WriteToFile</span> <span class="cm">/* : (string, string) -&gt; void */</span><span class="p">;</span>

<span class="nx">handle</span><span class="p">((()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="p">......</span>
    <span class="nx">perform</span> <span class="nx">WriteToFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="dl">"</span><span class="s2">hogehoge</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">......</span>
<span class="p">})()){</span>
    <span class="k">case</span> <span class="nx">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">;</span>
    <span class="k">case</span> <span class="nx">WriteToFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">str</span><span class="p">),</span> <span class="nx">k</span><span class="p">:</span> <span class="p">{</span>
        <span class="nx">writeFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">k</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div></div>

<p>なるほど確かに､ファイルに書き込んで残りの処理はコールバックにやらせる<code>writeFile</code>をラップして､見かけ上は直接形式で記述することに成功している｡</p>

<p>継続が取ってこれるので､<sup id="fnref2"><a href="#fn2" rel="footnote" title='Dolan, Stephen, et al. "Concurrent system programming with effect handlers." International Symposium on Trends in Functional Programming. Springer, Cham, 2017.'>2</a></sup>にあるように､<strong><em>async/awaitをalgebraic effectsで実装することができる</em></strong>!!<br>
これはコントロールオペレータのヒエラルキーとしてalgebraic effectsがasync/awaitと等価､またはそれ以上の表現力であることを示唆しています｡<br>
実際algebraic effectsはあるがasync/awaitのない言語ではうれしい…のかもしれません｡</p>

<h1>
<span id="algebraic-effectsのある言語や実装" class="fragment"></span><a href="#algebraic-effects%E3%81%AE%E3%81%82%E3%82%8B%E8%A8%80%E8%AA%9E%E3%82%84%E5%AE%9F%E8%A3%85"><i class="fa fa-link"></i></a>Algebraic Effectsのある言語や実装</h1>

<p>algebraic effectsにはいくつか実装が存在する｡たとえば言語機能にalgebraic effectsを組み込んだ言語､あるいはライブラリ｡フレームワークを自称しつつ実際は言語を拡張しているReactなど｡</p>

<ul>
<li>
<p>Eff</p>

<p>algebraic effectsの計算モデルとしてよく使われる言語｡MLスタイルのシンタックスでHindley-Milner型推論がある｡</p>

<ul>
<li>
<p><a href="https://github.com/matijapretnar/eff" rel="nofollow noopener" target="_blank">matijapretnar/eff</a></p>

<p>OCaml製Effインタプリタ｡エフェクトが単相なのが惜しい以外はopamで簡単に導入できてシンタックスもOCamlに毛が生えた感じで様々な面でコストが低い｡</p>
</li>
<li>
<p><a href="https://github.com/atnos-org/eff" rel="nofollow noopener" target="_blank">atnos-org/eff</a></p>

<p>ScalaのDSL実装</p>
</li>
<li>
<p>『Eff Directly in OCaml』<sup id="fnref3"><a href="#fn3" rel="footnote" title='Oleg Kiselyov, K. C. Sivaramakrishnan. "Eff directly in OCaml." ML Workshop. 2016.'>3</a></sup></p>

<p>OCaml+delimccライブラリによるEffの実装｡shift/resetとalgebraic effectsの関係が分かる｡<br>
この論文を元に､<a href="https://gist.github.com/Nymphium/60d4e2b5888f3e04b9b98c562854f143" rel="nofollow noopener" target="_blank">Racketによる実装</a>をおこなってみた｡</p>
</li>
</ul>
</li>
<li>
<p>Koka<sup id="fnref4"><a href="#fn4" rel="footnote" title='Leijen, Daan. "Algebraic Effects for Functional Programming. Technical Report." 15 pages. https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming, 2016.'>4</a></sup></p>

<p>Microsoft Researchが作っている言語｡エフェクトの型が明示されておりモナドみがある｡</p>

<ul>
<li>
<p><a href="https://github.com/koka-lang/koka" rel="nofollow noopener" target="_blank">koka-lang/koka</a></p>

<p>Haskell製｡ランタイムにJSまたはC#にコンパイルされて実行される｡<br>
stackによるビルドをできるようにしたのでぜひ使ってください｡</p>
</li>
</ul>
</li>
<li>
<p>Multicore OCaml</p>

<p>OCamlにalgebraic effectsをぶっこんだOCaml方言｡継続がワンショットなことが特徴となっている｡</p>

<ul>
<li>
<p><a href="https://github.com/ocamllabs/ocaml-multicore" rel="nofollow noopener" target="_blank">ocamllabs/ocaml-multicore</a></p>

<p>OCaml labsが<a href="https://github.com/ocaml/ocaml" rel="nofollow noopener" target="_blank">ocaml/ocaml</a>からフォークしているOCaml方言｡</p>
</li>
</ul>
</li>
</ul>

<p>他にもC言語による実装<sup id="fnref5"><a href="#fn5" rel="footnote" title='Leijen, Daan. "Implementing Algebraic Effects in C." Asian Symposium on Programming Languages and Systems. Springer, Cham, 2017.'>5</a></sup>などがあり､確かにコールスタックなどをバコッといければなんとかなりそう｡</p>



<div class="footnotes">
<hr>
<ol>

<li id="fn1">
<p>Pretnar, Matija. "An introduction to algebraic effects and handlers. invited tutorial paper." Electronic Notes in Theoretical Computer Science 319 (2015): 19-35. <a href="#fnref1">↩</a></p>
</li>

<li id="fn2">
<p>Dolan, Stephen, et al. "Concurrent system programming with effect handlers." International Symposium on Trends in Functional Programming. Springer, Cham, 2017. <a href="#fnref2">↩</a></p>
</li>

<li id="fn3">
<p>Oleg Kiselyov, K. C. Sivaramakrishnan. "Eff directly in OCaml." ML Workshop. 2016. <a href="#fnref3">↩</a></p>
</li>

<li id="fn4">
<p>Leijen, Daan. "Algebraic Effects for Functional Programming. Technical Report." 15 pages. <a href="https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming" class="autolink" rel="nofollow noopener" target="_blank">https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming</a>, 2016. <a href="#fnref4">↩</a></p>
</li>

<li id="fn5">
<p>Leijen, Daan. "Implementing Algebraic Effects in C." Asian Symposium on Programming Languages and Systems. Springer, Cham, 2017. <a href="#fnref5">↩</a></p>
</li>

</ol>
</div>
</div></div></section><div class="it-Footer"><div class="it-Footer_actions"><div class="it-Footer_editRequest"><a href="/drafts/e6ce580da8b87ded912b/edit" class="u-link-no-underline"><span class="fa fa-fw fa-code-fork"></span><span>Edit request</span></a></div><div class="it-Footer_stock"><button><div class="fa-stack"><span class="fa fa-folder-open"></span></div><span class="it-Footer_stockLabel">Stock</span></button></div><div class="it-Footer_like"><button><span class="fa fa-fw fa-thumbs-up"></span><span>Like</span></button><a href="/Nymphium/items/e6ce580da8b87ded912b/likers" class="it-Footer_likeCount">174</a></div></div><div class="it-Footer_social"><div class="it-Footer_shareButton it-Footer_shareButton-twitter"><span class="fa fa-twitter"></span></div><div class="it-Footer_shareButton it-Footer_shareButton-facebook"><span class="fa fa-facebook"></span></div></div></div><div class="ai-Container" itemProp="author" itemscope="" itemType="http://schema.org/Person"><div class="ai-User"><a href="/Nymphium"><img src="https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F57887%2Fprofile-images%2F1577735211?ixlib=rb-1.2.2&amp;auto=compress%2Cformat&amp;lossless=0&amp;w=75&amp;s=a98ebb6786c901ac7dbc9b697f8c1d64" alt="Nymphium" class="ai-User_image" itemProp="image"/></a><div class="ai-User_body"><div class="ai-User_header"><a href="/Nymphium" class="ai-User_name">Satoru Kawahara</a><a href="/Nymphium" class="ai-User_urlname" itemProp="name">@<!-- -->Nymphium</a><span itemProp="memberOf" itemscope="" itemType="http://schema.org/Organization"><a href="/organizations/herp" itemProp="url"><img src="https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/fc7984e3b37782b7a5c55a95734433c52d07bfcb/original.jpg?1552547854" alt="herp" class="ai-User_organization" itemProp="image"/></a></span></div><div class="ai-User_description">面白いプログラム言語の機能や面白いプログラム言語の機能以外について話します｡</div><a href="https://nymphium.github.io" class="ai-User_website">https://nymphium.github.io</a><div class="ai-User_footer"><button class="it-UserFollowButton it-UserFollowButton-follow">Follow</button></div></div></div><div class="ai-Organization" itemProp="memberOf" itemscope="" itemType="http://schema.org/Organization"><a href="/organizations/herp" itemProp="url"><img src="https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/fc7984e3b37782b7a5c55a95734433c52d07bfcb/original.jpg?1552547854" alt="herp" class="ai-Organization_image" itemProp="image"/></a><div class="ai-Organization_body"><div class="ai-Organization_header"><a href="/organizations/herp" class="ai-Organization_name"><span itemProp="legalName">株式会社HERP</span></a></div><div class="ai-Organization_description" itemProp="description">現場社員主導の採用活動である『スクラム採用』を実現する採用管理プラットフォーム「HERP ATS」を開発・運営しています。</div><a href="https://herp.co.jp" class="ai-Organization_website">https://herp.co.jp</a></div></div></div><div class="apm-Content"><div class="apm-Content_title">Why not register and get more from Qiita?</div><ol class="apm-Content_list"><li>We will deliver articles that match you<div class="description">By following users and tags, you can catch up information on technical fields that you are interested in as a whole</div></li><li>you can read useful information later efficiently<div class="description">By &quot;stocking&quot; the articles you like, you can search right away</div></li><div><a class="apm-Content_help" href="https://help.qiita.com/ja/articles/qiita-login-user" target="_blank"><i class="fa fa-fw fa-arrow-circle-right"></i>What you can do with signing up</a></div></ol><a href="/signup?callback_action=login_or_signup&amp;redirect_to=%2FNymphium%2Fitems%2Fe6ce580da8b87ded912b&amp;realm=qiita" class="apm-Content_button apm-Content_button-signup">Sign up</a><a href="/login?callback_action=login_or_signup&amp;redirect_to=%2FNymphium%2Fitems%2Fe6ce580da8b87ded912b&amp;realm=qiita" class="apm-Content_button apm-Content_button-signin">Login</a></div></div></div><div class="p-items_options"><div class="mt-2"></div></div><div class="p-items_toc"><div class="mt-2"></div></div></div></div><div class="p-items_wrapper p-items_wrapper-white"><div class="p-items_container"><div class="p-items_leftDummy"></div><div class="p-items_main"><div class="p-items_aside px-5 p-2@s"><div id="logly-lift-4279493"><div class="tl-DummyItemList p-2"><div class="tl-DummyItemList_content tl-DummyItem"><div class="tl-DummyItem_image mr-1"></div><div class="tl-DummyItem_body"><div class="tl-DummyItem_text mb-1"></div><div class="tl-DummyItem_text mb-1"></div><div class="tl-DummyItem_text mb-1"></div></div></div><div class="tl-DummyItemList_content tl-DummyItem"><div class="tl-DummyItem_image mr-1"></div><div class="tl-DummyItem_body"><div class="tl-DummyItem_text mb-1"></div><div class="tl-DummyItem_text mb-1"></div><div class="tl-DummyItem_text mb-1"></div></div></div><div class="tl-DummyItemList_content tl-DummyItem"><div class="tl-DummyItem_image mr-1"></div><div class="tl-DummyItem_body"><div class="tl-DummyItem_text mb-1"></div><div class="tl-DummyItem_text mb-1"></div><div class="tl-DummyItem_text mb-1"></div></div></div><div class="tl-DummyItemList_content tl-DummyItem"><div class="tl-DummyItem_image mr-1"></div><div class="tl-DummyItem_body"><div class="tl-DummyItem_text mb-1"></div><div class="tl-DummyItem_text mb-1"></div><div class="tl-DummyItem_text mb-1"></div></div></div><div class="tl-DummyItemList_content tl-DummyItem"><div class="tl-DummyItem_image mr-1"></div><div class="tl-DummyItem_body"><div class="tl-DummyItem_text mb-1"></div><div class="tl-DummyItem_text mb-1"></div><div class="tl-DummyItem_text mb-1"></div></div></div></div></div></div><div class="p-items_aside mt-5 px-5 p-2@s"></div><div></div><div class="p-items_aside mt-6 px-5 p-2@s" id="comments-wrapper"><div id="comments" class="co-ItemWrapper"><div class="co-ItemWrapper_title mb-2"><span class="fa fa-comments mr-1"></span>Comments</div><div class="mb-4">No comments</div><div class="co-AnonymousForm p-3"><div class="co-AnonymousForm_title mb-1">Sign up for free and join this conversation.</div><a href="/signup?callback_action=login_or_signup&amp;redirect_to=%2FNymphium%2Fitems%2Fe6ce580da8b87ded912b&amp;realm=qiita" class="co-AnonymousForm_signup">Sign Up</a><div class="co-AnonymousForm_sub mt-1">If you already have a Qiita account <a href="/login?callback_action=login_or_signup&amp;redirect_to=%2FNymphium%2Fitems%2Fe6ce580da8b87ded912b&amp;realm=qiita" class="co-AnonymousForm_login">Login</a></div></div></div></div></div><div class="p-items_rightDummy"></div></div></div></div></div>
      <script type="application/json" class="js-react-on-rails-component" data-component-name="PersonalArticle" data-dom-id="PersonalArticle-react-component-985871b0-1215-463c-a57e-357ba695a3c3">{"article":{"body":"\u003cp\u003eReactのHooksが実質algebraic effectsなんじゃないかということでalgebraic effectsに関する怪文書が流布して鼻白んでしまう､そんな未来を阻止するため､曲がりなりにもalgebraic effectsを研究している者としてalgebraic effectsについて書こうと思います｡\u003c/p\u003e\n\n\u003cp\u003e当方React全く知らないしJSにも明るくない侍ですが､プログラム片にはJSっぽいシンタックスを使っていこうと思います｡\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"イントロ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%A4%E3%83%B3%E3%83%88%E3%83%AD\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eイントロ\u003c/h1\u003e\n\n\u003cp\u003eAlgebraic Effectsとは､Plotkinらによって提唱された､computational effectsを代数的に扱おうという試みである｡それにeffect handlerが後付けされ､現在はalgebraic effects \u003cem\u003eand handlers\u003c/em\u003e を略してalgebraic effectsと呼んでいることが多い｡非常に直感的な説明としては､\u003cem\u003e継続を取ってこれる例外\u003c/em\u003eである｡\u003cbr\u003e\nチュートリアルとしては､こちらの論文\u003csup id=\"fnref1\"\u003e\u003ca href=\"#fn1\" rel=\"footnote\" title='Pretnar, Matija. \"An introduction to algebraic effects and handlers. invited tutorial paper.\" Electronic Notes in Theoretical Computer Science 319 (2015): 19-35.'\u003e1\u003c/a\u003e\u003c/sup\u003eの内容に尽きるわけですが……｡\u003c/p\u003e\n\n\u003cp\u003ealgebraic effectsは､エフェクトの定義､発生､そしてハンドラに分かれる｡\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c1\"\u003e// effect definition\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eeffect\u003c/span\u003e \u003cspan class=\"nx\"\u003eFoo\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* : int -\u0026gt; int */\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// handler\u003c/span\u003e\n\u003cspan class=\"nx\"\u003ehandle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eperform\u003c/span\u003e\u003cspan class=\"cm\"\u003e/* invocation */\u003c/span\u003e \u003cspan class=\"nx\"\u003eFoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n       \u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003eFoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e//==\u0026gt; prints `19`\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eうそうそシンタックスですが大丈夫ですか?\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eFoo\u003c/code\u003eという名前の\u003ccode\u003eint -\u0026gt; int\u003c/code\u003eというシグネチャを持つエフェクトを定義します｡JSは型がないので雰囲気出ないですが､一般にエフェクトは名前とシグネチャ(型)を持ちます｡\u003c/p\u003e\n\n\u003cp\u003eエフェクトの発生は\u003ccode\u003eperform エフェクト(引数...)\u003c/code\u003eというシンタックスです｡エフェクトの引数の型は､シグネチャの矢印\u003ccode\u003e-\u0026gt;\u003c/code\u003eの左辺に対応します｡ここでは\u003ccode\u003eint\u003c/code\u003eの引数に\u003ccode\u003e3\u003c/code\u003eを渡してるので､確かに型は一致します｡\u003c/p\u003e\n\n\u003cp\u003eハンドラは\u003ccode\u003ehandle(exp){ case エフェクト(仮引数), 継続: {...}... }\u003c/code\u003eという感じ｡\u003ccode\u003eexp\u003c/code\u003e内で発生したエフェクトをハンドルします｡\u003cbr\u003e\n例では\u003ccode\u003eFoo\u003c/code\u003eエフェクトが発生したので､\u003ccode\u003ecase Foo(x), k: ...\u003c/code\u003eという部分でキャッチされます｡\u003ccode\u003ex\u003c/code\u003eに\u003ccode\u003e3\u003c/code\u003eが渡されそうですが､\u003ccode\u003ek\u003c/code\u003eとは一体…?\u003cbr\u003e\nここがalgebraic effectsのミソで､\u003ccode\u003ek\u003c/code\u003eには\u003cstrong\u003e\u003cem\u003e継続\u003c/em\u003e\u003c/strong\u003eが渡されます｡出､出〜www継続奴という感じですがJSerの皆さんにはおなじみのはずです｡継続とは\"\u003cem\u003e残りの計算\u003c/em\u003e \"であり､Promiseで\u003ccode\u003ethen\u003c/code\u003eに渡してる関数はまさに継続といって差し支えありません｡具体的に\u003ccode\u003ek\u003c/code\u003eに入るものは､この場合\u003ccode\u003e(h) =\u0026gt; console.log(h + 10)\u003c/code\u003eとなります｡なるほど確かに残りの計算だ｡\u003cbr\u003e\nしたがって､このハンドラによって\u003ccode\u003econsole.log(perform Foo(3) + 10)\u003c/code\u003eは\u003ccode\u003econsole.log(3 * 3 + 10)\u003c/code\u003eとなります｡\u003cbr\u003e\n限定継続が分かる方は､この\u003ccode\u003ehandle(exp){...}\u003c/code\u003eが継続のdelimiterといえばイメージが湧くかと思います｡限定継続に関して一筆したためているので､詳細は\u003ca href=\"https://nymphium.github.io/2018/07/19/delimited-continuation%E3%81%AE%E5%A4%8F.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eこちら\u003c/a\u003eをご覧ください｡\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ecase x: x;\u003c/code\u003eは何やねんということですが､これはvalue handlerと呼ばれる部分です｡今回は\u003ccode\u003econsole.log\u003c/code\u003eの戻り値が\u003ccode\u003evoid\u003c/code\u003eなので雰囲気出ませんが､\u003ccode\u003eexp\u003c/code\u003e部分が値になるまで評価されきったあとに､その値をハンドルする部分です｡value handlerはエフェクトのハンドル部分と異なり継続を取りません｡\u003c/p\u003e\n\n\u003cp\u003eかなり雰囲気はつかめたんじゃないでしょうか｡\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"特徴\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%89%B9%E5%BE%B4\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e特徴\u003c/h1\u003e\n\n\u003cp\u003ealgebraic effectsの特徴としては､\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eエフェクトの抽象化, 実装の分離\u003c/li\u003e\n\u003cli\u003eコントロール操作\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eが挙げられる｡\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"エフェクトの抽象化実装の分離\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E6%8A%BD%E8%B1%A1%E5%8C%96%E5%AE%9F%E8%A3%85%E3%81%AE%E5%88%86%E9%9B%A2\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eエフェクトの抽象化､実装の分離\u003c/h2\u003e\n\n\u003cp\u003eエフェクトの抽象化はまさにalgebraic effectsのやりたいことである｡エフェクトの抽象化は即ちインタフェースと実装を分離することになる｡\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nx\"\u003eeffect\u003c/span\u003e \u003cspan class=\"nx\"\u003eWrite\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* : string -\u0026gt; void */\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// 標準出力に書き込む\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprint_handler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ehandle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e()){\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"na\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003eWrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"na\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// ファイルに書き込む\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ewrite_file_handler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ehandle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e()){\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"na\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003eWrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"na\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003efs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ewriteFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\n\u003cspan class=\"nx\"\u003eprint_handler\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eperform\u003c/span\u003e \u003cspan class=\"nx\"\u003eWrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eperform\u003c/span\u003e \u003cspan class=\"nx\"\u003eWrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWorld\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// ==\u0026gt; prints `Hello\\nWorld`\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ewrite_file_handler\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ehoge.txt\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eperform\u003c/span\u003e \u003cspan class=\"nx\"\u003eWrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eperform\u003c/span\u003e \u003cspan class=\"nx\"\u003eWrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWorld\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// ==\u0026gt; write \"Hello\" and \"World\" to hoge.txt\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eなるほどね｡\u003c/p\u003e\n\n\u003cp\u003eハンドラの変更がそのまま実装の差し替えになる｡例えばDI注入にも使えるのではないだろうか｡\u003cbr\u003e\n例えばなにかの顧客DBを取ってくるエフェクト\u003ccode\u003eGetAccountList\u003c/code\u003eを考えてみる｡\u003ccode\u003efilter\u003c/code\u003eは述語\u003ccode\u003ep\u003c/code\u003eを取ってDBをフィルタする関数であり､内部で\u003ccode\u003eGetAccountList\u003c/code\u003eエフェクトを発生している｡\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nx\"\u003eeffect\u003c/span\u003e \u003cspan class=\"nx\"\u003eGetAccountList\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* : void -\u0026gt; DB */\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efilter\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elist\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eperform\u003c/span\u003e \u003cspan class=\"nx\"\u003eGetAccountList\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e例えばテスト用DBのためのハンドラは\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etest_handler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ehandle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e()){\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"na\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003eGetAccountList\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"na\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edb_for_test\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eまた本番のDBを返すハンドラは\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eproduction_handler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ehandle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e()){\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"na\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003eGetAccountList\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"na\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edb_for_production\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eあとは実際に\u003ccode\u003efilter\u003c/code\u003e関数を使うシチュエーションごとにハンドラを変えればいい｡\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etest_main\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e......\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efiltered_accounts\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e......\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etest_handler\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etest_main\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ハンドラの合成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%8F%E3%83%B3%E3%83%89%E3%83%A9%E3%81%AE%E5%90%88%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eハンドラの合成\u003c/h2\u003e\n\n\u003cp\u003eエフェクトハンドラは例外ハンドラと同様に､unhandledなエフェクトはより上位のハンドラに捕捉されます(あるいはされずにランタイムエラー)｡この性質を利用することでハンドラを合成することができます｡\u003cbr\u003e\n先程の\u003ccode\u003eWrite\u003c/code\u003eを引っ張ってみます｡\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nx\"\u003eeffect\u003c/span\u003e \u003cspan class=\"nx\"\u003eWrite\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* : string -\u0026gt; void */\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// 標準出力に書き込む\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprint_handler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ehandle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e()){\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"na\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003eWrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"na\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// ファイルに書き込む\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ewrite_file_handler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ehandle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e()){\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"na\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003eWrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"na\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003efs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ewriteFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003eWrite\u003c/code\u003eがあるなら\u003ccode\u003eRead\u003c/code\u003eもしたいのが人間の性です｡\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nx\"\u003eeffect\u003c/span\u003e \u003cspan class=\"nx\"\u003eRead\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* : void -\u0026gt; string */\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eそしてやるだけ｡\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003escan_handler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ehandle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e()){\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"na\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003eRead\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"na\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ereadline\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003escan_file_handler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ehandle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e()){\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"na\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003eRead\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"na\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003ereadFileAsync\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e標準入出力とファイルの入出力をごっちゃにするシーンはあまり多くないので1つのハンドラにしたいと思います｡せっかくハンドラをそれぞれ書いたのでこれを使ってみます｡\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003estdio_handler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eprint_handler\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003escan_handler\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efileio_handler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ewrite_file_handler\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003escan_file_handler\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eオッええやん｡\u003ccode\u003estdio_handler\u003c/code\u003eの受け取るサンクの中で\u003ccode\u003eWrite\u003c/code\u003eが発生した場合､\u003ccode\u003escan_handler\u003c/code\u003eを突き抜けて\u003ccode\u003eprint_handler\u003c/code\u003eによりハンドルされます｡これが合成だ､花京院｡\u003cbr\u003e\nもちろんいちどきに一つのハンドラも実装できます｡\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003estdio\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ehandle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eth\u003c/span\u003e\u003cspan class=\"p\"\u003e()){\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"na\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003eWrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"na\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003eRead\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"na\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ereadline\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// fileも同様に(略)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eまた､同じエフェクトのハンドラをネストすることで､\u003cem\u003e部分的に実装を変える\u003c/em\u003eことができる｡\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nx\"\u003efileio_handler\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eperform\u003c/span\u003e \u003cspan class=\"nx\"\u003eWrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ehoge\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// fileに\"hoge\"を書き込む\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eperform\u003c/span\u003e \u003cspan class=\"nx\"\u003eRead\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// fileから読む\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eprint_handler\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eperform\u003c/span\u003e \u003cspan class=\"nx\"\u003eWrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// *標準出力に*書き込む\u003c/span\u003e\n\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e同じ\u003ccode\u003eWrite\u003c/code\u003eを\u003ccode\u003efileio_handler\u003c/code\u003e内で発生させているが､2つ目の\u003ccode\u003eWrite\u003c/code\u003eはさらに\u003ccode\u003eprint_handler\u003c/code\u003eに包んで発生させている｡このエフェクトの発生を最初に捕捉するハンドラは\u003ccode\u003eprint_handler\u003c/code\u003eになるため､\u003ccode\u003estr\u003c/code\u003eはファイルではなく標準出力に書き込まれる｡\u003c/p\u003e\n\n\u003cp\u003eちなみに､サンク1行目の\u003ccode\u003eWrite\u003c/code\u003eがハンドラによって捕捉されるので､2行目以降はハンドラ内の継続として実行されます｡2行目の\u003ccode\u003eRead\u003c/code\u003eもしっかり\u003ccode\u003efileio_handler\u003c/code\u003eにより捕捉されるが､これはつまり継続も\u003ccode\u003efileio_handler\u003c/code\u003eによりハンドルされていることになる｡このように継続も追随してハンドルしてくれるハンドラをdeep handler､明示的に継続をハンドルしないといけないハンドラはshallow handlerと呼ばれる｡deep handlerのほうが一般的だが､shallow handlerのほうが動作が軽量(のはず)である｡\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"コントロール操作\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%AB%E6%93%8D%E4%BD%9C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eコントロール操作\u003c/h2\u003e\n\n\u003cp\u003e継続を取ってこれるのが例外処理と決定的に異なる｡このおかげで例外の発生から復帰することができる\u003csup id=\"fnref2\"\u003e\u003ca href=\"#fn2\" rel=\"footnote\" title='Dolan, Stephen, et al. \"Concurrent system programming with effect handlers.\" International Symposium on Trends in Functional Programming. Springer, Cham, 2017.'\u003e2\u003c/a\u003e\u003c/sup\u003e｡\u003cbr\u003e\nまた継続はハンドラ側でよしなにしてくれるので､記述自体は直接形式で記述できる｡このためcallback hellが解消される｡例えば\u003ccode\u003escan_file_handler\u003c/code\u003e関数はまさにコールバックを取る関数をラップすることで直接形式にしている｡\u003c/p\u003e\n\n\u003cp\u003e簡単のため､ファイル名と文字列を受け取るエフェクト\u003ccode\u003eWriteToFile\u003c/code\u003eを定義して様子を見る｡\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nx\"\u003eeffect\u003c/span\u003e \u003cspan class=\"nx\"\u003eWriteToFile\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* : (string, string) -\u0026gt; void */\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ehandle\u003c/span\u003e\u003cspan class=\"p\"\u003e((()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e......\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eperform\u003c/span\u003e \u003cspan class=\"nx\"\u003eWriteToFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ehogehoge\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e......\u003c/span\u003e\n\u003cspan class=\"p\"\u003e})()){\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003eWriteToFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ewriteFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eなるほど確かに､ファイルに書き込んで残りの処理はコールバックにやらせる\u003ccode\u003ewriteFile\u003c/code\u003eをラップして､見かけ上は直接形式で記述することに成功している｡\u003c/p\u003e\n\n\u003cp\u003e継続が取ってこれるので､\u003csup id=\"fnref2\"\u003e\u003ca href=\"#fn2\" rel=\"footnote\" title='Dolan, Stephen, et al. \"Concurrent system programming with effect handlers.\" International Symposium on Trends in Functional Programming. Springer, Cham, 2017.'\u003e2\u003c/a\u003e\u003c/sup\u003eにあるように､\u003cstrong\u003e\u003cem\u003easync/awaitをalgebraic effectsで実装することができる\u003c/em\u003e\u003c/strong\u003e!!\u003cbr\u003e\nこれはコントロールオペレータのヒエラルキーとしてalgebraic effectsがasync/awaitと等価､またはそれ以上の表現力であることを示唆しています｡\u003cbr\u003e\n実際algebraic effectsはあるがasync/awaitのない言語ではうれしい…のかもしれません｡\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"algebraic-effectsのある言語や実装\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#algebraic-effects%E3%81%AE%E3%81%82%E3%82%8B%E8%A8%80%E8%AA%9E%E3%82%84%E5%AE%9F%E8%A3%85\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eAlgebraic Effectsのある言語や実装\u003c/h1\u003e\n\n\u003cp\u003ealgebraic effectsにはいくつか実装が存在する｡たとえば言語機能にalgebraic effectsを組み込んだ言語､あるいはライブラリ｡フレームワークを自称しつつ実際は言語を拡張しているReactなど｡\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eEff\u003c/p\u003e\n\n\u003cp\u003ealgebraic effectsの計算モデルとしてよく使われる言語｡MLスタイルのシンタックスでHindley-Milner型推論がある｡\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/matijapretnar/eff\" rel=\"nofollow noopener\" target=\"_blank\"\u003ematijapretnar/eff\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eOCaml製Effインタプリタ｡エフェクトが単相なのが惜しい以外はopamで簡単に導入できてシンタックスもOCamlに毛が生えた感じで様々な面でコストが低い｡\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/atnos-org/eff\" rel=\"nofollow noopener\" target=\"_blank\"\u003eatnos-org/eff\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eScalaのDSL実装\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e『Eff Directly in OCaml』\u003csup id=\"fnref3\"\u003e\u003ca href=\"#fn3\" rel=\"footnote\" title='Oleg Kiselyov, K. C. Sivaramakrishnan. \"Eff directly in OCaml.\" ML Workshop. 2016.'\u003e3\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\n\u003cp\u003eOCaml+delimccライブラリによるEffの実装｡shift/resetとalgebraic effectsの関係が分かる｡\u003cbr\u003e\nこの論文を元に､\u003ca href=\"https://gist.github.com/Nymphium/60d4e2b5888f3e04b9b98c562854f143\" rel=\"nofollow noopener\" target=\"_blank\"\u003eRacketによる実装\u003c/a\u003eをおこなってみた｡\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eKoka\u003csup id=\"fnref4\"\u003e\u003ca href=\"#fn4\" rel=\"footnote\" title='Leijen, Daan. \"Algebraic Effects for Functional Programming. Technical Report.\" 15 pages. https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming, 2016.'\u003e4\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\n\u003cp\u003eMicrosoft Researchが作っている言語｡エフェクトの型が明示されておりモナドみがある｡\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/koka-lang/koka\" rel=\"nofollow noopener\" target=\"_blank\"\u003ekoka-lang/koka\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eHaskell製｡ランタイムにJSまたはC#にコンパイルされて実行される｡\u003cbr\u003e\nstackによるビルドをできるようにしたのでぜひ使ってください｡\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMulticore OCaml\u003c/p\u003e\n\n\u003cp\u003eOCamlにalgebraic effectsをぶっこんだOCaml方言｡継続がワンショットなことが特徴となっている｡\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ocamllabs/ocaml-multicore\" rel=\"nofollow noopener\" target=\"_blank\"\u003eocamllabs/ocaml-multicore\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eOCaml labsが\u003ca href=\"https://github.com/ocaml/ocaml\" rel=\"nofollow noopener\" target=\"_blank\"\u003eocaml/ocaml\u003c/a\u003eからフォークしているOCaml方言｡\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e他にもC言語による実装\u003csup id=\"fnref5\"\u003e\u003ca href=\"#fn5\" rel=\"footnote\" title='Leijen, Daan. \"Implementing Algebraic Effects in C.\" Asian Symposium on Programming Languages and Systems. Springer, Cham, 2017.'\u003e5\u003c/a\u003e\u003c/sup\u003eなどがあり､確かにコールスタックなどをバコッといければなんとかなりそう｡\u003c/p\u003e\n\n\n\n\u003cdiv class=\"footnotes\"\u003e\n\u003chr\u003e\n\u003col\u003e\n\n\u003cli id=\"fn1\"\u003e\n\u003cp\u003ePretnar, Matija. \"An introduction to algebraic effects and handlers. invited tutorial paper.\" Electronic Notes in Theoretical Computer Science 319 (2015): 19-35. \u003ca href=\"#fnref1\"\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003cli id=\"fn2\"\u003e\n\u003cp\u003eDolan, Stephen, et al. \"Concurrent system programming with effect handlers.\" International Symposium on Trends in Functional Programming. Springer, Cham, 2017. \u003ca href=\"#fnref2\"\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003cli id=\"fn3\"\u003e\n\u003cp\u003eOleg Kiselyov, K. C. Sivaramakrishnan. \"Eff directly in OCaml.\" ML Workshop. 2016. \u003ca href=\"#fnref3\"\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003cli id=\"fn4\"\u003e\n\u003cp\u003eLeijen, Daan. \"Algebraic Effects for Functional Programming. Technical Report.\" 15 pages. \u003ca href=\"https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming\u003c/a\u003e, 2016. \u003ca href=\"#fnref4\"\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003cli id=\"fn5\"\u003e\n\u003cp\u003eLeijen, Daan. \"Implementing Algebraic Effects in C.\" Asian Symposium on Programming Languages and Systems. Springer, Cham, 2017. \u003ca href=\"#fnref5\"\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003c/ol\u003e\n\u003c/div\u003e\n","createdAt":"2018-10-30T13:48:01Z","elapsedYearsFromUpdatedAt":1,"isBanned":false,"isDeprecated":true,"isDestroyableByViewer":false,"isEditRequestSendableByViewer":true,"isLikableByViewer":true,"isLikedByViewer":false,"isPublic":true,"isSlide":false,"isStockableByViewer":true,"isStockedByViewer":false,"isUpdatableByViewer":false,"isSubscribableByViewer":false,"isSubscribedByViewer":false,"isUpdated":true,"likesCount":174,"originalId":715525,"title":"Algebraic Effectsとは? 出身は? 使い方は? その特徴とは? 調べてみました!","toc":"\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"#%E3%82%A4%E3%83%B3%E3%83%88%E3%83%AD\"\u003eイントロ\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#%E7%89%B9%E5%BE%B4\"\u003e特徴\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"#%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E6%8A%BD%E8%B1%A1%E5%8C%96%E5%AE%9F%E8%A3%85%E3%81%AE%E5%88%86%E9%9B%A2\"\u003eエフェクトの抽象化､実装の分離\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#%E3%83%8F%E3%83%B3%E3%83%89%E3%83%A9%E3%81%AE%E5%90%88%E6%88%90\"\u003eハンドラの合成\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%AB%E6%93%8D%E4%BD%9C\"\u003eコントロール操作\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#algebraic-effects%E3%81%AE%E3%81%82%E3%82%8B%E8%A8%80%E8%AA%9E%E3%82%84%E5%AE%9F%E8%A3%85\"\u003eAlgebraic Effectsのある言語や実装\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n","totalPv":14129,"updatedAt":"2019-02-12T13:39:11Z","uuid":"e6ce580da8b87ded912b","banReason":null,"adventCalendarItem":null,"author":{"originalId":57887,"description":"面白いプログラム言語の機能や面白いプログラム言語の機能以外について話します｡","name":"Satoru Kawahara","profileImageUrl":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F57887%2Fprofile-images%2F1577735211?ixlib=rb-1.2.2\u0026auto=compress%2Cformat\u0026lossless=0\u0026w=48\u0026s=184806368efe8489758b9f56435409b1","profileImageUrlW48":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F57887%2Fprofile-images%2F1577735211?ixlib=rb-1.2.2\u0026auto=compress%2Cformat\u0026lossless=0\u0026w=48\u0026s=184806368efe8489758b9f56435409b1","profileImageUrlW75":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F57887%2Fprofile-images%2F1577735211?ixlib=rb-1.2.2\u0026auto=compress%2Cformat\u0026lossless=0\u0026w=75\u0026s=a98ebb6786c901ac7dbc9b697f8c1d64","urlName":"Nymphium","isFollowedByViewer":false,"isFollowableByViewer":true,"websiteUrl":"https://nymphium.github.io","organizations":{"edges":[{"node":{"name":"株式会社HERP","logoUrl":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/fc7984e3b37782b7a5c55a95734433c52d07bfcb/original.jpg?1552547854","urlName":"herp","description":"現場社員主導の採用活動である『スクラム採用』を実現する採用管理プラットフォーム「HERP ATS」を開発・運営しています。","url":"https://herp.co.jp"}}]}},"tags":[{"name":"JavaScript","urlName":"javascript"},{"name":"algebra","urlName":"algebra"},{"name":"algebraic-effects","urlName":"algebraic-effects"}],"followingLikers":{"edges":[]},"comments":{"totalCount":3}},"viewer":null,"analyticsTrackingId":null}</script>
      
<footer id="globalFooter" class="st-Footer"><div class="st-Footer_container"><div class="st-Footer_start"><div class="st-Footer_logo"><svg viewbox="0 0 426.57 130" xmlns="http://www.w3.org/2000/svg"><circle cx="167.08" cy="21.4" r="12.28" /><path d="M250.81 29.66h23.48v18.9h-23.48z" /><path d="M300.76 105.26a22.23 22.23 0 01-6.26-.86 12.68 12.68 0 01-5.17-3 14.41 14.41 0 01-3.56-5.76 28 28 0 01-1.3-9.22V48.56h29.61v-18.9h-29.52V3.29h-20.17v83.34q0 11.16 2.83 18.27a27.71 27.71 0 007.7 11.2 26.86 26.86 0 0011.43 5.62 47.56 47.56 0 0012.34 1.53h15.16v-18zM0 61.7a58.6 58.6 0 015-24.21A62.26 62.26 0 0118.73 17.9 63.72 63.72 0 0139 4.78 64.93 64.93 0 0164 0a65 65 0 0124.85 4.78 64.24 64.24 0 0120.38 13.12A62 62 0 01123 37.49a58.6 58.6 0 015 24.21 58.34 58.34 0 01-4 21.46 62.8 62.8 0 01-10.91 18.16l11.1 11.1a10.3 10.3 0 010 14.52 10.29 10.29 0 01-14.64 0l-12.22-12.41a65 65 0 01-15.78 6.65 66.32 66.32 0 01-17.55 2.3 64.63 64.63 0 01-45.23-18A62.82 62.82 0 015 85.81 58.3 58.3 0 010 61.7zm21.64.08a43.13 43.13 0 0012.42 30.63 42.23 42.23 0 0013.43 9.09A41.31 41.31 0 0064 104.8a42 42 0 0030-12.39 42.37 42.37 0 009-13.64 43.43 43.43 0 003.3-17 43.77 43.77 0 00-3.3-17A41.7 41.7 0 0080.55 22 41.78 41.78 0 0064 18.68 41.31 41.31 0 0047.49 22a42.37 42.37 0 00-13.43 9.08 43.37 43.37 0 00-12.42 30.7zM331.89 78a47.59 47.59 0 013.3-17.73 43.22 43.22 0 019.34-14.47A44.25 44.25 0 01359 36a47.82 47.82 0 0118.81-3.58 42.72 42.72 0 019.26 1 46.5 46.5 0 018.22 2.58 40 40 0 017 3.84 44.39 44.39 0 015.71 4.63l1.22-9.47h17.35v85.83h-17.35l-1.17-9.42a42.54 42.54 0 01-5.84 4.67 43.11 43.11 0 01-7 3.79 44.86 44.86 0 01-8.17 2.59 43 43 0 01-9.22 1A47.94 47.94 0 01359 119.9a43.3 43.3 0 01-14.47-9.71 44.17 44.17 0 01-9.34-14.47 47 47 0 01-3.3-17.72zm20.27-.08a29.16 29.16 0 002.17 11.34 27 27 0 005.92 8.88 26.69 26.69 0 008.76 5.76 29.19 29.19 0 0021.44 0 26.11 26.11 0 008.72-5.76 27.57 27.57 0 005.88-8.84 29 29 0 002.16-11.38 28.62 28.62 0 00-2.16-11.22 26.57 26.57 0 00-5.93-8.8 27.68 27.68 0 00-19.51-7.9 28.29 28.29 0 00-10.77 2.05 26.19 26.19 0 00-8.71 5.75 27.08 27.08 0 00-5.84 8.8 28.94 28.94 0 00-2.13 11.31zm-194.97-30.5h19.78v73.54h-19.78zm49.25 0h19.78v73.54h-19.78z" /><circle cx="216.33" cy="21.4" r="12.28" /></svg></div><div class="st-Footer_catchcopy">How developers code is here.</div><div class="st-Footer_socials"><a class="fa fa-twitter" href="https://twitter.com/qiita"></a><a class="fa fa-facebook-square" href="https://www.facebook.com/qiita/"></a></div></div><div class="st-Footer_end"><div class="st-Footer_qiita"><div class="st-Footer_label">Qiita</div><div class="st-Footer_list"><div class="st-Footer_column"><a href="/about">About</a><a href="/terms">Terms</a><a href="/privacy">Privacy</a><a target="_blank" href="http://help.qiita.com/ja/articles/qiita-community-guideline">Guideline</a></div><div class="st-Footer_column"><a href="/api/v2/docs">API</a><a href="/feedback/new">ご意見</a><a href="https://help.qiita.com">Help</a><a target="_blank" href="https://qiita.com/ads?utm_source=qiita&amp;utm_medium=referral&amp;utm_content=footer">Advertisement</a></div></div></div><div class="st-Footer_increments"><div class="st-Footer_label">Increments</div><div class="st-Footer_list"><div class="st-Footer_column"><a href="https://increments.co.jp/company/">About</a><a href="https://increments.co.jp/jobs/">採用情報</a><a href="https://blog.qiita.com">Blog</a></div><div class="st-Footer_column"><a href="https://teams.qiita.com/">Qiita Team</a><a href="https://jobs.qiita.com?utm_source=qiita&amp;utm_medium=referral&amp;utm_content=footer">Qiita Jobs</a><a href="https://zine.qiita.com?utm_source=qiita&amp;utm_medium=referral&amp;utm_content=footer">Qiita Zine</a></div></div></div></div></div><div class="st-Footer_copyright">© 2011-2020 Increments Inc.</div></footer><div class="p-messages"><div id="Snackbar-react-component-7d0aef14-8325-4a4b-91ca-e5adb73632aa"><div class="msg-Container"><div class="msg-Item msg-Item- msg-Item-dismissible" style="visibility:hidden;opacity:0;transition:visibility 0ms 50ms, opacity 50ms linear"><div class="msg-Item_body"></div><button class="msg-Item_dismiss"><span class="fa fa-close"></span></button></div></div></div>
      <script type="application/json" class="js-react-on-rails-component" data-component-name="Snackbar" data-dom-id="Snackbar-react-component-7d0aef14-8325-4a4b-91ca-e5adb73632aa">{}</script>
      
</div><div id="LoginModal-react-component-dc8340bf-b7ff-4f67-bed1-679e5dd45dab"><div class="st-Modal"><div class="st-Modal_backdrop"></div><div class="st-Modal_body lm-Dialog"><div class="fa fa-times lm-Dialog_close"></div><div class="lm-Dialog_title">Why do not you register as a user and use Qiita more conveniently?</div><div class="lm-Dialog_message-pc">You need to log in to use this function. Qiita can be used more conveniently after logging in.</div><div class="lm-Dialog_message-mobile">You seem to be reading articles frequently this month. Qiita can be used more conveniently after logging in.</div><ol class="lm-Dialog_list"><li>We will deliver articles that match you<div class="description">By following users and tags, you can catch up information on technical fields that you are interested in as a whole</div></li><li>you can read useful information later efficiently<div class="description">By &quot;stocking&quot; the articles you like, you can search right away</div></li></ol><a href="/signup?callback_action=login_or_signup&amp;redirect_to=%2FNymphium%2Fitems%2Fe6ce580da8b87ded912b&amp;realm=qiita" class="lm-Dialog_button lm-Dialog_button-signup">Sign up</a><a href="/login?callback_action=login_or_signup&amp;redirect_to=%2FNymphium%2Fitems%2Fe6ce580da8b87ded912b&amp;realm=qiita" class="lm-Dialog_button lm-Dialog_button-signin">Login</a></div></div></div>
      <script type="application/json" class="js-react-on-rails-component" data-component-name="LoginModal" data-dom-id="LoginModal-react-component-dc8340bf-b7ff-4f67-bed1-679e5dd45dab">{}</script>
      
<div id="UserHoverCard-react-component-ce1b1da6-c22e-4dd9-8153-a7a5840b4997"><div class="uh-Container" style="left:0px;top:0px"><div>ユーザーは見つかりませんでした</div></div></div>
      <script type="application/json" class="js-react-on-rails-component" data-component-name="UserHoverCard" data-dom-id="UserHoverCard-react-component-ce1b1da6-c22e-4dd9-8153-a7a5840b4997">{}</script>
      
</div><div id="dataContainer" style="display: none;" data-config="{&quot;actionPath&quot;:&quot;public/items#show&quot;,&quot;settings&quot;:{&quot;analyticsTrackingId&quot;:&quot;UA-24675221-12&quot;,&quot;mixpanelToken&quot;:&quot;17d24b448ca579c365d2d1057f3a1791&quot;,&quot;assetsMap&quot;:{},&quot;csrfToken&quot;:&quot;yXQQkjdOKta5cl0+DyRTfg3JDispGAWD4/pNl1JbLualr4E/73uhCzRE4ESdBPYC5y0rqbsDVv3+uxi3R9A/7w==&quot;,&quot;locale&quot;:&quot;en&quot;},&quot;currentUser&quot;:null}" /></body></html><script type="application/json" data-js-react-on-rails-store="AppStore">{"snackbar":{"type":"","body":"","isActive":false}}</script>