<!DOCTYPE html>
<html
  lang="ja"

data-admin-domain="//blog.hatena.ne.jp"
data-author="bleis-tift"
data-avail-langs="ja en"
data-blog="bleis-tift.hatenablog.com"
data-blog-host="bleis-tift.hatenablog.com"
data-blog-is-public="1"
data-blog-name="ぐるぐる～"
data-blog-owner="bleis-tift"
data-blog-uri="http://bleis-tift.hatenablog.com/"
data-blog-uuid="12704346814673882987"
data-blogs-uri-base="http://bleis-tift.hatenablog.com"
data-brand="hatenablog"
data-data-layer="{&quot;hatenablog&quot;:{&quot;permalink_entry&quot;:{&quot;uri&quot;:&quot;http://bleis-tift.hatenablog.com/entry/go-the-bad-parts&quot;,&quot;author_name&quot;:&quot;bleis-tift&quot;,&quot;hour&quot;:&quot;13&quot;,&quot;categories&quot;:&quot;Go&quot;,&quot;date&quot;:&quot;2018-11-08&quot;,&quot;title&quot;:&quot;Go\u8a00\u8a9e\u306e\u30a4\u30b1\u3066\u306a\u3044\u90e8\u5206&quot;},&quot;brand_tracking_category&quot;:&quot;hatenablog&quot;,&quot;page_id&quot;:&quot;entry&quot;,&quot;admin&quot;:{},&quot;brand&quot;:&quot;hatenablog&quot;,&quot;router_type&quot;:&quot;blogs&quot;,&quot;blog&quot;:{&quot;enable_keyword_link&quot;:&quot;true&quot;,&quot;disable_ads&quot;:&quot;&quot;,&quot;is_sleeping&quot;:&quot;false&quot;,&quot;entry_show_footer_related_entries&quot;:&quot;true&quot;,&quot;is_responsive_view&quot;:&quot;false&quot;,&quot;force_pc_view&quot;:&quot;false&quot;,&quot;owner_name&quot;:&quot;bleis-tift&quot;,&quot;lang&quot;:&quot;ja&quot;,&quot;uri&quot;:&quot;http://bleis-tift.hatenablog.com/&quot;,&quot;enable_ads&quot;:&quot;true&quot;,&quot;name&quot;:&quot;\u3050\u308b\u3050\u308b\uff5e&quot;,&quot;content_seems_japanese&quot;:&quot;true&quot;,&quot;is_public&quot;:&quot;true&quot;},&quot;pro&quot;:&quot;free&quot;,&quot;analytics&quot;:{&quot;separated_property_id&quot;:&quot;UA-29716941-18&quot;,&quot;property_id&quot;:&quot;UA-490809-3&quot;,&quot;non_sampling_property_id&quot;:&quot;&quot;,&quot;brand_property_id&quot;:&quot;&quot;}}}"
data-device="pc"
data-dont-recommend-pro="false"
data-global-domain="https://hatenablog.com"
data-globalheader-color="b"
data-globalheader-type="pc"
data-has-touch-view="1"
data-page="entry"
data-parts-domain="https://hatenablog-parts.com"
data-plus-available=""
data-pro="false"
data-router-type="blogs"
data-sentry-dsn="https://03a33e4781a24cf2885099fed222b56d@sentry.io/1195218"
data-sentry-sample-rate="0.1"
data-static-domain="https://cdn.blog.st-hatena.com"
data-version="3af713039e1616fddee277147499aa54"

itemscope
itemtype="http://schema.org/Article"

  data-initial-state="{}"

  >
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article: http://ogp.me/ns/article#">
  

  



  


  <meta charset="utf-8"/>
  <meta http-equiv="X-UA-Compatible" content="IE=7; IE=9; IE=10; IE=11" />
  <title>Go言語のイケてない部分 - ぐるぐる～</title>

  
  <link rel="canonical" href="http://bleis-tift.hatenablog.com/entry/go-the-bad-parts"/>



  
  

<meta itemprop="name" content="Go言語のイケてない部分 - ぐるぐる～"/>

  <meta itemprop="image" content="https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"/>


  <meta property="og:title" content="Go言語のイケてない部分 - ぐるぐる～"/>
<meta property="og:type" content="article"/>
  <meta property="og:url" content="http://bleis-tift.hatenablog.com/entry/go-the-bad-parts"/>

  
  
  
  <meta property="og:image" content="https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"/>

    <meta property="og:description" content="最近色々あって仕事でGo言語を使っています。 色々割り切っている言語なので、こんなこと言ってもしゃーないんですが、言語設計はミスってるんじゃなかなぁ、と思わざるを得ない点が多々あります。 使い始めて1か月くらいなので間違ったことを書いているかもしれませんので、何かあれば指摘していただけるとありがたいです。 本文ではネガばかり羅列していますが、ランタイムとツール周りは気に入っています。 Goのランタイムを使う、もっと洗練されたAlt Go的なものがあるといいのに(もしくはジェネリクスのったGo2を早くリリースしてほしい)、と思う日々です。 追記: なんか意図とは違った受け取られ方をしている方もい…" />
<meta property="og:site_name" content="ぐるぐる～"/>

  <meta property="article:published_time" content="1541649600" />

    <meta property="article:tag" content="Go" />
      <meta name="twitter:card"  content="summary" />  <meta name="twitter:title" content="Go言語のイケてない部分 - ぐるぐる～" />    <meta name="twitter:description" content="最近色々あって仕事でGo言語を使っています。 色々割り切っている言語なので、こんなこと言ってもしゃーないんですが、言語設計はミスってるんじゃなかなぁ、と思わざるを得ない点が多々あります。 使い始めて1か月くらいなので間違ったことを書いているかもしれませんので、何かあれば指摘していただけるとありがたいです。 本文ではネガ…" />  <meta name="twitter:app:name:iphone" content="はてなブログアプリ" />
  <meta name="twitter:app:id:iphone" content="583299321" />
  <meta name="twitter:app:url:iphone" content="hatenablog:///open?uri=http%3A%2F%2Fbleis-tift.hatenablog.com%2Fentry%2Fgo-the-bad-parts" />  <meta name="twitter:site" content="@bleis" />
  
    <meta name="description" content="最近色々あって仕事でGo言語を使っています。 色々割り切っている言語なので、こんなこと言ってもしゃーないんですが、言語設計はミスってるんじゃなかなぁ、と思わざるを得ない点が多々あります。 使い始めて1か月くらいなので間違ったことを書いているかもしれませんので、何かあれば指摘していただけるとありがたいです。 本文ではネガばかり羅列していますが、ランタイムとツール周りは気に入っています。 Goのランタイムを使う、もっと洗練されたAlt Go的なものがあるといいのに(もしくはジェネリクスのったGo2を早くリリースしてほしい)、と思う日々です。 追記: なんか意図とは違った受け取られ方をしている方もい…" />


  
<script
  id="embed-gtm-data-layer-loader"
  data-data-layer-page-specific="{&quot;hatenablog&quot;:{&quot;blogs_permalink&quot;:{&quot;entry_afc_issued&quot;:&quot;false&quot;,&quot;blog_hide_afc_field&quot;:&quot;false&quot;,&quot;has_related_entries_with_elasticsearch&quot;:&quot;true&quot;,&quot;is_blog_sleeping&quot;:&quot;false&quot;,&quot;blog_struct_hide_afc&quot;:&quot;false&quot;,&quot;is_author_pro&quot;:&quot;false&quot;,&quot;blog_afc_issued&quot;:&quot;false&quot;,&quot;blog_hide_afc_func&quot;:&quot;false&quot;,&quot;brand_hide_afc&quot;:&quot;false&quot;}}}"
>
(function() {
  function loadDataLayer(elem, attrName) {
    if (!elem) { return {}; }
    var json = elem.getAttribute(attrName);
    if (!json) { return {}; }
    return JSON.parse(json);
  }

  var globalVariables = loadDataLayer(
    document.documentElement,
    'data-data-layer'
  );
  var pageSpecificVariables = loadDataLayer(
    document.getElementById('embed-gtm-data-layer-loader'),
    'data-data-layer-page-specific'
  );

  var variables = [globalVariables, pageSpecificVariables];

  if (!window.dataLayer) {
    window.dataLayer = [];
  }

  for (var i = 0; i < variables.length; i++) {
    window.dataLayer.push(variables[i]);
  }
})();
</script>

<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-P4CXTW');</script>
<!-- End Google Tag Manager -->




  <link rel="shortcut icon" href="https://cdn.blog.st-hatena.com/images/favicon.ico">
<link rel="icon" sizes="192x192" href="https://cdn.blog.st-hatena.com/images/common/meta-icon-global.png">

  
<link rel="alternate" type="application/atom+xml" title="Atom" href="http://bleis-tift.hatenablog.com/feed"/>
<link rel="alternate" type="application/rss+xml" title="RSS2.0" href="http://bleis-tift.hatenablog.com/rss"/>
<link rel="alternate" type="application/json+oembed" href="https://hatenablog.com/oembed?url=http%3A%2F%2Fbleis-tift.hatenablog.com%2Fentry%2Fgo-the-bad-parts&amp;format=json" title="oEmbed Profile of Go言語のイケてない部分"/>
<link rel="alternate" type="text/xml+oembed" href="https://hatenablog.com/oembed?url=http%3A%2F%2Fbleis-tift.hatenablog.com%2Fentry%2Fgo-the-bad-parts&amp;format=xml" title="oEmbed Profile of Go言語のイケてない部分"/>
  
  <link rel="author" href="http://www.hatena.ne.jp/bleis-tift/">

  


  
    <link rel="stylesheet" type="text/css" href="https://cdn.blog.st-hatena.com/css/blog.css?version=ef3efba74fb777cbab54718608ca20e4a896f271&amp;env=production"/>

    
  <link rel="stylesheet" type="text/css" href="//blog.hatena.ne.jp/-/blog_style/12704346814673882987/6180f8240f329b9c16ae9a5e904a9111889300ec"/>
  

  

  
<script> </script>

  
<style>
  div#google_afc_user,
  div.google-afc-user-container,
  div.google_afc_image,
  div.google_afc_blocklink {
      display: block !important;
  }
</style>


  
    <script src="https://cdn.pool.st-hatena.com/valve/valve.js" async></script>
<script id="test-valve-definition">
  var valve = window.valve || [];

  valve.push(function(v) {
    v.config({ service: 'blog' });
    
    

    
    v.defineDFPSlot({"sizes":[[300,250],[336,280],[468,60],"fluid"],"unit":"/4374287/blog_user","slotId":"google_afc_user_container_0","lazy":""});
    

    

    v.sealDFPSlots();
  });
</script>

  

  
</head>

  <body class="page-entry category-Go">
    
    <div id="header-container">
     <div id="sp-suggest" style="display: none;"><a id="sp-suggest-link" href="#">スマートフォン用の表示で見る</a></div>
    </div>

    <div id="globalheader-container"
  data-brand="hatenablog"
  
  
  >
  <iframe id="globalheader" height="37" frameborder="0" allowTransparency="true"></iframe>
</div>


    <div id="container">
      <div id="container-inner">
        <header id="blog-title" data-brand="hatenablog">
  <div id="blog-title-inner" >
    <div id="blog-title-content">
      <h1 id="title"><a href="http://bleis-tift.hatenablog.com/">ぐるぐる～</a></h1>
      
    </div>
  </div>
</header>

        

        

        




<div id="content" class="hfeed"
  
  >
  <div id="content-inner">
    <div id="wrapper">
      <div id="main">
        <div id="main-inner">
          


          
  
  <!-- google_ad_section_start -->
  <!-- rakuten_ad_target_begin -->
  
  
  

  

  
    
      
        <article class="entry hentry js-entry-article date-first autopagerize_page_element chars-9600 words-800 mode-markdown entry-odd" id="entry-10257846132664303551" data-keyword-campaign="" data-uuid="10257846132664303551" data-publication-type="entry">
  <div class="entry-inner">
    <header class="entry-header">
  
    <div class="date entry-date first">
    <a href="http://bleis-tift.hatenablog.com/archive/2018/11/08" rel="nofollow">
      <time pubdate datetime="2018-11-08T04:00:00Z" title="2018-11-08T04:00:00Z">
        <span class="date-year">2018</span><span class="hyphen">-</span><span class="date-month">11</span><span class="hyphen">-</span><span class="date-day">08</span>
      </time>
    </a>
  </div>
  <h1 class="entry-title">
  <a href="http://bleis-tift.hatenablog.com/entry/go-the-bad-parts" class="entry-title-link bookmark">Go言語のイケてない部分</a>
</h1>

  
  

  <div class="entry-categories categories">
    
    <a href="http://bleis-tift.hatenablog.com/archive/category/Go" class="entry-category-link category-Go">Go</a>
    
  </div>


  

  

</header>

    

    <div class="entry-content">
  
    <p>最近色々あって仕事でGo言語を使っています。
色々割り切っている言語なので、こんなこと言ってもしゃーないんですが、言語設計はミスってるんじゃなかなぁ、と思わざるを得ない点が多々あります。
使い始めて1か月くらいなので間違ったことを書いているかもしれませんので、何かあれば指摘していただけるとありがたいです。</p>

<p>本文ではネガばかり羅列していますが、ランタイムとツール周りは気に入っています。
Goのランタイムを使う、もっと洗練されたAlt Go的なものがあるといいのに(もしくは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9">ジェネリクス</a>のったGo2を早くリリースしてほしい)、と思う日々です。</p>

<p>追記:
なんか意図とは違った受け取られ方をしている方もいるので追記します。
この記事はあくまで、「Go言語を学ぶにあたって躓いた点」を列挙し、まとめ、理由を考えてみる(教えてもらう)ために書いたものです。
Go言語自体はDisってますが、Go言語ユーザーをDisる目的では書いていません。</p>

<p>また、以下のような意見も見られました。</p>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> とか <a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a> とかのライトな言語ユーザらしい「典型的で、ありがちな批判」。タプルにこだわりすぎ</li>
<li>慣れれば困らない</li>
<li>他の言語を使えばよい</li>
<li>Issueにすればよい</li>
</ul>


<p>まずひとつめについてですが、自分は<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>や<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>のようないわゆるLL使いではありません。
典型的でありがちな批判かどうかは自分では判断できませんが、観測範囲でこのような批判がまとまっているものを見た覚えはないです。
そのため、この記事を書くためにいろいろと調べましたし。
それと、多値にこだわっているのではなく、言語仕様が初学者が躓きやすい(し、理由を調べにくい)ようになっているのでは？という指摘こそが言いたいことです。</p>

<p>ふたつめの慣れれば問題ないという指摘も、慣れるまでの障壁の話を書いているのでこの記事に対しては意味を持ちません。
人にもよりますが、ルールの推測しずらい(シンプルでない)ものを覚えるのは苦手なので、自分と同じような人間が躓かないように気にしていただければと思います。</p>

<p>みっつめですが、避けられない理由が「いろいろ」あるのです。察してください。</p>

<p>よっつめのIssueにすればよい、という意見ですが、このエントリはあくまで「ここが分かりにくい」というところを(理由があればそれも込みで)まとめたものであって、
言語仕様を自分の思い通りに変えたいという話ではありません。
Issueにすればどうなるというのでしょうか。
互換性を壊すということで却下されてそれで終わりだという確信があります。
それよりは、エントリにまとめて周知した方が生産的だと思いますし、IssueでやりあうほどのGo愛を自分は持ち合わせておりません。</p>

<h2>多値まわり</h2>

<p>Go言語には多値という機能<a href="#f-b6e14635" name="fn-b6e14635" title="他の言語でのタプルのようなもの。ただし、タプルのようにひと塊として扱えるものではなく、単に関数から戻るときに複数の値がスタックに残っているような状態と思った方がいいです。">*1</a>が言語に組み込まれています。
しかし、これが中途半端なうえ、多値っぽい構文で多値ではないものがいくつかあるため、初心者を混乱させる原因になっています。</p>

<p>まず、多値はこのように使います。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synComment">// 多値を返す関数minmax</span>
<span class="synStatement">func</span> minmax(x <span class="synType">int</span>, y <span class="synType">int</span>) (<span class="synType">int</span>, <span class="synType">int</span>) {
    <span class="synStatement">if</span> x &lt; y {
        <span class="synStatement">return</span> x, y     <span class="synComment">// 条件演算子がないのも割り切りだとわかっていてもつらい。</span>
    }
    <span class="synStatement">return</span> y, x
}

<span class="synComment">// 多値の受け取り</span>
min, max := minmax(<span class="synConstant">20</span>, <span class="synConstant">10</span>)
fmt.Println(<span class="synConstant">&quot;min:&quot;</span>, min, <span class="synConstant">&quot;, max:&quot;</span>, max) <span class="synComment">// =&gt; min: 10, max: 20</span>
</pre>


<p>これを念頭に読んでください。</p>

<p>追記: 多値に関して、別記事としてまとめました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fbleis-tift.hatenablog.com%2Fentry%2Fmultiple-values" title="多値について本気で考えてみた - ぐるぐる～" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://bleis-tift.hatenablog.com/entry/multiple-values">bleis-tift.hatenablog.com</a></cite></p>

<p>こちらを読んでいただければ、多値はダメだからタプルを入れるべきだった、という話をしていないことが分かっていただけるかと思います。</p>

<h3>多値をひと塊で扱える例外: 多値を多値として返す</h3>

<p>Go言語では多値は基本的にひと塊のオブジェクトとして扱えません(ので、他の言語のにあるようなタプルとは違います)。</p>

<pre class="code lang-go" data-lang="go" data-unlink>tuple := minmax(<span class="synConstant">20</span>, <span class="synConstant">10</span>) <span class="synComment">// コンパイルエラー</span>
</pre>


<p>しかし、例外がいくつかあります。
ひとつめが、他の関数の戻り値をそのまま自分の関数の戻り値として返す場合です。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synStatement">func</span> minmax2(x <span class="synType">int</span>, y <span class="synType">int</span>) (<span class="synType">int</span>, <span class="synType">int</span>) {
    <span class="synStatement">return</span> minmax(x, y) <span class="synComment">// そのまま返す</span>
}
</pre>


<p>この場合、結果が同数<a href="#f-1d1adcfa" name="fn-1d1adcfa" title="多値は2値だけでなく、3値でも4値でも返せます。">*2</a>かつすべて同じ型である必要があります。</p>

<h3>多値をひと塊で扱える例外: 同じ形の多値を取る関数にそのまま渡す</h3>

<p>ふたつめが、同じ形の多値をとる関数にそのまま渡す場合です。</p>

<pre class="code lang-go" data-lang="go" data-unlink>fmt.Println(minmax(<span class="synConstant">20</span>, <span class="synConstant">10</span>)) <span class="synComment">// =&gt; 10 20</span>
</pre>


<p><code>fmt.Println</code> が <code>interface{}</code> という何でも渡せる型を可変長引数として複数受け取れる関数なので、 <code>minmax</code> 関数の結果をそのまま渡せています。
しかし、可変長だからと言ってこのようなことはできません。</p>

<pre class="code lang-go" data-lang="go" data-unlink>fmt.Println(<span class="synConstant">&quot;min, max:&quot;</span>, minmax(<span class="synConstant">20</span>, <span class="synConstant">10</span>))    <span class="synComment">// コンパイルエラー</span>
</pre>


<p>できてもよさそうなものですが、なぜかできません。
出来ないようにしている理由はわかりません。</p>

<h3>多値っぽい構文なのに多値ではない機能: for range構文</h3>

<p>主にコレクションを走査するときに使う for range構文というものがあります。
例えば、Go言語には<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9">ジェネリクス</a>がないのでいわゆるmap処理を行いたい場合、</p>

<pre class="code lang-go" data-lang="go" data-unlink>ys := <span class="synStatement">make</span>([]<span class="synType">int</span>, <span class="synStatement">len</span>(xs))
<span class="synStatement">for</span> i, x := <span class="synStatement">range</span> xs {
    ys[i] = x * <span class="synConstant">2</span>
}
</pre>


<p>のように書きます。</p>

<p><code>i, x</code> の部分は多値のように見えますが、これは多値ではなく構文です。
多値では値を受け取らないということはできませんが、この構文は <code>x</code> の側(この記事では2nd <a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value</a>と呼びます)を無視できます。</p>

<pre class="code lang-go" data-lang="go" data-unlink>min := minmax(<span class="synConstant">20</span>, <span class="synConstant">10</span>)   <span class="synComment">// コンパイルエラー</span>
</pre>




<pre class="code lang-go" data-lang="go" data-unlink>ys := <span class="synStatement">make</span>([]<span class="synType">int</span>, <span class="synStatement">len</span>(xs))
<span class="synStatement">for</span> i := <span class="synStatement">range</span> xs { <span class="synComment">// OK. xsの要素ではなく、インデックスが取れる</span>
    ys[i] = i
}
</pre>


<p>要素の方ではなくインデックスの方が取れるのが使いにくい感じがしますが、これはmapとの統一をしたかったためと思われます。
mapでは1st <a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value</a>がキー、2nd <a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value</a>が値となるので、mapでもスライスでも1st <a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value</a>側を取れるようにした、ということでしょう。
mapは値を走査するよりもキーを走査する方が多いでしょうから。</p>

<p>多値ではないものはまだあります。</p>

<h3>多値っぽい構文なのに多値ではない機能: mapへのアクセス</h3>

<p>Go言語では、mapへのアクセスにはスライスや文字列などと同様、 <code>[]</code> を使います。
その結果として、値のほかにキーが存在したかどうかを表す <code>bool</code> 値が受け取れます。</p>

<pre class="code lang-go" data-lang="go" data-unlink>m := <span class="synType">map</span>[<span class="synType">string</span>]<span class="synType">int</span> { <span class="synConstant">&quot;a&quot;</span>: <span class="synConstant">10</span>, <span class="synConstant">&quot;b&quot;</span>: <span class="synConstant">20</span> }
n, ok := m[<span class="synConstant">&quot;c&quot;</span>] <span class="synComment">// 2nd valueとしてbool値が受け取れる</span>
<span class="synStatement">if</span> !ok {
    n = <span class="synConstant">0</span>
}
fmt.Println(<span class="synConstant">&quot;n:&quot;</span>, n)    <span class="synComment">// =&gt; n: 0</span>
</pre>


<p>これも <code>n, ok</code> の部分は多値に見えますが、多値ではありません。
まず、 <code>ok</code> の部分が省略できますし、多値ではできる「他の関数にそのまま渡す」ができません。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synStatement">func</span> f(n <span class="synType">int</span>, ok <span class="synType">bool</span>) {
}

f(m[<span class="synConstant">&quot;c&quot;</span>])   <span class="synComment">// コンパイルエラー</span>
</pre>


<p>これは <code>ok</code> が省略できることと両立できないからでしょう。
上のようなコードが許された場合、下のようなコードでどういう挙動にすればいいのかという微妙な問題が出てきます。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synComment">// 1st valueだけを表示すべきなのか、2nd valueも表示すべきなのか</span>
fmt.Println(m[<span class="synConstant">&quot;c&quot;</span>])
</pre>


<p>多値っぽく見せるなら、省略なぞ許さずに多値にしてしまったほうがよかったと思います。
あり得ない話だとは思いますが、もしGoが<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2">演算子</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%D0%A1%BC%A5%ED%A1%BC%A5%C9">オーバーロード</a>を許すようになったとしても、 <code>[]</code> の結果を多値にしては組み込みのmapと同じになりません。
ではどうするのか。省略可能を示す <code>?</code> みたいな機能を増やすんでしょうかね。</p>

<h3>多値っぽい構文なのに多値ではない機能: 型<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B5%A1%BC%A5%B7%A5%E7%A5%F3">アサーション</a></h3>

<p>型<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B5%A1%BC%A5%B7%A5%E7%A5%F3">アサーション</a>(キャストのようなもの)も、mapへのアクセス同様に2nd <a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value</a>として成否を表す <code>bool</code> 値を返します。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synStatement">func</span> f(x <span class="synStatement">interface</span>{}) <span class="synType">int</span> {
    n, ok := x.(<span class="synType">int</span>)    <span class="synComment">// 多値ではない</span>
    <span class="synStatement">if</span> !ok {
        n = -<span class="synConstant">1</span>
    }
    <span class="synStatement">return</span> n
}
</pre>


<p>mapと同じことが言えますね。</p>

<h3>多値っぽい構文なのに多値ではない機能: チャネルからの受信</h3>

<p>同上なので略。</p>

<h3>多値が使えると便利そうなのに使えないし、別の意味になる: switch構文</h3>

<p>Go言語でのswitch構文には多値が使えません。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synComment">// コンパイルエラー</span>
<span class="synStatement">switch</span> minmax(<span class="synConstant">20</span>, <span class="synConstant">10</span>) {
<span class="synStatement">case</span> <span class="synConstant">10</span>, <span class="synConstant">20</span>:
}
</pre>


<p>ですが、 <code>case 10, 20</code> の部分は多値ではない意味として使われています。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synStatement">switch</span> <span class="synConstant">20</span> {
<span class="synStatement">case</span> <span class="synConstant">10</span>, <span class="synConstant">20</span>:
    fmt.Println(<span class="synConstant">&quot;10 or 20&quot;</span>)
<span class="synStatement">default</span>:
    fmt.Println(<span class="synConstant">&quot;other&quot;</span>)
}
</pre>


<p>Go言語では、 <code>case</code> はフォールスルーしませんので、複数の選択肢で同じ処理をさせたい場合は上のようにカンマを使います。
<code>switch</code> で多値が使えたら、 <code>ok</code> とそうでない場合とか、 <code>err</code> が <code>nil</code> かそうでないかなどで分岐処理が書けたのに、残念な文法の選択をしたと思います。</p>

<h3>多値が使えると便利そうなのに使えない: チャネル</h3>

<p>Go言語における同期処理の入力、出力と言えば、関数の引数とその結果<a href="#f-7bd5938d" name="fn-7bd5938d" title="ちなみに、戻り値型と呼ばないのは多値は(Goでは)型ではないからです。">*3</a>です。
関数の引数は多値を許しますし、関数の結果も多値を許します。対称性が取れていますね。</p>

<p>Go言語における非同期処理の入力、出力と言えば、チャネルへの送信と受信ではないでしょうか。
しかし、チャネルへの送信にも受信にも、多値は使えません。対称性は取れていますね。でも、同期処理と非同期処理で統一性はないように思います。</p>

<p>なぜチャネルで多値が使えないかの理由は思い浮かびません。
実装が難しいとかなんでしょうか。CSPよりもアクター派なんで詳しくはわかりません。</p>

<h2>コレクション</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9">ジェネリクス</a>がないので、基本的には言語組み込みのものしか使いません。
また、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9">ジェネリクス</a>がないので、いわゆるmap関数だとかは用意できないので基本的にはfor文を書くことになります。
他の言語では1行で書けることが、Go言語では3行～6行程度必要になることは多いです。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル</a>速度のためとはいえ、今どきの言語としてはイケていない部分でしょう。</p>

<h3>mapには2nd <a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value</a>があるのに配列, スライス, 文字列には2nd <a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value</a>がない</h3>

<p>多値の項でも言及した通り、mapへのインデックスアクセスは2nd <a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value</a>を持ちます。
しかし、同じく言語組み込みのコレクションである配列やスライス、文字列には2nd <a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value</a>がありません。</p>

<p>そのため、範囲外のインデックスアクセスが発生するとこれらはpanicを起こします。
効率のためかもしれませんが、そうであるならmapに対しても2nd <a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value</a>を(多値と同じような構文で)用意するべきではなかったと思います。
それよりは、mapに対して組み込み関数で多値を返すようなものを用意してほしかったです(それか、配列やスライスなどにも2nd <a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value</a>を用意する)。</p>

<h2><code>:=</code></h2>

<p><code>:=</code> は <code>var</code> + <code>=</code> の略記法、だけではないんです。</p>

<h3><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%E3%A5%C9%A1%BC%A5%A4%A5%F3%A5%B0">シャドーイング</a>と再代入</h3>

<p><code>=</code> は再代入<a href="#f-f0554829" name="fn-f0554829" title="varでの=は除く">*4</a>、 <code>:=</code> は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%E3%A5%C9%A1%BC%A5%A4%A5%F3%A5%B0">シャドーイング</a>、という説明を見たような気がします。
が、これだけでは <code>:=</code> の性質をすべて語っていません。</p>

<p>まず、Go言語では同一スコープでの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%E3%A5%C9%A1%BC%A5%A4%A5%F3%A5%B0">シャドーイング</a>はできません<a href="#f-1ec9066e" name="fn-1ec9066e" title="例えばF#は同一スコープでのシャドーイングができているように見えるのですが、実はletがスコープを作っているので同一スコープでのシャドーイングを実際にしているわけではありません。見た目的には同一スコープのシャドーイングに見えるので置いておきましょう。">*5</a>。</p>

<pre class="code lang-go" data-lang="go" data-unlink>x := <span class="synConstant">10</span>
x := <span class="synConstant">20</span> <span class="synComment">// コンパイルエラー</span>
</pre>


<p>ですが、みなさんこんなコード書いてませんか？</p>

<pre class="code lang-go" data-lang="go" data-unlink>x, err := f()
<span class="synStatement">if</span> err != <span class="synStatement">nil</span> {
    <span class="synStatement">return</span> <span class="synStatement">nil</span>, err
}
y, err := g(x)
<span class="synComment">// ...</span>
</pre>


<p>これ、同一スコープに <code>err</code> という同じ名前の変数があるので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%E3%A5%C9%A1%BC%A5%A4%A5%F3%A5%B0">シャドーイング</a>できているようにも見えます。
しかし、実はこれは再代入なのです。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synStatement">func</span> f() (<span class="synType">int</span>, <span class="synType">error</span>) {
    <span class="synStatement">return</span> <span class="synConstant">0</span>, <span class="synStatement">nil</span>
}

<span class="synStatement">func</span> g(x <span class="synType">int</span>) (<span class="synType">string</span>, <span class="synType">string</span>) {
    <span class="synStatement">return</span> <span class="synConstant">&quot;&quot;</span>, <span class="synConstant">&quot;&quot;</span>
}
</pre>


<p>としたうえで<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル</a>すると、 <code>string</code> は <code>error</code> を実装していない、という<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル</a>エラーになります。</p>

<p>また、 <code>:=</code> では新たな識別子を導入しないと<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル</a>エラーになるため、</p>

<pre class="code lang-go" data-lang="go" data-unlink>x, err := f()
x, err := g()
</pre>


<p>のようなことはできません。
これだと2行目では新たな識別子が導入されておらず、「short variable declaration(短い変数宣言)」にならないからです。</p>

<p>でも、短い変数宣言という名前なのに多値に対しては再代入が起こり得るというのはどうなんでしょうか。
そうするくらいなら、同一スコープでの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%E3%A5%C9%A1%BC%A5%A4%A5%F3%A5%B0">シャドーイング</a>を許してしまった方がよかったと思います。</p>

<p>このせいで  <code>error</code> しか返さないような関数が混ざると残念なことになります。</p>

<pre class="code lang-go" data-lang="go" data-unlink>x, err := f()
err := g()  <span class="synComment">// コンパイルエラー</span>
err = g()   <span class="synComment">// こうするか、</span>
err2 := g() <span class="synComment">// こうする。上かな。</span>
</pre>


<p>もし同一スコープでの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%E3%A5%C9%A1%BC%A5%A4%A5%F3%A5%B0">シャドーイング</a>を許していたらこう書けました。</p>

<pre class="code lang-go" data-lang="go" data-unlink>x, err := f()
err := g()
</pre>


<p><code>err</code> は <code>:=</code> で受ける。統一されていると思いませんか。</p>

<p>追記:</p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">ちなみにerrに何度も代入するところは「if err := g(); err != <a class="keyword" href="http://d.hatena.ne.jp/keyword/nil">nil</a> {}」と書くのでなにも問題ない。</p>&mdash; のぼのぼ☂️ (@nobonobo) <a href="https://twitter.com/nobonobo/status/1060404658957508608?ref_src=twsrc%5Etfw">2018年11月8日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p><code>error</code> のみを返す関数は、if文のSimpleStmtで受け取る書き方を常時行えば問題ないとのこと。
処理がif文の中に紛れ込むのを完全には賛成できませんが、これは好みの問題でしょう。
同一スコープでの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%E3%A5%C9%A1%BC%A5%A4%A5%F3%A5%B0">シャドーイング</a>が欲しかったという意見は変わりませんが、今後はこの書き方で回避したいと思います。</p>

<h3>別の意味に同じ記号</h3>

<p>Go言語において、 <code>:=</code> は実は2つの意味を持ちます。</p>

<ul>
<li>short variable declaration</li>
<li>for range構文でのRangeClause</li>
</ul>


<p>これらは、意味としてはとても似通っているのですが、別物です。</p>

<p>前者は3値や4値も当然受け取れますが、後者はインデックスと値の2値のみです<a href="#f-e532fbe4" name="fn-e532fbe4" title="チャネルは2nd valueを取りませんが、ここでは省きます。">*6</a>。
前者は右項の値すべてを受ける必要がありますが、後者は2nd <a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value</a>が必要ない場合は省略できます。</p>

<p>個人的には、for range構文に <code>:=</code> は不要だったのではないかな、と思っています。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synComment">// コンパイルエラーだけどこれでよかったのでは？</span>
<span class="synStatement">for</span> i, x <span class="synStatement">range</span> xs {
}
</pre>


<p>こうなっていない理由として考えられるのは、実はfor range構文では <code>:=</code> のほかに <code>=</code> も使えるからというのがあるのでしょう。
<code>=</code> の方を使うと、ループの最後の値がループの外から参照できる、という利点があります。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synStatement">func</span> f(xs []<span class="synType">string</span>) {
    <span class="synStatement">var</span> i <span class="synType">int</span>
    <span class="synStatement">var</span> x <span class="synType">string</span>
    <span class="synStatement">for</span> i, x = <span class="synStatement">range</span> xs {   <span class="synComment">// ちなみに、ここにはvarはそもそも置けない(ので、:=はvar+=の略記法だけではない)</span>
        fmt.Println(i, x)
    }
    fmt.Println(<span class="synConstant">&quot;last index:&quot;</span>, i, <span class="synConstant">&quot;last value:&quot;</span>, x)
}
</pre>


<p>しかし、これは少々技巧的で、条件<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2">演算子</a>すら省くGo言語の思想とは相容れないように思えます。
なので、for range構文ではシンプルに <code>:=</code> の機能だけに絞って <code>:=</code> 自体は省略してしまった方がいろいろと分かりやすくなったのでは、と思います。</p>

<p>ちなみに、紛らわしいことに、C風のfor構文で使える <code>:=</code> はshort variable declarationです。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synComment">// short variable declaration</span>
<span class="synStatement">for</span> i := <span class="synConstant">0</span>; i &lt; n; i++ {
}
</pre>


<h2><code>defer</code></h2>

<h3>スコープではなく、関数に属する</h3>

<p>そのままです。罠ですよね。
一応、無名関数をその場で呼び出すことで回避できますが、スコープに属するようにしてくれればよかったのに、と思います。
そうなっていない理由は効率なのでしょうか。わかりません。</p>

<p>追記:</p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">if xxx {<br>　defer con.Close()<br>}<br>とか書けた方がうれしいことあるやろ？だからdeferは関数に属するようにしたんやで<br><br>みたいなのをどこかで見た</p>&mdash; いわた (@wonderful_panda) <a href="https://twitter.com/wonderful_panda/status/1060395618923831296?ref_src=twsrc%5Etfw">2018年11月8日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a>で納得度の高い理由を教えてもらいました。
なるほど、これは確かに<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D6%A5%ED%A5%C3%A5%AF%A5%B9">ブロックス</a>コープだと困りますね。
ループの中で <code>defer</code> して死というのはまだ分かりやすいですし、この点に関してGo言語の選択は正解かもしれません。</p>

<h2>パッケージ</h2>

<h3>階層構造を取れない</h3>

<p>これもそのままです。
複数の粒度でのグルーピングは不要ということでしょうか。
地味に困ります。</p>

<h2>struct / interface</h2>

<h3>構文上の違いがないのに区別が必要</h3>

<p>型の表現方法(struct/interface)によってポインタを渡すべきかどうか変える必要が出てくる(効率を考えた場合の話)のに、それが構文上区別できないのはつらいです。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/C%23">C#</a>のように<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%BF%CC%BE">命名</a>規約で回避するくらはしてくれてもよかったように思います。
それか、<a class="keyword" href="http://d.hatena.ne.jp/keyword/C%B8%C0%B8%EC">C言語</a>のように <code>struct</code> を明示するだとかでもこの際よかったかな、と思います。</p>

<h2>echo</h2>

<h3><a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON</a>メソッド</h3>

<p>Go言語ではなく、echoという<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>に対する愚痴です。
echo(この名前もググラビリティ低い)ではレスポンスを組み立てるために <code>Context</code> オブジェクトのメソッドを呼び出します。
そして、アクセスされた際に呼び出されるハンドラーは <code>error</code> を返します。
だいたいこんな感じになるわけです。</p>

<pre class="code lang-go" data-lang="go" data-unlink>e.GET(<span class="synConstant">&quot;/path&quot;</span>, <span class="synType">func</span> (c Context) <span class="synType">error</span> {
    <span class="synStatement">return</span> c.JSON(http.StatusOK, f())
})
</pre>


<p>これ見てどう思いますか。
<code>c.JSON</code> を呼び出すことでレスポンスオブジェクトが作られ、それが <code>error</code> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%D5%A5%A7%A5%A4%A5%B9">インターフェイス</a>を実装している、そう感じませんか。
どうやらechoの作者はそうではなかったようで、このメソッドで <strong>レスポンスに対して<a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON</a>の書き込みが走</strong> るように作られています。
そして、書き込みに失敗したら <code>error</code> を返すのです。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synStatement">func</span> f(c Context) ([]SomeResult, <span class="synType">error</span>) {
    <span class="synComment">// なんやかんや処理</span>
    <span class="synStatement">if</span> reason != <span class="synStatement">nil</span> {
        <span class="synStatement">return</span> c.JSON(http.StatusInternalServerError, reason)
    }
    <span class="synStatement">return</span> result
}
</pre>


<p>とかやって、</p>

<pre class="code lang-go" data-lang="go" data-unlink>e.GET(<span class="synConstant">&quot;/path&quot;</span>, <span class="synType">func</span> (c Context) <span class="synType">error</span> {
    res, err := f(c)
    <span class="synStatement">if</span> err != <span class="synStatement">nil</span> {
        <span class="synStatement">return</span> err
    }
    <span class="synStatement">return</span> c.JSON(http.StatusOK, res)
})
</pre>


<p>とやったらどうなりますか。
そうです。 <code>reason</code> が <code>nil</code> ではなかった場合、<code>reason</code> がレスポンスに書き込まれますが、レスポンスへの書き込み自体が失敗しなければ <code>c.JSON</code> は <code>nil</code> が返ってくるので、
ハンドラーの中の <code>if</code> には入らず、<strong>再度 <code>c.JSON</code> が呼び出され、ステータスOKでエラーレスポンス(reasonの内容)が返され</strong>ます。
さらに、<strong>エラーレスポンスの後ろに <code>[]</code> というゴミが付いて</strong> しまいます。
なぜなら <code>c.JSON</code> はレスポンスに書き込むだけだから。
ハンドラーの最後の <code>return</code> で <code>res</code> を書き込んでいますから。
多くの場合エラーがあれば <code>res</code> は空ですから。
当然、レスポンスには <code>[]</code> が付いてきますよね。</p>

<p>・・・。
ドキュメントを読まなかった自分も悪いんですが、こういう関数に <code>JSON</code> なんて宣言的に見える名前を付けてほしくなかった。
<code>WriteJson</code> とか、操作的に見える名前ならこんな間違いはしなかった。</p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/vim">vim</a></h2>

<h3>テキストオブジェクトとの相性の悪さ</h3>

<p>GoLandを使っているのですが、当然(?)<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vim">Vim</a> Pluginを使っています。
ですが、Goの構文は括弧を省略しているため、「if文の条件部分に対して操作」・・・あっ・・・できない！
となることが多いです。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vimmer">Vimmer</a>に優しくない<a href="#f-bb4f6d35" name="fn-bb4f6d35" title="そもそもIntellij/GoLandのvim pluginって文字列リテラルの中でテキストオブジェクト使えないという致命的な欠点があってつらいんですが、それはまた別の話。">*7</a>。</p>

<h2>まとめ</h2>

<p>細かいところではまだまだあるのですが、好みの部分も多い<a href="#f-eaad10da" name="fn-eaad10da" title="型指定の書き方とか。">*8</a>のでこのくらいにしておきます。
後半力尽きて適当アンド愚痴ですが、こんな感じで今のところGo言語イケてない。ダサい。という認識です。
この言語のどこがシンプルなんじゃ！むずかしいやろ！どちらかというとイー<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC">ジー</a>方向の機能満載やろ！！！という気分です。
「いいやそこは見方が悪いんだ、こういう見方をするとイケてるんだぜ！」という意見があれば是非聞きたいです。
よろしくお願いします。</p>
<div class="footnote">
<p class="footnote"><a href="#fn-b6e14635" name="f-b6e14635" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">他の言語でのタプルのようなもの。ただし、タプルのようにひと塊として扱えるものではなく、単に関数から戻るときに複数の値がスタックに残っているような状態と思った方がいいです。</span></p>
<p class="footnote"><a href="#fn-1d1adcfa" name="f-1d1adcfa" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">多値は2値だけでなく、3値でも4値でも返せます。</span></p>
<p class="footnote"><a href="#fn-7bd5938d" name="f-7bd5938d" class="footnote-number">*3</a><span class="footnote-delimiter">:</span><span class="footnote-text">ちなみに、戻り値型と呼ばないのは多値は(Goでは)型ではないからです。</span></p>
<p class="footnote"><a href="#fn-f0554829" name="f-f0554829" class="footnote-number">*4</a><span class="footnote-delimiter">:</span><span class="footnote-text">varでの=は除く</span></p>
<p class="footnote"><a href="#fn-1ec9066e" name="f-1ec9066e" class="footnote-number">*5</a><span class="footnote-delimiter">:</span><span class="footnote-text">例えばF#は同一スコープでの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%E3%A5%C9%A1%BC%A5%A4%A5%F3%A5%B0">シャドーイング</a>ができているように見えるのですが、実はletがスコープを作っているので同一スコープでの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%E3%A5%C9%A1%BC%A5%A4%A5%F3%A5%B0">シャドーイング</a>を実際にしているわけではありません。見た目的には同一スコープの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%E3%A5%C9%A1%BC%A5%A4%A5%F3%A5%B0">シャドーイング</a>に見えるので置いておきましょう。</span></p>
<p class="footnote"><a href="#fn-e532fbe4" name="f-e532fbe4" class="footnote-number">*6</a><span class="footnote-delimiter">:</span><span class="footnote-text">チャネルは2nd <a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value</a>を取りませんが、ここでは省きます。</span></p>
<p class="footnote"><a href="#fn-bb4f6d35" name="f-bb4f6d35" class="footnote-number">*7</a><span class="footnote-delimiter">:</span><span class="footnote-text">そもそも<a class="keyword" href="http://d.hatena.ne.jp/keyword/Intellij">Intellij</a>/GoLandの<a class="keyword" href="http://d.hatena.ne.jp/keyword/vim">vim</a> pluginって文字列<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%C6%A5%E9%A5%EB">リテラル</a>の中でテキストオブジェクト使えないという致命的な欠点があってつらいんですが、それはまた別の話。</span></p>
<p class="footnote"><a href="#fn-eaad10da" name="f-eaad10da" class="footnote-number">*8</a><span class="footnote-delimiter">:</span><span class="footnote-text">型指定の書き方とか。</span></p>
</div>
    

  
</div>

    
  <footer class="entry-footer">
    
    <p class="entry-footer-section">
  <span class="author vcard"><span class="fn" data-load-nickname="1" data-user-name="bleis-tift">bleis-tift</span></span>
  <span class="entry-footer-time"><a href="http://bleis-tift.hatenablog.com/entry/go-the-bad-parts"><time data-relative datetime="2018-11-08T04:00:00Z" title="2018-11-08T04:00:00Z" pubdate class="updated">2018-11-08 13:00</time></a></span>
</p>

    
  <div class="hatena-star-container">
  </div>
  <div class="hatena-star-metadata" style="display: none">
    <a class="hatena-star-permalink" href="http://bleis-tift.hatenablog.com/entry/go-the-bad-parts">Go言語のイケてない部分</a>
  </div>


    
<div class="social-buttons">
  
  
    <div class="social-button-item">
      <a href="http://b.hatena.ne.jp/entry/http://bleis-tift.hatenablog.com/entry/go-the-bad-parts" class="hatena-bookmark-button" data-hatena-bookmark-layout="vertical-balloon" data-hatena-bookmark-lang="ja" title="この記事をはてなブックマークに追加"><img src="https://b.st-hatena.com/images/entry-button/button-only.gif" alt="この記事をはてなブックマークに追加" width="20" height="20" style="border: none;" /></a>
    </div>
  
  
    <div class="social-button-item">
      <div class="fb-share-button" data-layout="box_count" data-href="http://bleis-tift.hatenablog.com/entry/go-the-bad-parts"></div>
    </div>
  
  
    <div class="social-button-item">
      <a href="https://twitter.com/share" class="twitter-share-button" data-url="http://bleis-tift.hatenablog.com/entry/go-the-bad-parts" data-count="vertical" data-text="Go言語のイケてない部分 - ぐるぐる～" data-lang="ja">Tweet</a>
    </div>
  
  
    <div class="social-button-item">
      <div class="g-plusone" data-size="tall" data-href="http://bleis-tift.hatenablog.com/entry/go-the-bad-parts"></div>
    </div>
  
  
  
  
</div>

    
  
  
    
    <div class="google-afc-image test-google-rectangle-ads">      
      
      <div id="google_afc_user_container_0" class="google-afc-user-container google_afc_blocklink2_5 google_afc_boder" data-test-unit="/4374287/blog_user"></div>
      
        <a href="http://blog.hatena.ne.jp/guide/pro" class="open-pro-modal" data-guide-pro-modal-ad-url="https://hatenablog.com/guide/pro/modal/ad">広告を非表示にする</a>
      
    </div>
  
  


    <div class="customized-footer">
      

        

        

          <div class="entry-footer-modules" id="entry-footer-secondary-modules">      
<div class="hatena-module hatena-module-related-entries" >
      
  <!-- Hatena-Epic-has-related-entries-with-elasticsearch:true -->
  <div class="hatena-module-title">
    関連記事
  </div>
  <div class="hatena-module-body">
    <ul class="related-entries hatena-urllist urllist-with-thumbnails">
  
  
    
    <li class="urllist-item related-entries-item">
      <div class="urllist-item-inner related-entries-item-inner">
        
                      <div class="urllist-date-link related-entries-date-link">
  <a href="http://bleis-tift.hatenablog.com/archive/2018/11/12" rel="nofollow">
    <time pubdate datetime="2018-11-12T04:00:00Z" title="2018-11-12T04:00:00Z">
      2018-11-12
    </time>
  </a>
</div>

          <a href="http://bleis-tift.hatenablog.com/entry/multiple-values" class="urllist-title-link related-entries-title-link  urllist-title related-entries-title">多値について本気で考えてみた</a>


          
          

                      <div class="urllist-entry-body related-entries-entry-body">先日のエントリの反応として、多値の批判をしているように受け…</div>
      </div>
    </li>
  
    
    <li class="urllist-item related-entries-item">
      <div class="urllist-item-inner related-entries-item-inner">
        
                      <div class="urllist-date-link related-entries-date-link">
  <a href="http://bleis-tift.hatenablog.com/archive/2015/11/27" rel="nofollow">
    <time pubdate datetime="2015-11-27T04:00:00Z" title="2015-11-27T04:00:00Z">
      2015-11-27
    </time>
  </a>
</div>

          <a href="http://bleis-tift.hatenablog.com/entry/maybe-nullable-optional" class="urllist-title-link related-entries-title-link  urllist-title related-entries-title">re:僕にとってMaybe / Nullable / Optional が、どうしてもしっくりこない…</a>


          
          

                      <div class="urllist-entry-body related-entries-entry-body">元ネタ: 僕にとってMaybe / Nullable / Optional が、どうして…</div>
      </div>
    </li>
  
    
    <li class="urllist-item related-entries-item">
      <div class="urllist-item-inner related-entries-item-inner">
        
                      <div class="urllist-date-link related-entries-date-link">
  <a href="http://bleis-tift.hatenablog.com/archive/2015/10/01" rel="nofollow">
    <time pubdate datetime="2015-10-01T00:19:38Z" title="2015-10-01T00:19:38Z">
      2015-10-01
    </time>
  </a>
</div>

          <a href="http://bleis-tift.hatenablog.com/entry/shadowing-and-immutable" class="urllist-title-link related-entries-title-link  urllist-title related-entries-title">シャドーイングとイミュータブルプログラミング</a>


          
          

                      <div class="urllist-entry-body related-entries-entry-body">シャドーイングのない言語と、イミュータブル中心のプログラミ…</div>
      </div>
    </li>
  
    
    <li class="urllist-item related-entries-item">
      <div class="urllist-item-inner related-entries-item-inner">
        
                      <div class="urllist-date-link related-entries-date-link">
  <a href="http://bleis-tift.hatenablog.com/archive/2013/10/08" rel="nofollow">
    <time pubdate datetime="2013-10-08T04:12:22Z" title="2013-10-08T04:12:22Z">
      2013-10-08
    </time>
  </a>
</div>

          <a href="http://bleis-tift.hatenablog.com/entry/overload" class="urllist-title-link related-entries-title-link  urllist-title related-entries-title">オーバーロードって素晴らしいですよね！</a>


          
          

                      <div class="urllist-entry-body related-entries-entry-body">オーバーロード いやぁ、オーバーロードって素晴らしいものです…</div>
      </div>
    </li>
  
    
    <li class="urllist-item related-entries-item">
      <div class="urllist-item-inner related-entries-item-inner">
        
                      <div class="urllist-date-link related-entries-date-link">
  <a href="http://bleis-tift.hatenablog.com/archive/2011/09/22" rel="nofollow">
    <time pubdate datetime="2011-09-21T17:32:34Z" title="2011-09-21T17:32:34Z">
      2011-09-22
    </time>
  </a>
</div>

          <a href="http://bleis-tift.hatenablog.com/entry/20110922/1316626354" class="urllist-title-link related-entries-title-link  urllist-title related-entries-title">Type Provider によるコンパイル時プログラミング</a>


          
          

                      <div class="urllist-entry-body related-entries-entry-body">ハワイにいる間、魔導書の書評以外にもちゃんとハワイらしいこ…</div>
      </div>
    </li>
  
</ul>

  </div>
</div>
  </div>
        

      
    </div>
    
  <div class="comment-box">
    
    <ul class="comment">
      <li class="read-more-comments" style="display: none;"><a>もっと読む</a></li>
    </ul>
    
      <a class="leave-comment-title">コメントを書く</a>
    
  </div>

  </footer>

  </div>
</article>

      
      
    
  

  
  <!-- rakuten_ad_target_end -->
  <!-- google_ad_section_end -->
  
  
  
  <div class="pager pager-permalink permalink">
    
      
      <span class="pager-prev">
        <a href="http://bleis-tift.hatenablog.com/entry/multiple-values" rel="prev">
          <span class="pager-arrow">&laquo; </span>
          多値について本気で考えてみた
        </a>
      </span>
    
    
      
      <span class="pager-next">
        <a href="http://bleis-tift.hatenablog.com/entry/json-parser-using-fparsec" rel="next">
          FParsecでJSONパーサーを書いてみる話
          <span class="pager-arrow"> &raquo;</span>
        </a>
      </span>
    
  </div>


  



        </div>
      </div>

      <aside id="box1">
  <div id="box1-inner">
  </div>
</aside>

    </div><!-- #wrapper -->

    
<aside id="box2">
  
  <div id="box2-inner">
    
      

<div class="hatena-module hatena-module-profile">
  <div class="hatena-module-title">
    プロフィール
  </div>
  <div class="hatena-module-body">
    
    <a href="http://bleis-tift.hatenablog.com/about" class="profile-icon-link">
      <img src="https://cdn.profile-image.st-hatena.com/users/bleis-tift/profile.png"
      alt="id:bleis-tift" class="profile-icon" />
    </a>
    

    
    <span class="id">
      <a href="http://bleis-tift.hatenablog.com/about" class="hatena-id-link"><span data-load-nickname="1" data-user-name="bleis-tift">id:bleis-tift</span></a>
      
  
    
    
  


    </span>
    

    

    

    
      <div class="hatena-follow-button-box btn-subscribe js-hatena-follow-button-box"
  
  >

  <a href="#" class="hatena-follow-button js-hatena-follow-button">
    <span class="subscribing">
      <span class="foreground">読者です</span>
      <span class="background">読者をやめる</span>
    </span>
    <span class="unsubscribing" data-track-name="profile-widget-subscribe-button" data-track-once>
      <span class="foreground">読者になる</span>
      <span class="background">読者になる</span>
    </span>
  </a>
  <div class="subscription-count-box js-subscription-count-box">
    <i></i>
    <u></u>
    <span class="subscription-count js-subscription-count">
    </span>
  </div>
</div>

    

    
  </div>
</div>

    
      

<div class="hatena-module hatena-module-category">
  <div class="hatena-module-title">
    カテゴリー
  </div>
  <div class="hatena-module-body">
    <ul class="hatena-urllist">
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/etc">
            etc (380)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/C%23">
            C# (127)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Program">
            Program (115)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Book">
            Book (113)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Java">
            Java (113)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/SQL">
            SQL (89)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/PC">
            PC (87)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/F%23">
            F# (69)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/C%2B%2B">
            C++ (40)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/.NET">
            .NET (27)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Web%20Site">
            Web Site (26)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Memo">
            Memo (25)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Git">
            Git (22)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/TDD">
            TDD (14)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Scala">
            Scala (12)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/DB">
            DB (11)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/PowerShell">
            PowerShell (11)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/%E5%A6%84%E6%83%B3">
            妄想 (10)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/JavaScript">
            JavaScript (7)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Excel">
            Excel (6)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Security">
            Security (6)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/XSLT">
            XSLT (6)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/OOP">
            OOP (5)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Python">
            Python (5)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/XML">
            XML (4)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/JSX">
            JSX (4)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Ruby">
            Ruby (4)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/%E8%AC%8E">
            謎 (3)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/VB.NET">
            VB.NET (3)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Test">
            Test (3)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/IL">
            IL (3)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/RDB">
            RDB (3)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/SML%23">
            SML# (3)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Go">
            Go (2)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Debian">
            Debian (2)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Hudson">
            Hudson (2)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Vim">
            Vim (2)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/WPF">
            WPF (2)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/VirtualBox">
            VirtualBox (1)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/nagoyarubykaigi01">
            nagoyarubykaigi01 (1)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Jenkins">
            Jenkins (1)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/%E3%81%A6%E3%81%99%E3%81%A8">
            てすと (1)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/C">
            C (1)
          </a>
        </li>
      
    </ul>
  </div>
</div>

    
      <div class="hatena-module hatena-module-search-box">
  <div class="hatena-module-title">
    検索
  </div>
  <div class="hatena-module-body">
    <form class="search-form" role="search" action="http://bleis-tift.hatenablog.com/search" method="get">
  <input type="text" name="q" class="search-module-input" value="" placeholder="記事を検索" required>
  <input type="submit" value="検索" class="search-module-button" />
</form>

  </div>
</div>

    
    
  </div>
</aside>


  </div>
</div>




        

        

      </div>
    </div>
    
<footer id="footer" data-brand="hatenablog">
  <div id="footer-inner">
    
      <div style="display:none !important" class="guest-footer js-guide-register test-blogs-register-guide" data-action="guide-register">
  <div class="guest-footer-content">
    <h3>はてなブログをはじめよう！</h3>
    <p>bleis-tiftさんは、はてなブログを使っています。あなたもはてなブログをはじめてみませんか？</p>
    <div class="guest-footer-btn-container">
      <div  class="guest-footer-btn">
        <a class="btn btn-register" href="http://blog.hatena.ne.jp/register?via=200227" target="_blank">はてなブログをはじめる（無料）</a>
      </div>
      <div  class="guest-footer-btn">
        <a href="https://hatenablog.com/guide" target="_blank">はてなブログとは</a>
      </div>
    </div>
  </div>
</div>

    
    <address class="footer-address">
      <a href="http://bleis-tift.hatenablog.com/">
        <img src="https://cdn.blog.st-hatena.com/images/admin/blog-icon-noimage.png" width="16" height="16" alt="ぐるぐる～"/>
        <span class="footer-address-name">ぐるぐる～</span>
      </a>
    </address>
    <p class="services">
      Powered by <a href="https://hatenablog.com/">Hatena Blog</a>
      |
        <a href="https://blog.hatena.ne.jp/-/abuse_report?target_url=http%3A%2F%2Fbleis-tift.hatenablog.com%2Fentry%2Fgo-the-bad-parts" class="report-abuse-link test-report-abuse-link" target="_blank">ブログを報告する</a>
    </p>
  </div>
</footer>


    

    
  <script src="https://s.hatena.ne.jp/js/HatenaStar.js?20180530"></script>


    
      <div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/ja_JP/sdk.js#xfbml=1&appId=719729204785177&version=v2.7";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

    
    

<div class="quote-box">
  <div class="tooltip-quote tooltip-quote-star">
    <i class="blogicon-star" title="引用スターをつける"></i>
  </div>
  <div class="tooltip-quote tooltip-quote-stock">
    <i class="blogicon-quote" title="引用をストック"></i>
  </div>
  <div class="tooltip-quote tooltip-quote-tweet js-tooltip-quote-tweet">
    <a class="js-tweet-quote" target="_blank" data-track-name="quote-tweet" data-track-once><i class="blogicon-twitter" title="引用してツイートする"></i></a>
  </div>
</div>

<div class="message-box" id="quote-star-message-box" style="display: none; position: absolute;">
  スターをつけました
</div>

<div class="quote-stock-panel" id="quote-stock-message-box" style="position: absolute; z-index: 3000">
  <div class="message-box" id="quote-stock-succeeded-message" style="display: none">
    <p>引用をストックしました</p>
    <button class="btn btn-primary" id="quote-stock-show-editor-button" data-track-name="curation-quote-edit-button">ストック一覧を見る</button>
    <button class="btn quote-stock-close-message-button">閉じる</button>
  </div>

  <div class="message-box" id="quote-login-required-message" style="display: none">
    <p>引用するにはまずログインしてください</p>
    <button class="btn btn-primary" id="quote-login-button">ログイン</button>
    <button class="btn quote-stock-close-message-button">閉じる</button>
  </div>

  <div class="error-box" id="quote-stock-failed-message" style="display: none">
    <p>引用をストックできませんでした。再度お試しください</p>
    <button class="btn quote-stock-close-message-button">閉じる</button>
  </div>

  <div class="error-box" id="unstockable-quote-message-box" style="display: none; position: absolute; z-index: 3000;">
    <p>限定公開記事のため引用できません。</p>
  </div>
</div>

<script type="x-underscore-template" id="js-requote-button-template">
  <div class="requote-button js-requote-button">
    <button class="requote-button-btn tipsy-top" title="引用する"><i class="blogicon-quote"></i></button>
  </div>
</script>



    
    <div id="hidden-subscribe-button" style="display: none;">
      <div class="hatena-follow-button-box btn-subscribe js-hatena-follow-button-box"
  
  >

  <a href="#" class="hatena-follow-button js-hatena-follow-button">
    <span class="subscribing">
      <span class="foreground">読者です</span>
      <span class="background">読者をやめる</span>
    </span>
    <span class="unsubscribing" data-track-name="profile-widget-subscribe-button" data-track-once>
      <span class="foreground">読者になる</span>
      <span class="background">読者になる</span>
    </span>
  </a>
  <div class="subscription-count-box js-subscription-count-box">
    <i></i>
    <u></u>
    <span class="subscription-count js-subscription-count">
    </span>
  </div>
</div>

    </div>

    
  <script type="text/javascript" src="https://platform.twitter.com/widgets.js"></script>

<script src="https://apis.google.com/js/platform.js" async defer>
  { lang: 'ja', "parsetags": "explicit" }
</script>
<script type="text/javascript" src="https://b.st-hatena.com/js/bookmark_button.js" charset="utf-8" async="async"></script>



  <script type="text/javascript" src="https://cdn.blog.st-hatena.com/js/external/react-with-addons.min.js?version=15.4.1"></script>
  <script type="text/javascript" src="https://cdn.blog.st-hatena.com/js/external/react-dom.min.js?version=15.4.1"></script>


<script type="text/javascript" src="https://cdn.blog.st-hatena.com/js/external/jquery.min.js?version=1.12.3"></script>
<script type="text/javascript" src="//cdn7.www.st-hatena.com/js/jquery/jquery-ui.1.10.0.custom.min.js"></script>
<script type="text/javascript" src="https://cdn.blog.st-hatena.com/js/external/jquery.flot.js?version=0.8.3"></script>
<script type="text/javascript" src="https://cdn.blog.st-hatena.com/js/external/jquery.flot.time.js?version=0.8.3"></script>





<script type="text/javascript" src="https://cdn.blog.st-hatena.com/js/texts-ja.js?version=2d52b277ea741221b3d0780bc5bd5ddf8557c2d1&amp;env=production"></script>
<script id="hatenablog-js" data-env="production"
  type="text/javascript" src="https://cdn.blog.st-hatena.com/js/hatenablog.js?version=7536a194b6c212b3aa1a7af74d4ae82e0ae1b804&amp;env=production" crossorigin="anonymous"></script>


  <script type="text/javascript">Hatena.Diary.GlobalHeader.init()</script>


<script src="https://www.google.com/recaptcha/api.js" async defer></script>




    
  <script id="valve-dmp" data-service="blog" src="https://cdn.pool.st-hatena.com/valve/dmp.js" data-test-id="dmpjs" async></script>


    





  </body>
</html>

