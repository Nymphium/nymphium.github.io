<!DOCTYPE html>
<html
  lang="ja"

data-admin-domain="//blog.hatena.ne.jp"
data-author="bleis-tift"
data-avail-langs="ja en"
data-blog="bleis-tift.hatenablog.com"
data-blog-host="bleis-tift.hatenablog.com"
data-blog-is-public="1"
data-blog-name="ぐるぐる～"
data-blog-owner="bleis-tift"
data-blog-uri="http://bleis-tift.hatenablog.com/"
data-blog-uuid="12704346814673882987"
data-blogs-uri-base="http://bleis-tift.hatenablog.com"
data-brand="hatenablog"
data-data-layer="{&quot;hatenablog&quot;:{&quot;brand_tracking_category&quot;:&quot;hatenablog&quot;,&quot;page_id&quot;:&quot;entry&quot;,&quot;brand&quot;:&quot;hatenablog&quot;,&quot;admin&quot;:{},&quot;blog&quot;:{&quot;entry_show_footer_related_entries&quot;:&quot;true&quot;,&quot;is_public&quot;:&quot;true&quot;,&quot;owner_name&quot;:&quot;bleis-tift&quot;,&quot;disable_ads&quot;:&quot;&quot;,&quot;content_seems_japanese&quot;:&quot;true&quot;,&quot;enable_keyword_link&quot;:&quot;true&quot;,&quot;is_responsive_view&quot;:&quot;false&quot;,&quot;enable_ads&quot;:&quot;true&quot;,&quot;name&quot;:&quot;\u3050\u308b\u3050\u308b\uff5e&quot;,&quot;uri&quot;:&quot;http://bleis-tift.hatenablog.com/&quot;,&quot;lang&quot;:&quot;ja&quot;,&quot;is_sleeping&quot;:&quot;false&quot;,&quot;force_pc_view&quot;:&quot;false&quot;},&quot;router_type&quot;:&quot;blogs&quot;,&quot;analytics&quot;:{&quot;brand_property_id&quot;:&quot;&quot;,&quot;property_id&quot;:&quot;UA-490809-3&quot;,&quot;non_sampling_property_id&quot;:&quot;&quot;,&quot;separated_property_id&quot;:&quot;UA-29716941-18&quot;},&quot;pro&quot;:&quot;free&quot;,&quot;permalink_entry&quot;:{&quot;author_name&quot;:&quot;bleis-tift&quot;,&quot;categories&quot;:&quot;Go\t\u5984\u60f3&quot;,&quot;uri&quot;:&quot;http://bleis-tift.hatenablog.com/entry/multiple-values&quot;,&quot;title&quot;:&quot;\u591a\u5024\u306b\u3064\u3044\u3066\u672c\u6c17\u3067\u8003\u3048\u3066\u307f\u305f&quot;,&quot;date&quot;:&quot;2018-11-12&quot;,&quot;hour&quot;:&quot;13&quot;}}}"
data-device="pc"
data-dont-recommend-pro="false"
data-global-domain="https://hatenablog.com"
data-globalheader-color="b"
data-globalheader-type="pc"
data-has-touch-view="1"
data-page="entry"
data-parts-domain="https://hatenablog-parts.com"
data-plus-available=""
data-pro="false"
data-router-type="blogs"
data-sentry-dsn="https://03a33e4781a24cf2885099fed222b56d@sentry.io/1195218"
data-sentry-sample-rate="0.1"
data-static-domain="https://cdn.blog.st-hatena.com"
data-version="3af713039e1616fddee277147499aa54"

itemscope
itemtype="http://schema.org/Article"

  data-initial-state="{}"

  >
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article: http://ogp.me/ns/article#">
  

  



  


  <meta charset="utf-8"/>
  <meta http-equiv="X-UA-Compatible" content="IE=7; IE=9; IE=10; IE=11" />
  <title>多値について本気で考えてみた - ぐるぐる～</title>

  
  <link rel="canonical" href="http://bleis-tift.hatenablog.com/entry/multiple-values"/>



  
  

<meta itemprop="name" content="多値について本気で考えてみた - ぐるぐる～"/>

  <meta itemprop="image" content="https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"/>


  <meta property="og:title" content="多値について本気で考えてみた - ぐるぐる～"/>
<meta property="og:type" content="article"/>
  <meta property="og:url" content="http://bleis-tift.hatenablog.com/entry/multiple-values"/>

  
  
  
  <meta property="og:image" content="https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png"/>

    <meta property="og:description" content="先日のエントリの反応として、多値の批判をしているように受け取られた方がいました。 実際には、多値の批判をしているのではなく、Go言語の「多値とそう見えるけど違うものがある」という仕様を批判したものでした。 また、タプルにこだわっているという受け取り方をした方もいました。 このエントリでは、「タプルにこだわっているのではない、多値にこだわっているのだ」ということを説明しようと思います。 このエントリで出てくるコードは言及がない限り妄想上のもので、実際の言語のコードではありません。 長いから3行で。 スタックマシンと多値は仲良し。継続と多値も仲良し。 多値は多値、タプルはタプル、みんなちがってみん…" />
<meta property="og:site_name" content="ぐるぐる～"/>

  <meta property="article:published_time" content="1541995200" />

    <meta property="article:tag" content="Go" />
    <meta property="article:tag" content="妄想" />
      <meta name="twitter:card"  content="summary" />  <meta name="twitter:title" content="多値について本気で考えてみた - ぐるぐる～" />    <meta name="twitter:description" content="先日のエントリの反応として、多値の批判をしているように受け取られた方がいました。 実際には、多値の批判をしているのではなく、Go言語の「多値とそう見えるけど違うものがある」という仕様を批判したものでした。 また、タプルにこだわっているという受け取り方をした方もいました。 このエントリでは、「タプルにこだわっているのでは…" />  <meta name="twitter:app:name:iphone" content="はてなブログアプリ" />
  <meta name="twitter:app:id:iphone" content="583299321" />
  <meta name="twitter:app:url:iphone" content="hatenablog:///open?uri=http%3A%2F%2Fbleis-tift.hatenablog.com%2Fentry%2Fmultiple-values" />  <meta name="twitter:site" content="@bleis" />
  
    <meta name="description" content="先日のエントリの反応として、多値の批判をしているように受け取られた方がいました。 実際には、多値の批判をしているのではなく、Go言語の「多値とそう見えるけど違うものがある」という仕様を批判したものでした。 また、タプルにこだわっているという受け取り方をした方もいました。 このエントリでは、「タプルにこだわっているのではない、多値にこだわっているのだ」ということを説明しようと思います。 このエントリで出てくるコードは言及がない限り妄想上のもので、実際の言語のコードではありません。 長いから3行で。 スタックマシンと多値は仲良し。継続と多値も仲良し。 多値は多値、タプルはタプル、みんなちがってみん…" />


  
<script
  id="embed-gtm-data-layer-loader"
  data-data-layer-page-specific="{&quot;hatenablog&quot;:{&quot;blogs_permalink&quot;:{&quot;blog_afc_issued&quot;:&quot;false&quot;,&quot;entry_afc_issued&quot;:&quot;false&quot;,&quot;blog_struct_hide_afc&quot;:&quot;false&quot;,&quot;is_author_pro&quot;:&quot;false&quot;,&quot;is_blog_sleeping&quot;:&quot;false&quot;,&quot;has_related_entries_with_elasticsearch&quot;:&quot;true&quot;,&quot;blog_hide_afc_field&quot;:&quot;false&quot;,&quot;brand_hide_afc&quot;:&quot;false&quot;,&quot;blog_hide_afc_func&quot;:&quot;false&quot;}}}"
>
(function() {
  function loadDataLayer(elem, attrName) {
    if (!elem) { return {}; }
    var json = elem.getAttribute(attrName);
    if (!json) { return {}; }
    return JSON.parse(json);
  }

  var globalVariables = loadDataLayer(
    document.documentElement,
    'data-data-layer'
  );
  var pageSpecificVariables = loadDataLayer(
    document.getElementById('embed-gtm-data-layer-loader'),
    'data-data-layer-page-specific'
  );

  var variables = [globalVariables, pageSpecificVariables];

  if (!window.dataLayer) {
    window.dataLayer = [];
  }

  for (var i = 0; i < variables.length; i++) {
    window.dataLayer.push(variables[i]);
  }
})();
</script>

<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-P4CXTW');</script>
<!-- End Google Tag Manager -->




  <link rel="shortcut icon" href="https://cdn.blog.st-hatena.com/images/favicon.ico">
<link rel="icon" sizes="192x192" href="https://cdn.blog.st-hatena.com/images/common/meta-icon-global.png">

  
<link rel="alternate" type="application/atom+xml" title="Atom" href="http://bleis-tift.hatenablog.com/feed"/>
<link rel="alternate" type="application/rss+xml" title="RSS2.0" href="http://bleis-tift.hatenablog.com/rss"/>
<link rel="alternate" type="application/json+oembed" href="https://hatenablog.com/oembed?url=http%3A%2F%2Fbleis-tift.hatenablog.com%2Fentry%2Fmultiple-values&amp;format=json" title="oEmbed Profile of 多値について本気で考えてみた"/>
<link rel="alternate" type="text/xml+oembed" href="https://hatenablog.com/oembed?url=http%3A%2F%2Fbleis-tift.hatenablog.com%2Fentry%2Fmultiple-values&amp;format=xml" title="oEmbed Profile of 多値について本気で考えてみた"/>
  
  <link rel="author" href="http://www.hatena.ne.jp/bleis-tift/">

  


  
    <link rel="stylesheet" type="text/css" href="https://cdn.blog.st-hatena.com/css/blog.css?version=ef3efba74fb777cbab54718608ca20e4a896f271&amp;env=production"/>

    
  <link rel="stylesheet" type="text/css" href="//blog.hatena.ne.jp/-/blog_style/12704346814673882987/6180f8240f329b9c16ae9a5e904a9111889300ec"/>
  

  

  
<script> </script>

  
<style>
  div#google_afc_user,
  div.google-afc-user-container,
  div.google_afc_image,
  div.google_afc_blocklink {
      display: block !important;
  }
</style>


  
    <script src="https://cdn.pool.st-hatena.com/valve/valve.js" async></script>
<script id="test-valve-definition">
  var valve = window.valve || [];

  valve.push(function(v) {
    v.config({ service: 'blog' });
    
    

    
    v.defineDFPSlot({"sizes":[[300,250],[336,280],[468,60],"fluid"],"lazy":"","unit":"/4374287/blog_user","slotId":"google_afc_user_container_0"});
    

    

    v.sealDFPSlots();
  });
</script>

  

  
</head>

  <body class="page-entry category-Go category-妄想">
    
    <div id="header-container">
     <div id="sp-suggest" style="display: none;"><a id="sp-suggest-link" href="#">スマートフォン用の表示で見る</a></div>
    </div>

    <div id="globalheader-container"
  data-brand="hatenablog"
  
  
  >
  <iframe id="globalheader" height="37" frameborder="0" allowTransparency="true"></iframe>
</div>


    <div id="container">
      <div id="container-inner">
        <header id="blog-title" data-brand="hatenablog">
  <div id="blog-title-inner" >
    <div id="blog-title-content">
      <h1 id="title"><a href="http://bleis-tift.hatenablog.com/">ぐるぐる～</a></h1>
      
    </div>
  </div>
</header>

        

        

        




<div id="content" class="hfeed"
  
  >
  <div id="content-inner">
    <div id="wrapper">
      <div id="main">
        <div id="main-inner">
          


          
  
  <!-- google_ad_section_start -->
  <!-- rakuten_ad_target_begin -->
  
  
  

  

  
    
      
        <article class="entry hentry js-entry-article date-first autopagerize_page_element chars-8000 words-800 mode-markdown entry-odd" id="entry-10257846132667787609" data-keyword-campaign="" data-uuid="10257846132667787609" data-publication-type="entry">
  <div class="entry-inner">
    <header class="entry-header">
  
    <div class="date entry-date first">
    <a href="http://bleis-tift.hatenablog.com/archive/2018/11/12" rel="nofollow">
      <time pubdate datetime="2018-11-12T04:00:00Z" title="2018-11-12T04:00:00Z">
        <span class="date-year">2018</span><span class="hyphen">-</span><span class="date-month">11</span><span class="hyphen">-</span><span class="date-day">12</span>
      </time>
    </a>
  </div>
  <h1 class="entry-title">
  <a href="http://bleis-tift.hatenablog.com/entry/multiple-values" class="entry-title-link bookmark">多値について本気で考えてみた</a>
</h1>

  
  

  <div class="entry-categories categories">
    
    <a href="http://bleis-tift.hatenablog.com/archive/category/Go" class="entry-category-link category-Go">Go</a>
    
    <a href="http://bleis-tift.hatenablog.com/archive/category/%E5%A6%84%E6%83%B3" class="entry-category-link category-妄想">妄想</a>
    
  </div>


  

  

</header>

    

    <div class="entry-content">
  
    <p><a href="http://bleis-tift.hatenablog.com/entry/go-the-bad-parts">&#x5148;&#x65E5;&#x306E;&#x30A8;&#x30F3;&#x30C8;&#x30EA;</a>の反応として、多値の批判をしているように受け取られた方がいました。
実際には、多値の批判をしているのではなく、Go言語の「多値とそう見えるけど違うものがある」という仕様を批判したものでした。</p>

<p>また、タプルにこだわっているという受け取り方をした方もいました。
このエントリでは、「タプルにこだわっているのではない、多値にこだわっているのだ」ということを説明しようと思います。
このエントリで出てくるコードは言及がない限り妄想上のもので、実際の言語のコードではありません。</p>

<p>長いから3行で。</p>

<ul>
<li>スタックマシンと多値は仲良し。継続と多値も仲良し。</li>
<li>多値は多値、タプルはタプル、みんなちがってみんないい。</li>
<li>多値とは、カンマで区切られた単なる複数の値だよ。妄想だけどね。</li>
</ul>


<p>これで満足して仕事に戻っていただいて構いません。以下オマケ。</p>

<h2>多値とタプルの違い</h2>

<p>まず、多値とタプルの意味的な違いについてをはっきりさせておきましょう。
ただし、多値はタプルと違って扱える言語が少ない<a href="#f-3d7100dc" name="fn-3d7100dc" title="メジャーな言語だとScheme/Common LispとGoくらいではないでしょうか。何をメジャーに入れるかという問題はありますが。※Luaも多値を持っているようです。Twitterで教えてもらいました。※GHC拡張にもUnboxed Tuplesという構文拡張があるようです。これもTwitterで教えてもらいました。">*1</a>うえ、各言語での違いもそれなりに大きいため、ここで紹介する違いは参考程度に考えてください。</p>

<h3>他の値の一部になれるかどうか</h3>

<p>タプルは何の制約もない、単なる値です。
そのため、他の値の一部になれます<a href="#f-c88d3592" name="fn-c88d3592" title="クラスのフィールドとして持たせられる。">*2</a>。
当然、タプルの要素にタプルを入れるという風に、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C6%FE%A4%EC%BB%D2">入れ子</a>構造も取れます。</p>

<p>それに対して、多値は他の値の一部にはなれません。
例えば、クラスのフィールドに多値を含むこともできませんし、多値の要素として多値を含むこともできません。
これを、制約の付いた型と見なすこともできますが、単に多値はファーストクラスのオブジェクトではないと考えてもよいでしょう。</p>

<h3>多値は制限されたタプルなのか</h3>

<p>ここまででは、多値は制限されたタプルであり、多値には何のメリットもないとしか思えないかもしれません。
しかし、多値には効率という大きなメリットがあるのです。
その話に入る前に、多値と相性のよいものについて見ていきましょう。
スタックマシンと、継続です。</p>

<h2>スタックマシンと多値</h2>

<p>まずはスタックマシンです。
スタックマシンというのは、スタックを用いて計算を行う計算機のことを言いますが、ここでは詳細には踏み込みません。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%BE%C1%DB%A5%DE%A5%B7%A5%F3">仮想マシン</a>や、.NETの<a class="keyword" href="http://d.hatena.ne.jp/keyword/CLR">CLR</a>や、RubyVM(旧称<a class="keyword" href="http://d.hatena.ne.jp/keyword/YARV">YARV</a>)などもスタックマシンをベースにしています。少なくとも30億のデ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>でスタックマシンは動いていることになりますね。すごい。</p>

<h3>スタックマシンでの関数呼び出し</h3>

<p>スタックマシンでは、引数をスタックに積んでから関数に処理を移すだけで関数呼び出しができます。
例えば、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a>で次のようなメソッドを書いたとしましょう。</p>

<pre class="code lang-java" data-lang="java" data-unlink><span class="synType">public</span> <span class="synType">static</span> <span class="synType">int</span> add(<span class="synType">int</span> a, <span class="synType">int</span> b) {
    <span class="synStatement">return</span> a + b;
}
</pre>


<p>このメソッドを <code>add(10, 20)</code> のように呼び出した場合、以下のような<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%C8%A5%B3%A1%BC%A5%C9">バイトコード</a>が出力されます。</p>

<pre class="code" data-lang="" data-unlink>bipush 10           // byte範囲に収まる数値10をpush
bipush 20           // byte範囲に収まる数値20をpush
invokestatic add    // addメソッドを呼び出す</pre>


<p>これをスタックの状態を含めて図にすると、このような感じになります。</p>

<pre class="code" data-lang="" data-unlink>|    | bipush 10 |    | bipush 20 | 20 | invokestatic add |    |
|    |----------&gt;| 10 |----------&gt;| 10 |-----------------&gt;| 30 |
+----+           +----+           +----+                  +----+</pre>


<p>まさに、スタックに引数を積んでから関数が呼び出されています。
そして、結果はスタックに積まれます。</p>

<p>関数から戻る場合はどうでしょうか。
上で作った <code>add</code> の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%C8%A5%B3%A1%BC%A5%C9">バイトコード</a>を見てみましょう。</p>

<pre class="code" data-lang="" data-unlink>iload_0 // 0番目の引数を整数としてpush
iload_1 // 1番目の引数を整数としてpush
iadd    // スタックに積まれた2つの整数を加算、結果をpush
ireturn // スタックに積まれた数値を戻り値としてメソッドからreturn</pre>


<p><code>add(10, 20)</code> で呼び出された場合のスタックの移り変わりはこのようになります。</p>

<pre class="code" data-lang="" data-unlink>|    | iload_0 |    | iload_1 | 20 | iadd |    | ireturn
|    |--------&gt;| 10 |--------&gt;| 10 |-----&gt;| 30 |--------&gt;
+----+         +----+         +----+      +----+</pre>


<h3>スタックマシン上での多値の表現</h3>

<p>スタックマシンでは、多値はスタック上に積まれた(複数の)値でしかありません。
n個の値を積んで関数を呼び出すということは、n値を入力にする関数を呼び出すということですし、
m個の値を積んだ状態で関数からreturnするということは、m値を出力として関数を終えた、ということです<a href="#f-f2b77382" name="fn-f2b77382" title="ただし、上で例に挙げたJava仮想マシン(や、他の仮想マシン)では、m個の値を積んだ状態で関数からreturnすることを許していません。">*3</a>。</p>

<p>これはとてもきれいですよね。
例えばGo言語がスタックマシン上で実装されているとしたら、</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synStatement">func</span> add(a <span class="synType">int</span>, b <span class="synType">int</span>) <span class="synType">int</span> {
    <span class="synStatement">return</span> a + b
}

<span class="synStatement">func</span> f(a <span class="synType">int</span>) (<span class="synType">int</span>, <span class="synType">int</span>) {
    <span class="synStatement">return</span> a, a * <span class="synConstant">2</span>
}

add(f(<span class="synConstant">3</span>))
</pre>


<p>は、</p>

<pre class="code" data-lang="" data-unlink>push 3
call f      // 3が積まれた状態でfを呼び出す。実行が終わるとスタックに値が2つ積まれている。
call add    // 3と6がスタックに積まれた状態でaddを呼び出す。</pre>


<p>と表現されていることでしょう。</p>

<h2>継続と多値</h2>

<p>継続について説明しだすと延々と横道にそれていってしまうので、 <a href="http://practical-scheme.net/docs/cont-j.html">&#x89E3;&#x8AAC;&#x30DA;&#x30FC;&#x30B8;</a> へのリンクだけ置いておきます。
未完成部分が埋められることはもはやないと思われます。残念。</p>

<p>さて、継続と多値の関係ですが、継続とはつまるところ「関数からのreturnを、returnした後の処理を表す関数呼び出し」と考えてしまおう、ということです<a href="#f-46c2aa22" name="fn-46c2aa22" title="http://www.kmonos.net/wlog/95.html#_1109090307 という記事を思い出したので置いておきます。この記事では、returnを関数と見なすとどうなるだろう、という思考実験をしています。">*4</a>。
このとき、「継続に渡される引数が複数個ある」ということの意味を考えてみましょう。
「継続に渡される引数」は、「returnされた値」に対応しますので、これが複数個あるということは「複数の結果が関数から返ってきた」ことを意味します。
つまりは多値です。</p>

<p>すべてを継続で考えれば、returnはすべて関数の引数になります。
その世界においては、多値とは単に継続(もしくは関数)に渡す引数が複数あるというだけとなります。
これもとてもきれいですね。</p>

<p>ちょっと無理やりですが、Go言語であればこのようなイメージの世界です。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synComment">// スタックマシン上での多値の表現で使ったプログラムをreturnやGo言語の多値なしに表現してみた例</span>
<span class="synStatement">func</span> add(a <span class="synType">int</span>, b <span class="synType">int</span>, k <span class="synType">func</span>(<span class="synType">int</span>)) {
    k(a + b) <span class="synComment">// returnの代わりに継続を呼び出す</span>
}

<span class="synStatement">func</span> f(a <span class="synType">int</span>, k <span class="synType">func</span>(<span class="synType">int</span>, <span class="synType">int</span>)) {
    k(a, a * <span class="synConstant">2</span>) <span class="synComment">// returnの代わりに継続を呼び出す(多値！)</span>
}

<span class="synStatement">func</span> main() {
    f(<span class="synConstant">3</span>, <span class="synType">func</span>(a <span class="synType">int</span>, b <span class="synType">int</span>) { <span class="synComment">// fは多値を関数の引数として渡してくる</span>
        add(a, b, <span class="synType">func</span>(x <span class="synType">int</span>) {
            fmt.Println(x)
        })
    })
}
</pre>


<p>returnもGo言語の多値も使っていませんが、やっていることはGo言語の多値を使ったコードと同じです。</p>

<p>ちなみに、継続を扱える言語である<a class="keyword" href="http://d.hatena.ne.jp/keyword/Scheme">Scheme</a>では、多値を作る関数をこう定義できます。</p>

<pre class="code lang-scheme" data-lang="scheme" data-unlink><span class="synSpecial">(</span><span class="synStatement">define</span> <span class="synSpecial">(</span><span class="synIdentifier">values</span> <span class="synSpecial">.</span> xs<span class="synSpecial">)</span>
  <span class="synSpecial">(</span><span class="synIdentifier">call/cc</span> <span class="synSpecial">(</span><span class="synStatement">lambda</span> <span class="synSpecial">(</span>k<span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synIdentifier">apply</span> k xs<span class="synSpecial">))))</span>
</pre>


<p><code>call/cc</code> で <code>values</code> 呼び出し以降の処理を切り取って <code>k</code> とし、その継続に <code>values</code> の引数を入れるという、まさに「継続の引数が多値である」をそのまま表したコードになっています。
きれいだ・・・！</p>

<h2>関数</h2>

<p>さて、ここまでは多値と相性のよいものを見てきました。
ここからは、関数について少し考えてみます。</p>

<h3><a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a>言語と関数</h3>

<p>メジャーな<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a>言語では、関数は1入力1出力というモデルです。</p>

<p>多入力したい場合は「関数を返す関数」のように関数を値として扱えるようにしたことで解決しています(カリー化というやつ)。</p>

<pre class="code lang-fsharp" data-lang="fsharp" data-unlink><span class="synComment">// F#</span>
<span class="synComment">// let add x y = x + yと同じ</span>
<span class="synStatement">let</span> <span class="synIdentifier">add</span> <span class="synStatement">=</span> <span class="synStatement">fun</span> x <span class="synStatement">-&gt;</span> <span class="synStatement">fun</span> y <span class="synStatement">-&gt;</span> x <span class="synStatement">+</span> y
</pre>


<p>多出力したい場合はどうでしょうか。
これも、「関数を受け取る関数」により実現できます。
これはつまり、継続で見た方法です<a href="#f-d7de6de9" name="fn-d7de6de9" title="多入力と多出力で戻り値の位置に関数がくるか、引数の位置に関数がくるかが入れ替わるのも面白いですね。双対性というやつでしょうか。">*5</a>。</p>

<pre class="code lang-fsharp" data-lang="fsharp" data-unlink><span class="synComment">// F#</span>
<span class="synStatement">let</span> <span class="synIdentifier">f</span> <span class="synStatement">=</span> <span class="synStatement">fun</span> x <span class="synStatement">-&gt;</span> <span class="synStatement">fun</span> k <span class="synStatement">-&gt;</span>
  k x <span class="synStatement">(</span>x <span class="synStatement">*</span> <span class="synConstant">2</span><span class="synStatement">)</span> <span class="synComment">// (k x)で返ってきた関数に(x * 2)を適用</span>

<span class="synComment">// シンタックスシュガーを使うと、</span>
<span class="synComment">// f 3 (fun x y -&gt; add x y)</span>
<span class="synComment">// とか</span>
<span class="synComment">// f 3 add</span>
<span class="synComment">// とか書ける</span>
f <span class="synConstant">3</span> <span class="synStatement">(fun</span> x <span class="synStatement">-&gt;</span> <span class="synStatement">fun</span> y <span class="synStatement">-&gt;</span>
  add x y <span class="synComment">// (add x)で返ってきた関数にyを適用</span>
<span class="synStatement">)</span>
</pre>


<p>このように、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a>言語では1入力1出力の関数だけですべてを表せる世界を作っているわけです<a href="#f-c5d123b0" name="fn-c5d123b0" title="念のため: 実際にこんなコードは書きません。">*6</a>。
これはこれできれいですね。</p>

<h3>手続き型<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語</a>と関数</h3>

<p>Go言語を除いた多くの手続き型<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語</a>では、関数は多入力1出力です。
なぜ入力は複数許すのに、出力は1つか許してないのでしょうか。
自分は<a class="keyword" href="http://d.hatena.ne.jp/keyword/C%B8%C0%B8%EC">C言語</a>が1つの戻り値しか許さないようになっていたのをずっと引きずってきたのではないか、と考えています。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA">アセンブリ</a>レベルまで降りていけば、そもそも<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF">レジスタ</a>を使って複数の値を返すようなサブルーチンなんかは普通に書けるわけです。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/x86">x86</a>であれば、divはeaxに商を、edxに余りを格納しますが、これも多値を返していると見なせます。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA">アセンブリ</a>レベルまで降りれば多値が使えるのに、今までの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語</a>ではそれを有効活用してこなかったことになります。
これは、手続き型<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語</a>が計算機を効率よく使えるように進化してきたことを考えると、少し不幸な感じがします。
Go言語は、そういった世界をぶち壊す<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%D1%A5%AF">インパク</a>トを持った言語だと思います<a href="#f-3ceae65c" name="fn-3ceae65c" title="しかし、前のエントリでも書いたように、Go言語は多値っぽいけど多値じゃないものを入れてしまったのでそこはすごく残念。">*7</a>。</p>

<h3>タプルと多値(と手続き型<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語</a>)</h3>

<p>多値はネストができません。他の値の要素となることもできません。
この制約によって多値は何を手に入れたのでしょうか。</p>

<p>それは、効率です。
多値と同じようなものとみられることもあるタプルですが、タプルはあくまで1つの値に複数の値をパックしたものです。
パックする処理(タプルの構築)も、アンパックする処理(タプルの分解)も、どれもタダというわけではありません。
言語処理系において、タプルの効率を上げようとする試みはいくつもありますが、タプルが値である以上、すべてのタプルを最適化できるわけではありません。</p>

<p>それに対し、多値は単なる複数の値であり、それ自体は値ではありません(スタックに積んであるだけ、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF">レジスタ</a>に並んでいるだけ)。
そのため、パックやアンパックなどとは無縁の世界で生きていられます。</p>

<p>手続き型<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語</a>でも関数がファーストクラスの値として使えるような言語が増えてきましたが、
手続き型<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語</a>は本来、計算機を効率を程よく保ったまま抽象的に扱えるようにした言語であるべきではないでしょうか(ただし異論は認める)。
その場合、関数だのタプルだのをファーストクラスで扱えることにこだわらず、効率よく扱えるものを扱うにとどめるという割り切った言語があってもいいと思います。</p>

<p>ただ、ユーザー定義できる型と<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9">ジェネリクス</a>があるとそれだけでタプルが作れてしまうので、多値がないがしろにされがち、というのはあるかもしれません。</p>

<h2>多値とは</h2>

<p>さて、多値とは何者でしょうか。</p>

<ul>
<li>「単なるスタックに積まれた値だよ」</li>
<li>「単なる継続の引数だよ」</li>
<li>「Go言語の多値が多値だよ」</li>
</ul>


<p>色々と意見はあるでしょうが、ここからは「カンマで区切られた単なる複数の値だよ」という妄想の世界の話です。
ちなみに、上の3つだと一番下が一番近いです(が、別物です)。</p>

<h3>多値かくあるべし！</h3>

<p>架空の言語(WillGoとでもしておきましょう)を考えます。
この言語では、多値はカンマで区切られた単なる複数の値です。
どういうことか見てみましょう。
まずは、多値を返す関数です。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synComment">// 型と値の間にはコロンを置く(趣味)</span>
<span class="synComment">// 多値を出力する関数は、出力する型をそれぞれカンマで区切って表現する</span>
<span class="synStatement">func</span> f(a: <span class="synType">int</span>): <span class="synType">int</span>, <span class="synType">int</span> {
    <span class="synStatement">return</span> a, a * <span class="synConstant">2</span> <span class="synComment">// 多値を返している。</span>
}

x, y := f(<span class="synConstant">3</span>) <span class="synComment">// x, yというのは多値を表している。</span>
</pre>


<p>多値はカンマで区切られたものとして表現されていますね。</p>

<p>多値を受け取る関数も見てみましょう。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synComment">// a: int, b: int というのは、多値を受け取る関数であることを表している。</span>
<span class="synComment">// 関数の出力で多値を表す場合と同じ表現であることが分かる。</span>
<span class="synStatement">func</span> add(a: <span class="synType">int</span>, b: <span class="synType">int</span>): <span class="synType">int</span> {
    <span class="synStatement">return</span> a + b
}

result := add(<span class="synConstant">1</span>, <span class="synConstant">2</span>) <span class="synComment">// 1, 2というのは多値を表している。</span>
</pre>


<p>当然、多値を返す関数の結果をそのまま多値を渡す関数に渡せます。</p>

<pre class="code lang-go" data-lang="go" data-unlink>result := add(f(<span class="synConstant">3</span>)) <span class="synComment">// 多値を渡す関数に多値を返す関数の結果をそのまま渡している。</span>
</pre>


<p>ここまではいい感じですね。</p>

<h3>多値かくあるべし・・・？</h3>

<p>さて、多値は「カンマで区切られた単なる複数の値」でした。
ここから、妄想らしくなっていきます。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synComment">// 4引数版addを定義。</span>
<span class="synStatement">func</span> add4(a: <span class="synType">int</span>, b: <span class="synType">int</span>, c: <span class="synType">int</span>, d: <span class="synType">int</span>): <span class="synType">int</span> {
    <span class="synStatement">return</span> a + b + c + d
}

result := add4(<span class="synConstant">1</span>, <span class="synConstant">2</span>, <span class="synConstant">3</span>, <span class="synConstant">4</span>) <span class="synComment">// 1, 2, 3, 4は多値。</span>
</pre>


<p>この <code>add4</code> に対して、こんな呼び出しはどうでしょうか。</p>

<pre class="code lang-go" data-lang="go" data-unlink>res1 := add4(<span class="synConstant">1</span>, <span class="synConstant">2</span>, f(<span class="synConstant">3</span>))
res2 := add4(<span class="synConstant">1</span>, f(<span class="synConstant">2</span>), <span class="synConstant">3</span>)
res3 := add4(f(<span class="synConstant">1</span>), f(<span class="synConstant">2</span>))
</pre>


<p>くどいようですが、多値は「カンマで区切られた単なる複数の値」でした。
であるならば、「そこに展開した結果がvalidであればvalidとする」としてもいいと思いませんか。
きれいだ・・・！</p>

<h3>きれいな多値の分かりにくさ</h3>

<p>さて、この架空の言語ですが、関数呼び出しを見ても引数の個数が分からないという問題があります。</p>

<pre class="code lang-go" data-lang="go" data-unlink>res3 := add4(f(<span class="synConstant">1</span>), f(<span class="synConstant">2</span>)) <span class="synComment">// 2引数関数に見える</span>
</pre>


<p>今どきの<a class="keyword" href="http://d.hatena.ne.jp/keyword/IDE">IDE</a>なら、コード上に書かれていない文字列を表示するくらいやってのけるので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/IDE">IDE</a>前提であれば使えるかもしれません。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synComment">// 上のコードは、IDEで開くとこう見える(実際に書いてない部分はグレーアウト)。</span>
res3 := add4(a, b=f(x=<span class="synConstant">1</span>), c,d=f(x=<span class="synConstant">2</span>))
</pre>


<p>もしくは、関数名さえ気を付ければそれほど問題にはならないかもしれません。</p>

<p>ちなみに、実在するGoという言語はこの問題に足を片方入れています。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synComment">// Go言語</span>
res := f(g()) <span class="synComment">// さて、fは何引数関数でしょう？</span>
</pre>


<p>そこまでやったのであれば、きれいな多値が欲しくなりませんか？</p>

<h3>可変長引数と多値、もしくは可変長戻り値と多値</h3>

<p>ここまでくると、行くところまで行ってみたい気がしますね。
引数を何個でも指定できる関数というものがあります。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synStatement">func</span> sum(xs: ...<span class="synType">int</span>): <span class="synType">int</span> {
    res := <span class="synConstant">0</span>
    <span class="synStatement">for</span> _, x <span class="synStatement">range</span> xs {
        res += x
    }
    <span class="synStatement">return</span> res
}

result := sum(<span class="synConstant">1</span>, <span class="synConstant">2</span>, <span class="synConstant">3</span>)
</pre>


<p>では、戻り値を何個でも指定できる関数というのはどうでしょうか。</p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synStatement">func</span> f(b: <span class="synType">bool</span>): ...<span class="synType">int</span> {
    <span class="synStatement">if</span> b {
        <span class="synStatement">return</span> <span class="synConstant">1</span>, <span class="synConstant">2</span>
    } <span class="synStatement">else</span> {
        <span class="synStatement">return</span> <span class="synConstant">4</span>, <span class="synConstant">5</span>, <span class="synConstant">6</span>
    }
}
</pre>


<p>これは、通常の手段では受け取れない関数となります。
この結果を使うためには、可変長引数の関数が必要です。</p>

<pre class="code lang-go" data-lang="go" data-unlink>result := sum(f(<span class="synStatement">true</span>))
</pre>


<p>または、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル</a>時定数が渡された場合のみ受け取れるようにするのも面白そうです<a href="#f-5b8239b8" name="fn-5b8239b8" title="ただし、コンパイル時間は無視するものとする。">*8</a>。</p>

<pre class="code lang-go" data-lang="go" data-unlink>a, b, c := sum(f(<span class="synStatement">false</span>)) <span class="synComment">// OK</span>
d, e, f := sum(f(<span class="synStatement">true</span>)) <span class="synComment">// コンパイルエラー</span>
</pre>


<p>スライスに変換する組み込み関数があれば(効率以外は)問題ありません。</p>

<pre class="code lang-go" data-lang="go" data-unlink>xs := valuesToSlice(f(<span class="synStatement">true</span>))
ys := valuesToSlice(f(<span class="synStatement">false</span>))
</pre>


<p>これで、多値を「カンマで区切られた単なる複数の値」としてみなしても成り立ちそうだということがなんとなくわかっていただけたかと思います(便利だとは言っていない)。</p>

<p>このように、多値は多値で面白い世界が広がっているのです。
Go言語の多値は始まりでしかありません。
みなさんも自分だけの多値の世界を考えて、どんどん多値のすばらしさを世界に発信していきましょう！</p>

<h2>参考ページ</h2>

<ul>
<li><a href="https://practical-scheme.net/wiliki/wiliki.cgi?Scheme%3A%E5%A4%9A%E5%80%A4">Scheme:&#x591A;&#x5024;</a>: <a class="keyword" href="http://d.hatena.ne.jp/keyword/Scheme">Scheme</a>での多値についての解説ページ。</li>
<li><a href="http://practical-scheme.net/docs/cont-j.html">&#x306A;&#x3093;&#x3067;&#x3082;&#x7D99;&#x7D9A;</a>: 継続についての解説ページ。未完。</li>
<li><a href="http://www.kmonos.net/wlog/95.html#_1109090307">&#x601D;&#x8003;&#x5B9F;&#x9A13;: return&#x3092;&#x95A2;&#x6570;&#x3068;&#x601D;&#x3063;&#x3066;&#x307F;&#x308B;&#x8A71;</a>: <a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a>風言語でreturnを関数と思ったらどういう世界があるのか考察したページ。</li>
<li><a href="http://d.hatena.ne.jp/m-hiyama/20060209/1139450736">&#x306A;&#x305C;&#x3001;&#x591A;&#x5024;&#x95A2;&#x6570;&#x306F;&#x4EBA;&#x6C17;&#x304C;&#x306A;&#x3044;&#x306E;&#x3060;&#x308D;&#x3046; - &#x6A9C;&#x5C71;&#x6B63;&#x5E78;&#x306E;&#x30AD;&#x30DE;&#x30A4;&#x30E9;&#x98FC;&#x80B2;&#x8A18;</a>: 多値が流行っていない理由の考察ページ。</li>
<li>他にもあったけど忘れた・・・</li>
</ul>

<div class="footnote">
<p class="footnote"><a href="#fn-3d7100dc" name="f-3d7100dc" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">メジャーな言語だと<a class="keyword" href="http://d.hatena.ne.jp/keyword/Scheme">Scheme</a>/<a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>とGoくらいではないでしょうか。何をメジャーに入れるかという問題はありますが。※<a class="keyword" href="http://d.hatena.ne.jp/keyword/Lua">Lua</a>も多値を持っているようです。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a>で教えてもらいました。※<a class="keyword" href="http://d.hatena.ne.jp/keyword/GHC">GHC</a>拡張にもUnboxed Tuplesという構文拡張があるようです。これも<a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a>で教えてもらいました。</span></p>
<p class="footnote"><a href="#fn-c88d3592" name="f-c88d3592" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">クラスのフィールドとして持たせられる。</span></p>
<p class="footnote"><a href="#fn-f2b77382" name="f-f2b77382" class="footnote-number">*3</a><span class="footnote-delimiter">:</span><span class="footnote-text">ただし、上で例に挙げた<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%BE%C1%DB%A5%DE%A5%B7%A5%F3">仮想マシン</a>(や、他の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%BE%C1%DB%A5%DE%A5%B7%A5%F3">仮想マシン</a>)では、m個の値を積んだ状態で関数からreturnすることを許していません。</span></p>
<p class="footnote"><a href="#fn-46c2aa22" name="f-46c2aa22" class="footnote-number">*4</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="http://www.kmonos.net/wlog/95.html#_1109090307">http://www.kmonos.net/wlog/95.html#_1109090307</a> という記事を思い出したので置いておきます。この記事では、returnを関数と見なすとどうなるだろう、という思考実験をしています。</span></p>
<p class="footnote"><a href="#fn-d7de6de9" name="f-d7de6de9" class="footnote-number">*5</a><span class="footnote-delimiter">:</span><span class="footnote-text">多入力と多出力で戻り値の位置に関数がくるか、引数の位置に関数がくるかが入れ替わるのも面白いですね。双対性というやつでしょうか。</span></p>
<p class="footnote"><a href="#fn-c5d123b0" name="f-c5d123b0" class="footnote-number">*6</a><span class="footnote-delimiter">:</span><span class="footnote-text">念のため: 実際にこんなコードは書きません。</span></p>
<p class="footnote"><a href="#fn-3ceae65c" name="f-3ceae65c" class="footnote-number">*7</a><span class="footnote-delimiter">:</span><span class="footnote-text">しかし、前のエントリでも書いたように、Go言語は多値っぽいけど多値じゃないものを入れてしまったのでそこはすごく残念。</span></p>
<p class="footnote"><a href="#fn-5b8239b8" name="f-5b8239b8" class="footnote-number">*8</a><span class="footnote-delimiter">:</span><span class="footnote-text">ただし、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル</a>時間は無視するものとする。</span></p>
</div>
    

  
</div>

    
  <footer class="entry-footer">
    
    <p class="entry-footer-section">
  <span class="author vcard"><span class="fn" data-load-nickname="1" data-user-name="bleis-tift">bleis-tift</span></span>
  <span class="entry-footer-time"><a href="http://bleis-tift.hatenablog.com/entry/multiple-values"><time data-relative datetime="2018-11-12T04:00:00Z" title="2018-11-12T04:00:00Z" pubdate class="updated">2018-11-12 13:00</time></a></span>
</p>

    
  <div class="hatena-star-container">
  </div>
  <div class="hatena-star-metadata" style="display: none">
    <a class="hatena-star-permalink" href="http://bleis-tift.hatenablog.com/entry/multiple-values">多値について本気で考えてみた</a>
  </div>


    
<div class="social-buttons">
  
  
    <div class="social-button-item">
      <a href="http://b.hatena.ne.jp/entry/http://bleis-tift.hatenablog.com/entry/multiple-values" class="hatena-bookmark-button" data-hatena-bookmark-layout="vertical-balloon" data-hatena-bookmark-lang="ja" title="この記事をはてなブックマークに追加"><img src="https://b.st-hatena.com/images/entry-button/button-only.gif" alt="この記事をはてなブックマークに追加" width="20" height="20" style="border: none;" /></a>
    </div>
  
  
    <div class="social-button-item">
      <div class="fb-share-button" data-layout="box_count" data-href="http://bleis-tift.hatenablog.com/entry/multiple-values"></div>
    </div>
  
  
    <div class="social-button-item">
      <a href="https://twitter.com/share" class="twitter-share-button" data-url="http://bleis-tift.hatenablog.com/entry/multiple-values" data-count="vertical" data-text="多値について本気で考えてみた - ぐるぐる～" data-lang="ja">Tweet</a>
    </div>
  
  
    <div class="social-button-item">
      <div class="g-plusone" data-size="tall" data-href="http://bleis-tift.hatenablog.com/entry/multiple-values"></div>
    </div>
  
  
  
  
</div>

    
  
  
    
    <div class="google-afc-image test-google-rectangle-ads">      
      
      <div id="google_afc_user_container_0" class="google-afc-user-container google_afc_blocklink2_5 google_afc_boder" data-test-unit="/4374287/blog_user"></div>
      
        <a href="http://blog.hatena.ne.jp/guide/pro" class="open-pro-modal" data-guide-pro-modal-ad-url="https://hatenablog.com/guide/pro/modal/ad">広告を非表示にする</a>
      
    </div>
  
  


    <div class="customized-footer">
      

        

        

          <div class="entry-footer-modules" id="entry-footer-secondary-modules">      
<div class="hatena-module hatena-module-related-entries" >
      
  <!-- Hatena-Epic-has-related-entries-with-elasticsearch:true -->
  <div class="hatena-module-title">
    関連記事
  </div>
  <div class="hatena-module-body">
    <ul class="related-entries hatena-urllist urllist-with-thumbnails">
  
  
    
    <li class="urllist-item related-entries-item">
      <div class="urllist-item-inner related-entries-item-inner">
        
                      <div class="urllist-date-link related-entries-date-link">
  <a href="http://bleis-tift.hatenablog.com/archive/2018/11/08" rel="nofollow">
    <time pubdate datetime="2018-11-08T04:00:00Z" title="2018-11-08T04:00:00Z">
      2018-11-08
    </time>
  </a>
</div>

          <a href="http://bleis-tift.hatenablog.com/entry/go-the-bad-parts" class="urllist-title-link related-entries-title-link  urllist-title related-entries-title">Go言語のイケてない部分</a>


          
          

                      <div class="urllist-entry-body related-entries-entry-body">最近色々あって仕事でGo言語を使っています。 色々割り切ってい…</div>
      </div>
    </li>
  
    
    <li class="urllist-item related-entries-item">
      <div class="urllist-item-inner related-entries-item-inner">
        
                      <div class="urllist-date-link related-entries-date-link">
  <a href="http://bleis-tift.hatenablog.com/archive/2013/10/08" rel="nofollow">
    <time pubdate datetime="2013-10-08T04:12:22Z" title="2013-10-08T04:12:22Z">
      2013-10-08
    </time>
  </a>
</div>

          <a href="http://bleis-tift.hatenablog.com/entry/overload" class="urllist-title-link related-entries-title-link  urllist-title related-entries-title">オーバーロードって素晴らしいですよね！</a>


          
          

                      <div class="urllist-entry-body related-entries-entry-body">オーバーロード いやぁ、オーバーロードって素晴らしいものです…</div>
      </div>
    </li>
  
    
    <li class="urllist-item related-entries-item">
      <div class="urllist-item-inner related-entries-item-inner">
        
                      <div class="urllist-date-link related-entries-date-link">
  <a href="http://bleis-tift.hatenablog.com/archive/2013/05/01" rel="nofollow">
    <time pubdate datetime="2013-05-01T03:57:38Z" title="2013-05-01T03:57:38Z">
      2013-05-01
    </time>
  </a>
</div>

          <a href="http://bleis-tift.hatenablog.com/entry/functionalcs" class="urllist-title-link related-entries-title-link  urllist-title related-entries-title">Java 8を関数型っぽく使うためのおまじないをC#でやってみた</a>


          
          

                      <div class="urllist-entry-body related-entries-entry-body">Java 8を関数型っぽく使うためのおまじない - きしだのはてな J…</div>
      </div>
    </li>
  
    
    <li class="urllist-item related-entries-item">
      <div class="urllist-item-inner related-entries-item-inner">
        
                      <a class="urllist-image-link related-entries-image-link" href="http://bleis-tift.hatenablog.com/entry/20120520/1337502276">
  <img alt="第一回 関数型言語勉強会 大阪に行ってきた" src="https://cdn.image.st-hatena.com/image/square/ab5c2efa161c493582f0345d131fa91d6b12d66b/backend=imagemagick;height=100;version=1;width=100/http%3A%2F%2Fa0.twimg.com%2Fprofile_images%2F1674904906%2Fyoshihiro503_icon_normal.png" class="urllist-image related-entries-image" title="第一回 関数型言語勉強会 大阪に行ってきた" width="100">
</a>
            <div class="urllist-date-link related-entries-date-link">
  <a href="http://bleis-tift.hatenablog.com/archive/2012/05/20" rel="nofollow">
    <time pubdate datetime="2012-05-20T08:24:36Z" title="2012-05-20T08:24:36Z">
      2012-05-20
    </time>
  </a>
</div>

          <a href="http://bleis-tift.hatenablog.com/entry/20120520/1337502276" class="urllist-title-link related-entries-title-link  urllist-title related-entries-title">第一回 関数型言語勉強会 大阪に行ってきた</a>


          
          

                      <div class="urllist-entry-body related-entries-entry-body">44人の枠に一時期80人以上が申し込むという人気ぶりの勉強会、…</div>
      </div>
    </li>
  
    
    <li class="urllist-item related-entries-item">
      <div class="urllist-item-inner related-entries-item-inner">
        
                      <a class="urllist-image-link related-entries-image-link" href="http://bleis-tift.hatenablog.com/entry/20120423/1335162974">
  <img alt="SCM Boot Camp in Nagoya に行ってきた・・・と見せかけた SML# の多相レコードの話" src="https://cdn.image.st-hatena.com/image/square/5d3149c81b8c7a1419e6f613100bc17757d0913d/backend=imagemagick;height=100;version=1;width=100/http%3A%2F%2Fcdn-ak.f.st-hatena.com%2Fimages%2Ffotolife%2Fb%2Fbleis-tift%2F20120422%2F20120422230125.png" class="urllist-image related-entries-image" title="SCM Boot Camp in Nagoya に行ってきた・・・と見せかけた SML# の多相レコードの話" width="100">
</a>
            <div class="urllist-date-link related-entries-date-link">
  <a href="http://bleis-tift.hatenablog.com/archive/2012/04/23" rel="nofollow">
    <time pubdate datetime="2012-04-23T06:36:14Z" title="2012-04-23T06:36:14Z">
      2012-04-23
    </time>
  </a>
</div>

          <a href="http://bleis-tift.hatenablog.com/entry/20120423/1335162974" class="urllist-title-link related-entries-title-link  urllist-title related-entries-title">SCM Boot Camp in Nagoya に行ってきた・・・と見せかけた SML# の多相レコ…</a>


          
          

                      <div class="urllist-entry-body related-entries-entry-body">SCM Boot Camp については他の型方が書いてくれると思うので、…</div>
      </div>
    </li>
  
</ul>

  </div>
</div>
  </div>
        

      
    </div>
    
  <div class="comment-box">
    
    <ul class="comment">
      <li class="read-more-comments" style="display: none;"><a>もっと読む</a></li>
    </ul>
    
      <a class="leave-comment-title">コメントを書く</a>
    
  </div>

  </footer>

  </div>
</article>

      
      
    
  

  
  <!-- rakuten_ad_target_end -->
  <!-- google_ad_section_end -->
  
  
  
  <div class="pager pager-permalink permalink">
    
    
      
      <span class="pager-next">
        <a href="http://bleis-tift.hatenablog.com/entry/go-the-bad-parts" rel="next">
          Go言語のイケてない部分
          <span class="pager-arrow"> &raquo;</span>
        </a>
      </span>
    
  </div>


  



        </div>
      </div>

      <aside id="box1">
  <div id="box1-inner">
  </div>
</aside>

    </div><!-- #wrapper -->

    
<aside id="box2">
  
  <div id="box2-inner">
    
      

<div class="hatena-module hatena-module-profile">
  <div class="hatena-module-title">
    プロフィール
  </div>
  <div class="hatena-module-body">
    
    <a href="http://bleis-tift.hatenablog.com/about" class="profile-icon-link">
      <img src="https://cdn.profile-image.st-hatena.com/users/bleis-tift/profile.png"
      alt="id:bleis-tift" class="profile-icon" />
    </a>
    

    
    <span class="id">
      <a href="http://bleis-tift.hatenablog.com/about" class="hatena-id-link"><span data-load-nickname="1" data-user-name="bleis-tift">id:bleis-tift</span></a>
      
  
    
    
  


    </span>
    

    

    

    
      <div class="hatena-follow-button-box btn-subscribe js-hatena-follow-button-box"
  
  >

  <a href="#" class="hatena-follow-button js-hatena-follow-button">
    <span class="subscribing">
      <span class="foreground">読者です</span>
      <span class="background">読者をやめる</span>
    </span>
    <span class="unsubscribing" data-track-name="profile-widget-subscribe-button" data-track-once>
      <span class="foreground">読者になる</span>
      <span class="background">読者になる</span>
    </span>
  </a>
  <div class="subscription-count-box js-subscription-count-box">
    <i></i>
    <u></u>
    <span class="subscription-count js-subscription-count">
    </span>
  </div>
</div>

    

    
  </div>
</div>

    
      

<div class="hatena-module hatena-module-category">
  <div class="hatena-module-title">
    カテゴリー
  </div>
  <div class="hatena-module-body">
    <ul class="hatena-urllist">
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/etc">
            etc (380)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/C%23">
            C# (127)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Program">
            Program (115)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Book">
            Book (113)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Java">
            Java (113)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/SQL">
            SQL (89)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/PC">
            PC (87)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/F%23">
            F# (69)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/C%2B%2B">
            C++ (40)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/.NET">
            .NET (27)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Web%20Site">
            Web Site (26)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Memo">
            Memo (25)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Git">
            Git (22)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/TDD">
            TDD (14)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Scala">
            Scala (12)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/DB">
            DB (11)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/PowerShell">
            PowerShell (11)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/%E5%A6%84%E6%83%B3">
            妄想 (10)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/JavaScript">
            JavaScript (7)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Excel">
            Excel (6)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Security">
            Security (6)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/XSLT">
            XSLT (6)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/OOP">
            OOP (5)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Python">
            Python (5)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/XML">
            XML (4)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/JSX">
            JSX (4)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Ruby">
            Ruby (4)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/%E8%AC%8E">
            謎 (3)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/VB.NET">
            VB.NET (3)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Test">
            Test (3)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/IL">
            IL (3)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/RDB">
            RDB (3)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/SML%23">
            SML# (3)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Go">
            Go (2)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Debian">
            Debian (2)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Hudson">
            Hudson (2)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Vim">
            Vim (2)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/WPF">
            WPF (2)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/VirtualBox">
            VirtualBox (1)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/nagoyarubykaigi01">
            nagoyarubykaigi01 (1)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/Jenkins">
            Jenkins (1)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/%E3%81%A6%E3%81%99%E3%81%A8">
            てすと (1)
          </a>
        </li>
      
        <li>
          <a href="http://bleis-tift.hatenablog.com/archive/category/C">
            C (1)
          </a>
        </li>
      
    </ul>
  </div>
</div>

    
      <div class="hatena-module hatena-module-search-box">
  <div class="hatena-module-title">
    検索
  </div>
  <div class="hatena-module-body">
    <form class="search-form" role="search" action="http://bleis-tift.hatenablog.com/search" method="get">
  <input type="text" name="q" class="search-module-input" value="" placeholder="記事を検索" required>
  <input type="submit" value="検索" class="search-module-button" />
</form>

  </div>
</div>

    
    
  </div>
</aside>


  </div>
</div>




        

        

      </div>
    </div>
    
<footer id="footer" data-brand="hatenablog">
  <div id="footer-inner">
    
      <div style="display:none !important" class="guest-footer js-guide-register test-blogs-register-guide" data-action="guide-register">
  <div class="guest-footer-content">
    <h3>はてなブログをはじめよう！</h3>
    <p>bleis-tiftさんは、はてなブログを使っています。あなたもはてなブログをはじめてみませんか？</p>
    <div class="guest-footer-btn-container">
      <div  class="guest-footer-btn">
        <a class="btn btn-register" href="http://blog.hatena.ne.jp/register?via=200227" target="_blank">はてなブログをはじめる（無料）</a>
      </div>
      <div  class="guest-footer-btn">
        <a href="https://hatenablog.com/guide" target="_blank">はてなブログとは</a>
      </div>
    </div>
  </div>
</div>

    
    <address class="footer-address">
      <a href="http://bleis-tift.hatenablog.com/">
        <img src="https://cdn.blog.st-hatena.com/images/admin/blog-icon-noimage.png" width="16" height="16" alt="ぐるぐる～"/>
        <span class="footer-address-name">ぐるぐる～</span>
      </a>
    </address>
    <p class="services">
      Powered by <a href="https://hatenablog.com/">Hatena Blog</a>
      |
        <a href="https://blog.hatena.ne.jp/-/abuse_report?target_url=http%3A%2F%2Fbleis-tift.hatenablog.com%2Fentry%2Fmultiple-values" class="report-abuse-link test-report-abuse-link" target="_blank">ブログを報告する</a>
    </p>
  </div>
</footer>


    

    
  <script src="https://s.hatena.ne.jp/js/HatenaStar.js?20180530"></script>


    
      <div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/ja_JP/sdk.js#xfbml=1&appId=719729204785177&version=v2.7";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

    
    

<div class="quote-box">
  <div class="tooltip-quote tooltip-quote-star">
    <i class="blogicon-star" title="引用スターをつける"></i>
  </div>
  <div class="tooltip-quote tooltip-quote-stock">
    <i class="blogicon-quote" title="引用をストック"></i>
  </div>
  <div class="tooltip-quote tooltip-quote-tweet js-tooltip-quote-tweet">
    <a class="js-tweet-quote" target="_blank" data-track-name="quote-tweet" data-track-once><i class="blogicon-twitter" title="引用してツイートする"></i></a>
  </div>
</div>

<div class="message-box" id="quote-star-message-box" style="display: none; position: absolute;">
  スターをつけました
</div>

<div class="quote-stock-panel" id="quote-stock-message-box" style="position: absolute; z-index: 3000">
  <div class="message-box" id="quote-stock-succeeded-message" style="display: none">
    <p>引用をストックしました</p>
    <button class="btn btn-primary" id="quote-stock-show-editor-button" data-track-name="curation-quote-edit-button">ストック一覧を見る</button>
    <button class="btn quote-stock-close-message-button">閉じる</button>
  </div>

  <div class="message-box" id="quote-login-required-message" style="display: none">
    <p>引用するにはまずログインしてください</p>
    <button class="btn btn-primary" id="quote-login-button">ログイン</button>
    <button class="btn quote-stock-close-message-button">閉じる</button>
  </div>

  <div class="error-box" id="quote-stock-failed-message" style="display: none">
    <p>引用をストックできませんでした。再度お試しください</p>
    <button class="btn quote-stock-close-message-button">閉じる</button>
  </div>

  <div class="error-box" id="unstockable-quote-message-box" style="display: none; position: absolute; z-index: 3000;">
    <p>限定公開記事のため引用できません。</p>
  </div>
</div>

<script type="x-underscore-template" id="js-requote-button-template">
  <div class="requote-button js-requote-button">
    <button class="requote-button-btn tipsy-top" title="引用する"><i class="blogicon-quote"></i></button>
  </div>
</script>



    
    <div id="hidden-subscribe-button" style="display: none;">
      <div class="hatena-follow-button-box btn-subscribe js-hatena-follow-button-box"
  
  >

  <a href="#" class="hatena-follow-button js-hatena-follow-button">
    <span class="subscribing">
      <span class="foreground">読者です</span>
      <span class="background">読者をやめる</span>
    </span>
    <span class="unsubscribing" data-track-name="profile-widget-subscribe-button" data-track-once>
      <span class="foreground">読者になる</span>
      <span class="background">読者になる</span>
    </span>
  </a>
  <div class="subscription-count-box js-subscription-count-box">
    <i></i>
    <u></u>
    <span class="subscription-count js-subscription-count">
    </span>
  </div>
</div>

    </div>

    
  <script type="text/javascript" src="https://platform.twitter.com/widgets.js"></script>

<script src="https://apis.google.com/js/platform.js" async defer>
  { lang: 'ja', "parsetags": "explicit" }
</script>
<script type="text/javascript" src="https://b.st-hatena.com/js/bookmark_button.js" charset="utf-8" async="async"></script>



  <script type="text/javascript" src="https://cdn.blog.st-hatena.com/js/external/react-with-addons.min.js?version=15.4.1"></script>
  <script type="text/javascript" src="https://cdn.blog.st-hatena.com/js/external/react-dom.min.js?version=15.4.1"></script>


<script type="text/javascript" src="https://cdn.blog.st-hatena.com/js/external/jquery.min.js?version=1.12.3"></script>
<script type="text/javascript" src="//cdn7.www.st-hatena.com/js/jquery/jquery-ui.1.10.0.custom.min.js"></script>
<script type="text/javascript" src="https://cdn.blog.st-hatena.com/js/external/jquery.flot.js?version=0.8.3"></script>
<script type="text/javascript" src="https://cdn.blog.st-hatena.com/js/external/jquery.flot.time.js?version=0.8.3"></script>





<script type="text/javascript" src="https://cdn.blog.st-hatena.com/js/texts-ja.js?version=2d52b277ea741221b3d0780bc5bd5ddf8557c2d1&amp;env=production"></script>
<script id="hatenablog-js" data-env="production"
  type="text/javascript" src="https://cdn.blog.st-hatena.com/js/hatenablog.js?version=7536a194b6c212b3aa1a7af74d4ae82e0ae1b804&amp;env=production" crossorigin="anonymous"></script>


  <script type="text/javascript">Hatena.Diary.GlobalHeader.init()</script>


<script src="https://www.google.com/recaptcha/api.js" async defer></script>




    
  <script id="valve-dmp" data-service="blog" src="https://cdn.pool.st-hatena.com/valve/dmp.js" data-test-id="dmpjs" async></script>


    





  </body>
</html>

